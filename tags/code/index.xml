<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Code on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/code/index.xml</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Wed, 02 Jul 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Readable, Succinct, or Just Plain Short?</title>
      <link>http://trishagee.github.io/post/short_vs_readable.md</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/short_vs_readable.md</guid>
      <description>&lt;p&gt;Which is more readable?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;releaseVersion = version.substring(0, version.indexOf(&#39;-SNAPSHOT&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;releaseVersion = version[0..-10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given a value of &lt;code&gt;0.109-SNAPSHOT&lt;/code&gt; for &lt;code&gt;version&lt;/code&gt;, they both give the same result.  And I&amp;rsquo;m tempted by the second,
because it&amp;rsquo;s shorter.  But I&amp;rsquo;m going to go with the first one - not because it&amp;rsquo;s more Java-ish and I&amp;rsquo;m scared of Groovy syntax,
but because it&amp;rsquo;s easier to understand if/when something goes wrong.&lt;/p&gt;

&lt;p&gt;For example: if &lt;code&gt;version&lt;/code&gt; doesn&amp;rsquo;t conform to the expected pattern, the two code fragments fail in two different ways.  If &lt;code&gt;version&lt;/code&gt;
doesn&amp;rsquo;t contain &lt;code&gt;-SNAPSHOT&lt;/code&gt;, the first will fail with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java.lang.StringIndexOutOfBoundsException: String index out of range: -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;whereas the second will either arbitrarily slice the last 9 characters off the end of whatever the String does contain,
or if it&amp;rsquo;s too short you&amp;rsquo;ll get something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java.lang.ArrayIndexOutOfBoundsException: Negative array index [-10] too large for array size 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you, the developer, see this error (or notice your mangled version number) and look at the failing line of code,
you&amp;rsquo;ll have two different experiences.  When looking at the second example, if you didn&amp;rsquo;t write it in the first place or if you have a
memory as shocking as mine, you won&amp;rsquo;t get any clues from that code as to what the &lt;em&gt;purpose&lt;/em&gt; is - you&amp;rsquo;ll see what it does (chop the last
9 characters off the &lt;code&gt;version&lt;/code&gt; string), but not why.  You can &amp;ldquo;fix&amp;rdquo; the problem by adding an arbitrary 9 characters onto your &lt;code&gt;version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re looking at the first example, however, you&amp;rsquo;ll see the intent right there - it&amp;rsquo;s trying to chop the string &lt;code&gt;-SNAPSHOT&lt;/code&gt; (and any
characters that might happen to come after it) off the end of the &lt;code&gt;version&lt;/code&gt; string.  With this line of code,
if you checked the value of &lt;code&gt;version&lt;/code&gt; and saw it didn&amp;rsquo;t have the correct suffix, you&amp;rsquo;d have a good idea of what the problem is and how
to solve it.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a third way, that potentially keeps the descriptiveness (is that a word?) of the first solution and makes it a bit shorter and
Groovier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;releaseVersion = version[0..&amp;lt;version.indexOf(&#39;-SNAPSHOT&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need the less-than sign plonked in there to make it work correctly, which I find a bit jarring,
but it does work.  It&amp;rsquo;s a little more succinct than the original Java syntax and retains the intent.&lt;/p&gt;

&lt;p&gt;So in conclusion: yes, shorter code is generally better (and often more readable).  But I don&amp;rsquo;t believe in sacrificing code that
expresses the intent in order to reduce the number of characters used.  We&amp;rsquo;re not living in a memory-poor world any more,
and code is meant to be read by humans as well as computers.  Let&amp;rsquo;s make our code easy to understand when it goes wrong,
not simply the shortest way to do something when the stars are all perfectly aligned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Converting Blogger to Markdown</title>
      <link>http://trishagee.github.io/project/atom-to-hugo</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/project/atom-to-hugo</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using &lt;a href=&#34;http://www.blogger.com/&#34;&gt;Blogger&lt;/a&gt; happily for three years or so, since I migrated the blog from &lt;a href=&#34;http://www.livejournal.com/&#34;&gt;LiveJournal&lt;/a&gt; and
decided to actually invest some
time writing.  I&amp;rsquo;m happy with it because I just type stuff into Blogger and It Just Works.  I&amp;rsquo;m happy because I can use my Google
credentials to sign in.  I&amp;rsquo;m happy because now I can pretend my two &lt;a href=&#34;https://plus.google.com/+TrishaGee/&#34;&gt;Google+&lt;/a&gt; accounts exist for a purpose,
by getting Blogger to automatically share my content there.&lt;/p&gt;

&lt;p&gt;A couple of things have been problematic for the whole time I&amp;rsquo;ve been using it though:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code looks like crap, no matter what you do.&lt;/li&gt;
&lt;li&gt;Pictures are awkwardly jammed in to the prose like a geek mingling at a Marketing event.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first problem I&amp;rsquo;ve tried to solve a number of ways, with custom CSS at a blog- and a post- level.  I was super happy when I
discovered &lt;a href=&#34;http://gist.github.com&#34;&gt;gist&lt;/a&gt;, it gave me lovely content highlighting without all the nasty CSS.  It&amp;rsquo;s still not ideal in a
blogger world though,
as the gist doesn&amp;rsquo;t appear in your WYSIWYG editor, leading you to all sorts of tricks to try not to accidentally delete it. Also I was
too lazy to migrate old code over, so now my blog is a mish-mash of code styles, particular where I changed global CSS mulitple times,
leaving old code in a big fat mess.  There&amp;rsquo;s a lesson to be learned there somewhere.&lt;/p&gt;

&lt;p&gt;The second problem, photos, I just gave up on. I decided I would end up wasting too much time trying to make the thing look pretty,
and I&amp;rsquo;d never get around to posting anything.  So my photos are always dropped randomly into the blogs - it&amp;rsquo;s better than a whole wall of
prose (probably).&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;ve been happy overall, the main reason being I don&amp;rsquo;t have to maintain anything, I don&amp;rsquo;t have to worry about my web server going
down, I don&amp;rsquo;t have versions of a blog platform to maintain, patch, upgrade; I can Just Write.&lt;/p&gt;

&lt;p&gt;But last week &lt;a href=&#34;http://spf13.com&#34;&gt;my boss&lt;/a&gt; and &lt;a href=&#34;http://christiankvalheim.com/&#34;&gt;my colleague&lt;/a&gt;  were both on at me to try &lt;a href=&#34;http://spf13.com/project/hugo&#34;&gt;Hugo&lt;/a&gt;,
a site generator created by my boss.  I was resistent because I do not want to maintain my own blog platform,
but then Christian explained how I can write my posts in &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;markdown&lt;/a&gt;, use Hugo to generate the content,
and then host it &lt;a href=&#34;http://pages.github.com/&#34;&gt;github pages&lt;/a&gt;. It sounded relatively painless.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been considering a move to something that supports markdown for a while, for the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;These days I write at least half of my posts on the plane, so I use TextEdit to write the content,
and later paste this into blogger and add formatting.  It would be better if I could write markdown to begin with.&lt;/li&gt;
&lt;li&gt;Although I&amp;rsquo;ve always disliked wiki-type syntax for documentation, markdown is actually not despicable,
and lets me add simple formatting easily without getting in my way or breaking my flow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So I spent a few days playing with &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; to see what it was, how it worked, and whether it was going to help me.  I&amp;rsquo;ve come up with a
few observations:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hugo really is lightning fast&lt;/strong&gt;.  If I add a &lt;code&gt;.md&lt;/code&gt; file in the appropriate place, and with the Hugo server running on my local machine
it will turn this into real HTML in (almost) less time than it takes for me to refresh the browser on the second monitor.  Edits to existing
 files appear almost instantly, so I can write a post and preview it really easily.  It beats the hell out of blogger&amp;rsquo;s Preview feature,
 which I always need to use if I&amp;rsquo;m doing anything other than posting simple prose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s awesome to type my blog in IntelliJ&lt;/strong&gt;.  Do you find yourself trying to use IntelliJ shortcuts in other editors?  The two I
miss the most when I&amp;rsquo;m not in IntelliJ are Cmd+Y to delete a line, and Ctrl+Shift+J to bring the next line up.  Writing markdown in
IntelliJ with my usual shortcuts (and the &lt;a href=&#34;http://github.com/nicoulaj/idea-markdown&#34;&gt;markdown plugin&lt;/a&gt;) is really easy and productive.
Plus, of course, you get IntelliJ&amp;rsquo;s ability to paste from any item in the clipboard history. And I don&amp;rsquo;t have to worry about those
random intervals when blogger tells me it hasn&amp;rsquo;t saved my content, and I have no idea if I will just lose hours of work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I now own my own content&lt;/strong&gt;.  It never really occurred to me before that all the effort I&amp;rsquo;ve put into three years of regular blogging is
&lt;em&gt;out there&lt;/em&gt;, on some Google servers somewhere, and I don&amp;rsquo;t have a copy of that material.  That&amp;rsquo;s dumb,
that doesn&amp;rsquo;t reflect how seriously I take my writing.  Now I have that content here, on my laptop, and it&amp;rsquo;s also backed up in Github,
both as raw markdown and as generated HTML, and versioned.  Massive massive win.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have more control over how things are rendered&lt;/strong&gt;, and I can customise the display much more.  This has drawbacks though too,
as it&amp;rsquo;s exactly this freedom-to-play that I worry will distract me from actual writing.&lt;/p&gt;

&lt;p&gt;As with every project that&amp;rsquo;s worth trying, it wasn&amp;rsquo;t completely without pain.  I followed the (surprisingly excellent) &lt;a href=&#34;http://hugo.spf13.com/overview/introduction&#34;&gt;documentation&lt;/a&gt;,
as well as &lt;a href=&#34;http://j3ff.com/blog/building-a-site-with-hugo/&#34;&gt;these guidelines&lt;/a&gt;, but I did run into some fiddly bits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I couldn&amp;rsquo;t quite get my head around the difference between my &lt;a href=&#34;https://github.com/trishagee/trishagee.com&#34;&gt;Hugo project code&lt;/a&gt; and my
&lt;a href=&#34;https://github.com/trishagee/trishagee.github.io&#34;&gt;actual site content&lt;/a&gt; to begin with: how to put them into
source control and how to get my site on github pages.  I&amp;rsquo;ve ended up with two projects on github,
even though the generated code is technically a subtree of the Hugo project.  I think I&amp;rsquo;m happy with that.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m not really sure about the difference between tags, keywords, and topics, if I&amp;rsquo;m honest.  Maybe this is something I&amp;rsquo;ll grow into.&lt;/li&gt;
&lt;li&gt;I really need to spend some time on the layout and design, I don&amp;rsquo;t want to simply rip off Steve&amp;rsquo;s original layout.  Plus there are
things I would like to have on the main page which are missing.&lt;/li&gt;
&lt;li&gt;I needed to convert my old content to the new format&lt;/li&gt;
&lt;li&gt;Final migration from old to new (incomplete)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To address the last point first, I&amp;rsquo;m not sure yet if I will take the plunge and do full redirection from Blogger to the new github pages
site (and redirect my domains too), for a while I&amp;rsquo;m going to run both in parallel and see how I feel.&lt;/p&gt;

&lt;p&gt;As for the fourth point, I didn&amp;rsquo;t find a tool for migrating Blogger blogs into markdown that didn&amp;rsquo;t require me to install some other tool
 or language, and there was nothing that was specifically Hugo-shaped, so I surprised myself and did what every programmer would - I
 wrote my own. Surprising because I&amp;rsquo;m not normally that sort of person - I like to use tools that other people have written,
 I like things that Just Work, I spend all my time coding for my job so I can&amp;rsquo;t be bothered to devote extra time to it.  But my recent
 experiences with &lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt; had convinced me that I could write a simple Groovy parser that would take my exported blog (in Atom XML
 format)
  and turn it into a series of markdown files.  And I was right, I could.  So I&amp;rsquo;ve created a new github project,
  &lt;a href=&#34;https://github.com/trishagee/atom-to-hugo&#34;&gt;atom-to-hugo&lt;/a&gt;.  It&amp;rsquo;s very rough, but a) it works and b) it even has tests.  And documentation.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know what&amp;rsquo;s come over me lately, I&amp;rsquo;ve been a creative, coding machine.&lt;/p&gt;

&lt;p&gt;In summary, I&amp;rsquo;m pretty happy with the new way of working, but it&amp;rsquo;s going to take me a while to get used to it and decide if it&amp;rsquo;s the way
I want to go.  At the very least, I now have my Blogger content as something markdown-ish.&lt;/p&gt;

&lt;p&gt;But there are a couple of things I miss about Blogger:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I actually like the way it shows the blog archive on the right hand side, split into months and years.  I use that to motivate me to
blog more if a month looks kinda empty&lt;/li&gt;
&lt;li&gt;While Google Analytics is definitely more powerful than the simple blogger analytics, I find them an easier way to get a quick insight
into whether people are reading the blog, and which paths they take to find it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don&amp;rsquo;t think either of these are showstoppers, I should be able to work around both of them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interview and Hacking session with Stephen Chin</title>
      <link>http://trishagee.github.io/post/interview_and_hacking_session_with_stephen_chin</link>
      <pubDate>Wed, 31 Oct 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/interview_and_hacking_session_with_stephen_chin</guid>
      <description>&lt;p&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;270&#34; src=&#34;http://www.youtube.com/embed/c5-jyvVnqT0?fs=1&#34; width=&#34;480&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;
On Monday, &lt;a href=&#34;http://steveonjava.com/&#34;&gt;Stephen Chin&lt;/a&gt; from Oracle visited me at the &lt;a href=&#34;http://www.10gen.com/&#34;&gt;10gen&lt;/a&gt; offices as part of his &lt;a href=&#34;http://steveonjava.com/nighthacking/&#34;&gt;NightHacking tour&lt;/a&gt;. &amp;nbsp;In the video we talk about my sessions at JavaOne and the &lt;a href=&#34;http://www.devoxx.com/pages/viewpage.action?pageId=6391499&#34;&gt;Agile presentation&lt;/a&gt; I&amp;rsquo;m giving at Devoxx, and I do some very basic hacking using the &lt;a href=&#34;http://www.mongodb.org/display/DOCS/Java+Tutorial&#34;&gt;MongoDB Java driver&lt;/a&gt;, attempting to showcase &lt;a href=&#34;http://www.gradle.org/&#34;&gt;gradle&lt;/a&gt; at the same time. It was a fun experience, even if it&amp;rsquo;s scary being live-streamed and recorded!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A chance to see some of my actual code (even if it is C#)</title>
      <link>http://trishagee.github.io/post/a_chance_to_see_some_of_my_actual_code_even_if_it_is_c</link>
      <pubDate>Mon, 20 Jun 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/a_chance_to_see_some_of_my_actual_code_even_if_it_is_c</guid>
      <description>&lt;p&gt;Remember I posted about &lt;a href=&#34;http://mechanitis.blogspot.com/2011/05/why-java-developers-hate-net.html&#34;&gt;having to write .NET&lt;/a&gt;?&lt;br /&gt;&lt;br /&gt;Well, the &lt;a href=&#34;http://www.lmaxtrader.co.uk/api-trading/resources-releases&#34;&gt;code and the tutorial&lt;/a&gt; are available for you, my lucky readers, to &lt;strike&gt;rip to pieces&lt;/strike&gt; view.&lt;br /&gt;&lt;br /&gt;I am not the only person responsible for this code though, so be kind.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Java developers hate .NET</title>
      <link>http://trishagee.github.io/post/why_java_developers_hate_net</link>
      <pubDate>Fri, 20 May 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/why_java_developers_hate_net</guid>
      <description>&lt;p&gt;I have been struggling with .NET.&amp;nbsp; Actually, I have been fighting pitched battles with it.&lt;br /&gt;&lt;br /&gt;All I want to do is take our existing Java client example code and write an equivalent in C#.&amp;nbsp; Easy, right?&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Trisha&amp;rsquo;s Guide to Converting Java to C#&lt;/h3&gt;Turns out writing the actual C# is relatively straightforward.&amp;nbsp; Putting to one side the question of writing optimal code (these are very basic samples after all), to get the examples to compile and run was a simple process:&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;1. Find-and-replace the following (only you can&amp;rsquo;t use Ctrl+R like I expect.&amp;nbsp; Sigh.)&lt;/h4&gt;&lt;blockquote style=&#34;line-height: 16px; size: 10px;&#34;&gt;&lt;code&gt;final&lt;/code&gt; = &lt;code&gt;readonly&lt;/code&gt; (but remove from method params)&lt;br /&gt;&lt;code&gt;System.out.printf&lt;/code&gt; = &lt;code&gt;Console.WriteLine&lt;/code&gt;&lt;br /&gt;&lt;code&gt;Map&lt;/code&gt; = &lt;code&gt;Dictionary&lt;/code&gt;&lt;br /&gt;&lt;code&gt;BigDecimal&lt;/code&gt; = &lt;code&gt;decimal&lt;/code&gt;&lt;br /&gt;&lt;code&gt;Set&lt;/code&gt;&amp;hellip; oh.&amp;nbsp; I have no idea. &lt;/blockquote&gt;&lt;br /&gt;&lt;h4&gt;2. When using callbacks, replace anonymous inner classes with delegates&lt;/h4&gt;&lt;br /&gt;&lt;b&gt;Java&lt;/b&gt;&lt;br /&gt;&lt;blockquote style=&#34;clear: both;&#34;&gt;&lt;pre&gt;&lt;code&gt;something.doSomething(new SomethingRequest(),&lt;br /&gt;  new SomethingCallBack()&lt;br /&gt;  {&lt;br /&gt;    public void onSuccess()&lt;br /&gt;    {&lt;br /&gt;      System.out.println(&amp;ldquo;Action successful&amp;rdquo;);&lt;br /&gt;    }&lt;br /&gt;  &lt;br /&gt;    public void onFailure()&lt;br /&gt;    {&lt;br /&gt;      System.err.println(&amp;ldquo;Action failed&amp;rdquo;);&lt;br /&gt;    }&lt;br /&gt;  });&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;b&gt;C#&lt;/b&gt;&lt;br /&gt;&lt;blockquote style=&#34;clear: both;&#34;&gt;&lt;pre&gt;&lt;code&gt;private void foo ()&lt;br /&gt;{&lt;br /&gt;  _something.DoSomething(new SomethingRequest(), &lt;br /&gt;                         SomethingSuccess, &lt;br /&gt;                         SomethingFailure);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private void SomethingSuccess()&lt;br /&gt;{&lt;br /&gt;  Console.WriteLine(&amp;ldquo;Action successful&amp;rdquo;);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private void SomethingFailure()&lt;br /&gt;{&lt;br /&gt;  Console.Error.WriteLine(&amp;ldquo;Action failed&amp;rdquo;);&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;br /&gt;I rather like this pattern actually.  You can&amp;rsquo;t really tell in the noddy example above, but the C# code is generally shorter and more reusable.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;3. Replace getters and setters with properties&lt;/h4&gt;&lt;br /&gt;&lt;b&gt;Java&lt;/b&gt;&lt;br /&gt;&lt;blockquote style=&#34;clear: both;&#34;&gt;&lt;pre&gt;&lt;code&gt;private class MyClass&lt;br /&gt;{&lt;br /&gt;  private BigDecimal myField = new BigDecimal(&amp;ldquo;-1.0&amp;rdquo;);&lt;br /&gt;&lt;br /&gt;  public BigDecimal getMyField()&lt;br /&gt;  {&lt;br /&gt;    return myField;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public void setMyField(BigDecimal instructionId)&lt;br /&gt;  {&lt;br /&gt;    this.myField = myField&lt;br /&gt;  }&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;b&gt;C#&lt;/b&gt;&lt;br /&gt;&lt;blockquote style=&#34;clear: both;&#34;&gt;&lt;pre&gt;&lt;code&gt;internal class MyClass&lt;br /&gt;{&lt;br /&gt;  public decimal MyField{ get; set; }&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;br /&gt;What the&amp;hellip; where did all my code go??&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;My Thoughts&lt;/h4&gt;I was pleasantly surprised with the language.  In general, for what I was doing, the equivalent C# was a lot less code.  The fact that the syntax is not wildly different from Java made the transition relatively easy, even if I don&amp;rsquo;t get all the nuances.&lt;br /&gt;&lt;br /&gt;I didn&amp;rsquo;t really like the enums - I can see what purpose they serve, but I quite like the way the Java ones are pretty much classes in their own right with properties of their own - it allows you to encapsulate some of your simplest domain objects.  But it&amp;rsquo;s a minor point, not a deal-breaker.&lt;br /&gt;&lt;br /&gt;The C# capitalisation makes me queasy though.  I just can&amp;rsquo;t get my head around it.  In Java, if I say:&lt;br /&gt;&lt;pre&gt;com.mechanitis.foo.Bar&lt;/pre&gt;I know the class is Bar and the rest is the package (or namespace, or whatever).  This is more useful when you&amp;rsquo;re using static methods and so forth:&lt;br /&gt;&lt;pre&gt;com.mechanitis.foo.Bar.thatThingIWantToDo()&lt;/pre&gt;&lt;br /&gt;In C#, I know the thing at the end is a method and the thing before that is a class, but it doesn&amp;rsquo;t jump out at me:&lt;br /&gt;&lt;pre&gt;Com.Mechanitis.Foo.Bar.ThatThingIWantToDo();&lt;/pre&gt;&lt;br /&gt;And if you&amp;rsquo;re using a property:&lt;br /&gt;&lt;pre&gt;Com.Mechanitis.Foo.Bar.MyProperty;&lt;/pre&gt;&lt;br /&gt;The whole thing makes me dizzy.&lt;br /&gt;&lt;br /&gt;You could argue that all this is redundant with modern tools and IDEs doing all the heavy lifting for you - nice colourisation etc.&lt;br /&gt;&lt;br /&gt;Which brings me to The Rant.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Oh My Dear God What Is Wrong With Visual Studio?&lt;/h3&gt;C# needs to be a shorter, more succinct language because it takes &lt;i&gt;three billion times longer&lt;/i&gt; to do anything in Visual bloody Studio.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m coming at this from a Java, &lt;a href=&#34;http://www.jetbrains.com/idea/&#34;&gt;IntelliJ &lt;/a&gt;point of view, so there&amp;rsquo;s always the possibility it might be lack of familiarity with the tool, rather than the tool itself, which is the problem.&amp;nbsp; It&amp;rsquo;s a long time since I used VS, and that was back in the 90s when I was doing ASP and COM (shhh, don&amp;rsquo;t tell anyone).&lt;br /&gt;&lt;br /&gt;But things shouldn&amp;rsquo;t be this hard.&amp;nbsp; I was ready to accept, due to my newbie status, the IDE not helping me. I didn&amp;rsquo;t expect it to actively hinder me.&lt;br /&gt;&lt;br /&gt;For example: it took hours of my life that I will never get back to discover that you can&amp;rsquo;t simply run a class that has a main method by right-clicking and selecting &amp;ldquo;run&amp;rdquo; (note: I&amp;rsquo;m not even trying Ctrl+F10).&amp;nbsp; No.&amp;nbsp; I have to select, at a Solution level, which Projects are runnable.&amp;nbsp; Then I have to select at the Project level the class with the main method I actually want to run.&amp;nbsp; Then, it opens up a terminal window and runs it in there, which promptly disappears when the program errors or finishes.&amp;nbsp; What&amp;rsquo;s wrong with outputting in the output window of the IDE? Is that not what it&amp;rsquo;s for?&lt;br /&gt;&lt;br /&gt;Finally I worked out how to run the cursed program (seriously, like that&amp;rsquo;s not the first thing everyone wants to do?&amp;nbsp; How do people write &amp;ldquo;Hello World&amp;rdquo;?).&amp;nbsp; Now, where are the command line arguments?&amp;nbsp; Of course, they&amp;rsquo;re at the project properties level too, because each project only has one entry point. &amp;nbsp;I seriously had to Google that too because I couldn&amp;rsquo;t work it out from the IDE alone.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The next day, my &lt;a href=&#34;http://www.jetbrains.com/resharper/&#34;&gt;ReSharper &lt;/a&gt;licence had expired. &amp;nbsp;I decided I should attempt to limp on without it, after all hundreds of developers must be surviving with just Visual Studio. &amp;nbsp;How bad could it be?&lt;br /&gt;&lt;br /&gt;Very bad, it turns out.&lt;br /&gt;&lt;br /&gt;All those helpful little squiggles I was leaning heavily on to convert my Java to C#?&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The red to tell you you&amp;rsquo;re utterly wrong.&lt;/li&gt;&lt;li&gt;The orange to tell you could be using less code.&lt;/li&gt;&lt;li&gt;The blue to remind you to stop thinking in Java and helpfully offer corrected naming.&lt;/li&gt;&lt;li&gt;The green to suggest stuff that C# could do differently.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Yeah, all gone.&lt;br /&gt;&lt;br /&gt;How do people code like this?&amp;nbsp; Do they really just do a build to check if it&amp;rsquo;s all wrong or not?&lt;br /&gt;&lt;br /&gt;Next, I try to find a class. &amp;nbsp;I actually&amp;nbsp;have no idea how to do this, because I can&amp;rsquo;t use Ctrl+N.&amp;nbsp; So I Ctrl&lt;br /&gt;&lt;br /&gt;I realise this is a waste of time anyway, because one thing that &lt;i&gt;really&lt;/i&gt; annoys me about Visual Studio is that I can&amp;rsquo;t find a way to sync the project tree to the class file I&amp;rsquo;m looking at. &amp;nbsp;I can&amp;rsquo;t get it to jump to highlight where I am. &amp;nbsp;When I&amp;rsquo;m using IntelliJ, I find this dead useful when I want to see other stuff in the same package.&lt;br /&gt;&lt;br /&gt;Less than ten minutes after attempting to use Visual Studio without ReSharper, I&amp;rsquo;ve abandoned the fight and tracked down a licence and installed it.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Documentation isn&amp;rsquo;t a standard function of .NET?&lt;/h3&gt;What sort of message does this give developers? &amp;nbsp;Documentation isn&amp;rsquo;t important?&lt;br /&gt;&lt;br /&gt;I always thought&amp;nbsp;Javadoc was pretty ugly and clunky. In addition, now our IDEs generate so much, it&amp;rsquo;s frequently meaningless.&amp;nbsp; But it is generated by standard Java tools, and HTML is a standard format that can be read on pretty much any computer with any operating system.&lt;br /&gt;&lt;br /&gt;I could not believe how hard it was to get the XML comments out of&amp;nbsp;the&amp;nbsp;C# into something the user can actually read.&amp;nbsp; Thank goodness, &lt;a href=&#34;http://www.symphonious.net/&#34;&gt;some enterprising member of the team&lt;/a&gt; had already done that for us. &amp;nbsp;All I needed to do was hack/crowbar the tutorial I&amp;rsquo;d been working on into the generated documentation, so it ended up in the Windows help files in some fashion.&lt;br /&gt;&lt;br /&gt;I know there&amp;rsquo;s a way to get HTML/XML files into the end result using &lt;a href=&#34;http://sandcastle.codeplex.com/&#34;&gt;Sandcastle&lt;/a&gt;, but hours of Googling only told me it &lt;i&gt;was&lt;/i&gt; possible, not how to do it. &amp;nbsp;I still have no idea what the correct question is to ask to find the solution.&lt;br /&gt;&lt;br /&gt;Right now, this is an unsolved mystery. &amp;nbsp;Our .NET client users will have to read the plain HTML I&amp;rsquo;m afraid.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;In Conclusion&lt;/h3&gt;Are we lowly Java developers spoilt with our shiny IDEs?&lt;br /&gt;&lt;br /&gt;Or is there such a fundamentally different approach to development for .NET people that all the functionality is there, I just can&amp;rsquo;t find it?&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m disappointed if I&amp;rsquo;m honest.&amp;nbsp; I&amp;rsquo;m sure the .NET camp used to tout their tools as their superiority.&amp;nbsp; I ended up feeling sorry for the poor NET people.&amp;nbsp; Is there anything they can use that isn&amp;rsquo;t Visual Studio?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;In Conclusion: Despite the nasty capitalisation I found myself surprisingly taken with C#. &amp;nbsp;But until they can give me a proper development environment, I won&amp;rsquo;t be tempted by the dark side any time soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validation with Spring Modules Validation</title>
      <link>http://trishagee.github.io/post/validation_with_spring_modules_validation</link>
      <pubDate>Mon, 16 Jul 2007 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/validation_with_spring_modules_validation</guid>
      <description>&lt;p&gt;So if java generics slightly &lt;a href=&#34;http://mechanitis.livejournal.com/6783.html&#34;&gt;disappointed me lately&lt;/a&gt;, what have I found cool?&lt;br/&gt;&lt;br/&gt;I&amp;rsquo;m currently working on a web application using &lt;a href=&#34;http://www.springframework.org/docs/reference/mvc.html&#34;&gt;Spring MVC&lt;/a&gt;, which probably doesn&amp;rsquo;t come as a big surprise, it seems to be all the rage these days.  Since this is my baby, I got to call the shots as to a lot of the framework choices.  When it came to looking at implementing validation, I refused to believe I&amp;rsquo;d have to go through the primitive process of looking at all the values on the request and deciding if they pass muster, with some huge &lt;code&gt;if&lt;/code&gt; statement.  Even with Spring&amp;rsquo;s rather marvelous &lt;a href=&#34;http://static.springframework.org/spring/docs/2.0.x/reference/validation.html&#34;&gt;binding and validation mechanisms&lt;/a&gt; to take the worst of the tasks off you, it still looked like it would be a bit of a chore.  Given all the cool things you can do with AOP etc I figured someone somewhere must&amp;rsquo;ve implemented an annotations-based validation plugin for Spring.&lt;br/&gt;&lt;br/&gt;&lt;a href=&#34;https://springmodules.dev.java.net/docs/reference/0.8/html_single/#validation&#34;&gt;And they have&lt;/a&gt;.  And there&amp;rsquo;s actually a reasonable amount of information about how to set it up and get it working.  The problem is that it&amp;rsquo;s pretty flexible and has a lot of different options, so when you are running Java 1.5 and Spring 2.0, and actually want to use the validation in a simple, straightfoward fashion, the setup instructions get lost.&lt;br/&gt;&lt;br/&gt;So here&amp;rsquo;s my record so I don&amp;rsquo;t forget in future how I did it.&lt;br/&gt;&lt;br/&gt;As a brief summary for those who may not be familiar with Spring, or for those who need reminding (no doubt me in a few months when I&amp;rsquo;ve completely forgetten what I was working on), Spring provides a &lt;code&gt;Validator&lt;/code&gt; interface that you can use to easily plug validation into your application.  In the context of web applications, you create your various &lt;code&gt;Validators&lt;/code&gt; and in your application context XML file you tell your Controllers to use those validators on form submission (for example).&lt;br/&gt;&lt;br/&gt;Spring Modules validation provides a bunch of generic validation out of the box for all the tedious, standard stuff - length validation, mandatory fields, valid e-mail addresses etc (&lt;a href=&#34;https://springmodules.dev.java.net/docs/reference/0.8/html_single/#d0e8935&#34;&gt;details here&lt;/a&gt;).  And you can plug this straight into your application by using annotations.  How?  Easy.&lt;br/&gt;&lt;br/&gt;This is my outline application context file:&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;br/&gt;&amp;lt;beans xmlns=&amp;quot; &lt;a href=&#34;http://www.springframework.org/schema/beans&amp;amp;quot;&amp;lt;br/&amp;gt;&#34;&gt;http://www.springframework.org/schema/beans&amp;amp;quot;&amp;lt;br/&amp;gt;&lt;/a&gt; xmlns:xsi=&amp;quot;&lt;a href=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/a&gt; &amp;quot;&lt;br/&gt;   xmlns:vld=&amp;quot;&lt;a href=&#34;http://www.springmodules.org/validation/bean/validator&#34;&gt;http://www.springmodules.org/validation/bean/validator&lt;/a&gt; &amp;quot;&lt;br/&gt;  xsi:schemaLocation=&amp;quot;&lt;a href=&#34;http://www.springframework.org/schema/beans&#34;&gt;http://www.springframework.org/schema/beans&lt;/a&gt; &lt;a href=&#34;http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&amp;lt;br/&amp;gt;&#34;&gt;http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&amp;lt;br/&amp;gt;&lt;/a&gt;                      &lt;a href=&#34;http://www.springmodules.org/validation/bean/validator&#34;&gt;http://www.springmodules.org/validation/bean/validator&lt;/a&gt; &lt;a href=&#34;http://www.springmodules.org/validation/bean/validator.xsd&amp;amp;quot;&amp;amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&#34;&gt;http://www.springmodules.org/validation/bean/validator.xsd&amp;amp;quot;&amp;amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&lt;/a&gt;   &amp;lt;vld:annotation-based-validator id=&amp;quot;validator&amp;quot; /&amp;gt;&lt;br/&gt;&lt;br/&gt; &amp;lt;!&amp;ndash; Load messages &amp;ndash;&amp;gt;&lt;br/&gt;   &amp;lt;bean id=&amp;quot;messageSource&amp;quot;&lt;br/&gt;      class=&amp;quot;org.springframework.context.support.ResourceBundleMessageSource&amp;quot;&amp;gt;&lt;br/&gt;      &amp;lt;property name=&amp;quot;basenames&amp;quot; value=&amp;quot;messages,errors&amp;quot; /&amp;gt;&lt;br/&gt;    &amp;lt;/bean&amp;gt;&lt;br/&gt;&lt;br/&gt; &amp;lt;!&amp;ndash; Bean initialisation for validation. You can put these explicitly into your controllers or set to autowire by name or type &amp;ndash;&amp;gt;&lt;br/&gt;   &amp;lt;bean id=&amp;quot;messageCodesResolver&amp;quot;&lt;br/&gt;       class=&amp;quot;org.springmodules.validation.bean.converter.ModelAwareMessageCodesResolver&amp;quot; /&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;/beans&amp;gt;&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Really all you&amp;rsquo;re interested in is the addition of the validation namespace and schema at the top of the file, and the &lt;code&gt;&amp;lt;vld:annotation-based-validator id=&amp;quot;validator&amp;quot; /&amp;gt;&lt;/code&gt; line which is your actual validator.  The other sections are a message source so your error codes can have meaningful messages and a MessageCodeResolver to make use of these.&lt;br/&gt;&lt;br/&gt;Eclipse does seem to moan about the way the springmodules schema is referenced, but when you actually start Tomcat up it seems happy enough.&lt;br/&gt;&lt;br/&gt;I&amp;rsquo;ve chosen to give the validator the ID &lt;code&gt;validator&lt;/code&gt; because I turned autowire by name on so that all my controllers picked up this validation by default.  Note: autowire can be a little bit dangerous and I&amp;rsquo;ve actually turned it off now because I had a &lt;code&gt;validator&lt;/code&gt; bean and a &lt;code&gt;validators&lt;/code&gt; list in the context file and my poor SimpleFormController controllers were getting a bit confused over which one to use (in truth, the single validator was overwriting the list, which was not what I was after at all).&lt;br/&gt;&lt;br/&gt;Anyway.  Now what?  We have a validator and we&amp;rsquo;ve probably wired it into the relevant controllers, either by autowiring them or poking it specifically into our controllers like this:&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;    &amp;lt;bean id=&amp;quot;somePersonController&amp;quot;&lt;br/&gt;       class=&amp;quot;com.mechanitis.examples.validation.controller.MyPersonController&amp;quot;&amp;gt;&lt;br/&gt;     &amp;lt;property name=&amp;quot;commandClass&amp;quot;&lt;br/&gt;         value=&amp;quot;com.mechanitis.examples.validation.command.PersonCommand&amp;quot; /&amp;gt;&lt;br/&gt;       &amp;lt;property name=&amp;quot;formView&amp;quot; value=&amp;quot;person&amp;quot; /&amp;gt;&lt;br/&gt;      &amp;lt;property name=&amp;quot;successView&amp;quot; value=&amp;quot;success&amp;quot; /&amp;gt;&lt;br/&gt;      &amp;lt;property name=&amp;quot;validator&amp;quot; ref=&amp;quot;validator&amp;quot;/&amp;gt;&lt;br/&gt; &amp;lt;/bean&amp;gt;&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Next step is to add some validation rules.  &lt;a href=&#34;https://springmodules.dev.java.net/docs/reference/0.8/html_single/#d0e8930&#34;&gt;The documentation&lt;/a&gt; will show you how to do this using an XML file, which you&amp;rsquo;re perfectly welcome to do.  However what I wanted to show is how to use annotations on your command object to declare your validation.  So here you are:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;import org.springmodules.validation.bean.conf.loader.annotation.handler.CascadeValidation;&lt;br/&gt;import org.springmodules.validation.bean.conf.loader.annotation.handler.Email;&lt;br/&gt;import org.springmodules.validation.bean.conf.loader.annotation.handler.Length;&lt;br/&gt;import org.springmodules.validation.bean.conf.loader.annotation.handler.Min;&lt;br/&gt;import org.springmodules.validation.bean.conf.loader.annotation.handler.NotNull;&lt;br/&gt;&lt;br/&gt;public class PersonCommand {&lt;br/&gt;    private static final int NAME_MAX_LENGTH = 50;&lt;br/&gt;&lt;br/&gt;    @NotNull&lt;br/&gt;    @Length(min = 1, max = NAME_MAX_LENGTH)&lt;br/&gt;    private String name;&lt;br/&gt;&lt;br/&gt;    @Min(value=1)&lt;br/&gt;    private Long age;&lt;br/&gt;    &lt;br/&gt;    @Email&lt;br/&gt;    private String eMail;&lt;br/&gt;&lt;br/&gt;    @CascadeValidation&lt;br/&gt;    private RelationshipCommand relationship = new RelationshipCommand();&lt;br/&gt;&lt;br/&gt;    private String action;&lt;br/&gt;&lt;br/&gt;    //insert getters and setters etc&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Note that &lt;code&gt;@CascadeValidation&lt;/code&gt; tells the validator to run validation on the enclosed secondary Command.&lt;br/&gt;&lt;br/&gt;This is just a simple example obviously.  But hopefully you can see that now you&amp;rsquo;ve got the validator set up correctly in your application context file, all you need to cover 90% of your validation needs is to tag the relevant fields with the type of validation you want.  If you want to get really clever, the validator supports &lt;a href=&#34;https://springmodules.dev.java.net/docs/reference/0.8/html_single/#valang&#34;&gt;Valang&lt;/a&gt; which allows you to write simple rules.  For example, if I only want to validate the name when I&amp;rsquo;m saving the person rather than passing the command around for some other purpose, I might change the annotations on the name field:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;    @NotNull(applyIf=&amp;ldquo;action EQUALS &amp;lsquo;savePerson&amp;rsquo;&amp;rdquo;)&lt;br/&gt;    @Length(min = 1, max = NAME_MAX_LENGTH, applyIf=&amp;ldquo;action EQUALS &amp;lsquo;savePerson&amp;rsquo;&amp;rdquo;)&lt;br/&gt;    private String name;&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;That&amp;rsquo;s the basics.  Before I let you go off and play though, a word about error messages.  As usual with Spring validators, you can specify pretty messages to be displayed to the user when things go wrong.  In my application context file above you should see that I&amp;rsquo;ve specified a properties file called errors.  In this file you can map your error codes to the message to display.  When using the spring modules validation I found the error codes generated were like the ones below so you might have an errors.properties file that looks like this:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;# *** Errors for the Person screens&lt;br/&gt;PersonCommand.age[min]=An age should be entered&lt;br/&gt;PersonCommand.name[length]=Person name should be between 1 and 50 characters&lt;br/&gt;# etc etc&lt;br/&gt;&lt;br/&gt;# *** General errors&lt;br/&gt;not.null=This field cannot be empty&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;Go play.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Specifics</title>
      <link>http://trishagee.github.io/post/java_specifics</link>
      <pubDate>Sat, 07 Jul 2007 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/java_specifics</guid>
      <description>&lt;p&gt;When I first started playing with Java 1.5, I thought &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/guide/language/generics.html&#34;&gt;generics&lt;/a&gt; were the best thing since sliced bread.  No more untidy casting, lovely type-safe Collections, and when combined with the &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/guide/language/foreach.html&#34;&gt;new for loop&lt;/a&gt;, a lot of the tedious tasks associated with Collections became easier and, most importantly, aesthetically pleasing.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Consider the old code:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;       List list = new ArrayList();&lt;br/&gt;       list.add(new Integer(1));&lt;br/&gt;      Integer integer = (Integer)list.get(0);&lt;br/&gt;&lt;br/&gt;       for (Iterator i = list.iterator(); i.hasNext(); ) {&lt;br/&gt;            Integer number = (Integer)i.next();&lt;br/&gt;            number.intValue();&lt;br/&gt;     }&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;And the new:&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;       List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;();&lt;br/&gt;     list.add(new Integer(2));&lt;br/&gt;      Integer integer = list.get(0);&lt;br/&gt;&lt;br/&gt;        for (Integer number : list) {&lt;br/&gt;          number.intValue();&lt;br/&gt;     }&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;See?  Much prettier.  OK so it&amp;rsquo;s a silly little example but when you apply it to all the places you use things like Collections it does make life a lot easier, especially when you consider that now you &lt;em&gt;know&lt;/em&gt; what&amp;rsquo;s in that List that comes back from some method that you&amp;rsquo;re not familiar with.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Nearly two years on from the first time I started using them, I run into an issue - they&amp;rsquo;re not generic at all.  They&amp;rsquo;re specific.  The point about generics as far as I can figure out is type-safety - they remove the need to cast everything everywhere.  Which is great, until you actually want a little flexibility in your types.  So, you can have the code above which adds and retrieves Integers from a list, knowing that it&amp;rsquo;s perfectly fine to get objects from that list and treat them as Integers because that&amp;rsquo;s exactly what they are.  But what you can&amp;rsquo;t do is assign a List of some subtype to a List of one if its supertypes:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;br/&gt; public List&amp;lt;Integer&amp;gt; getIntegers() {&lt;br/&gt;     List&amp;lt;Integer&amp;gt; integers = new ArrayList&amp;lt;Integer&amp;gt;();&lt;br/&gt;     integers.add(new Integer(1));&lt;br/&gt;      return integers;&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt; &amp;hellip;&lt;br/&gt;&lt;br/&gt;   public void assignList() {&lt;br/&gt;     List&amp;lt;Number&amp;gt; numbers = getIntegers(); //compiler error - Type mismatch&lt;br/&gt;       //or&lt;br/&gt;       numbers = new ArrayList&amp;lt;Integer&amp;gt;(); //compiler error - Type mismatch&lt;br/&gt; }&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;OK fine, it&amp;rsquo;s a bit confusing but it makes sense if you think about it.  A good example is provided in &lt;a href=&#34;http://www.ibm.com/developerworks/java/library/j-jtp01255.html&#34;&gt;this article&lt;/a&gt;, which explains that if you&amp;rsquo;re expecting a Collection of Numbers, you might expect to be able to add a Float to it, but if lurking under the covers you&amp;rsquo;ve assigned a List of Integers to it, it is incorrect to add a Float to it.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;So what about wildcards?  Aren&amp;rsquo;t they supposed to overcome this issue?  Well, &lt;a href=&#34;http://www.netalive.org/swsu/archives/2005/07/generics_wildca.html&#34;&gt;sort of&lt;/a&gt;.  Wildcards in generics means you can do the following:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;        List&amp;lt;? extends Number&amp;gt; numbers = getIntegers();&lt;br/&gt;      //or&lt;br/&gt;       numbers = new ArrayList&amp;lt;Integer&amp;gt;();&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;and this will not give a compiler error.  But then you can&amp;rsquo;t do:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;      List&amp;lt;? extends Number&amp;gt; numbers = new ArrayList&amp;lt;Integer&amp;gt;();&lt;br/&gt;     numbers.addAll(new ArrayList&amp;lt;Integer&amp;gt;()); //compiler error&lt;br/&gt;       numbers.add(new Integer(1)); //compiler error&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;So you can use a wildcarded Collection to represent that you know that Collection is going to be some Collection that contains something that is a subclass of Number (for example), but not to say that the Collection can contain any mix of items that are a sublasses of number.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;OK&amp;hellip; what do I need to remember to prevent confusion in future?&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Well, looks like we use:&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;       List&amp;lt;Number&amp;gt; numbers = new ArrayList&amp;lt;Number&amp;gt;();&lt;br/&gt;        numbers.add(new Integer(1));&lt;br/&gt;       numbers.add(new Double(1));&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;if you want your collection to contain a mix of items that are subclasses of your specified generic type.  But you might have to use something like &lt;code&gt;addAll&lt;/code&gt; to insert the contents of some other List into it, as you can&amp;rsquo;t assign Lists of subclasses to it.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;If you want to assign Lists that have a generic type that&amp;rsquo;s a subclass, then you want to use wildcards:&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;      List&amp;lt;? extends Number&amp;gt; numbers = getIntegers();&lt;br/&gt;      //or&lt;br/&gt;       numbers = new ArrayList&amp;lt;Integer&amp;gt;();&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;So, easy then.  No idea what I got so confused about.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
