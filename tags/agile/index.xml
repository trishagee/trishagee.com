<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Agile on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/agile/index.xml</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Wed, 12 Dec 2012 00:00:00 UTC</updated>
    
    <item>
      <title>Agile&#43;&#43;: When Agile Goes Well</title>
      <link>http://trishagee.github.io/post/agile_when_agile_goes_well</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/agile_when_agile_goes_well</guid>
      <description>&lt;p&gt;If you see anything about &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX&lt;/a&gt; - the Disruptor, Continuous Delivery, or even the selection criteria for hiring developers, you&amp;rsquo;ll see that LMAX is pretty keen on &lt;a href=&#34;http://agilemanifesto.org/&#34;&gt;Agile&lt;/a&gt;. &amp;nbsp;However, no-one&amp;rsquo;s documented the Agile process there, as far as I know. &amp;nbsp;Although I personally had it on my todo list, I never had the motivation, the hook to do it. &amp;nbsp;And I realised eventually that&amp;rsquo;s because I&amp;rsquo;m not sure it&amp;rsquo;s a process that would work very well for another team, in another company, working in another business.&lt;br /&gt;&lt;br /&gt;The agile process followed at LMAX is one that works for the individuals and the organisation there. &amp;nbsp;And that&amp;rsquo;s because they do one thing very well - they regularly examine the issues faced and adapt the process to try and combat them. &amp;nbsp;It&amp;rsquo;s an agile process that&amp;rsquo;s, well, very agile - it&amp;rsquo;s constantly changing. &amp;nbsp;Documenting it would only represent a single snapshot in time that would be out of date almost as soon as the next retrospective comes along.&lt;br /&gt;&lt;br /&gt;Any process can inspire &lt;a href=&#34;http://en.wikipedia.org/wiki/Cargo_cult#Pacific_cults_of_World_War_II&#34;&gt;Cargo Cultism&lt;/a&gt;, and the last thing I want to do is give people a process to without the tools to know whether it&amp;rsquo;s the right thing for them or not. &amp;nbsp;It&amp;rsquo;s more important to &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2011/09/what-my-hangovers-can-teach-you-about.html&#34;&gt;understand your goals, check progress and improve&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I was talking this through with a colleague, Israel, and he rightly pointed out the tool that LMAX can share with everyone else - thinking. &amp;nbsp;Examining the problems, visualising them, and trying out different ways to fix them.&lt;br /&gt;&lt;br /&gt;So at Devoxx &lt;a href=&#34;https://twitter.com/IsraKaos&#34;&gt;Israel&lt;/a&gt; and I presented a session on &amp;ldquo;Agile++&amp;rdquo;, using LMAX as a use case of when agile methods work. &amp;nbsp;The session examines four specific issues encountered at LMAX and the steps taken to solve them, and it&amp;rsquo;s available on Parleys. &amp;nbsp;Enjoy.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;object height=&#34;395&#34; width=&#34;395&#34;&gt;  &lt;param name=&#34;movie&#34; value=&#34;http://www.parleys.com/dist/share/parleysshare.swf&#34;/&gt;  &lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;/&gt;  &lt;param name=&#34;wmode&#34; value=&#34;direct&#34;/&gt;  &lt;param name=&#34;bgcolor&#34; value=&#34;#222222&#34;/&gt;  &lt;param name=&#34;flashVars&#34; value=&#34;sv=true&amp;amp;pageId=3486&#34;/&gt;  &lt;embed src=&#34;http://www.parleys.com/dist/share/parleysshare.swf&#34; type=&#34;application/x-shockwave-flash&#34; flashVars=&#34;sv=true&amp;amp;pageId=3486&#34; allowfullscreen=&#34;true&#34; bgcolor=&#34;#222222&#34; width=&#34;395&#34; height=&#34;395&#34;/&gt;&lt;/object&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interview and Hacking session with Stephen Chin</title>
      <link>http://trishagee.github.io/post/interview_and_hacking_session_with_stephen_chin</link>
      <pubDate>Wed, 31 Oct 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/interview_and_hacking_session_with_stephen_chin</guid>
      <description>&lt;p&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;270&#34; src=&#34;http://www.youtube.com/embed/c5-jyvVnqT0?fs=1&#34; width=&#34;480&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;
On Monday, &lt;a href=&#34;http://steveonjava.com/&#34;&gt;Stephen Chin&lt;/a&gt; from Oracle visited me at the &lt;a href=&#34;http://www.10gen.com/&#34;&gt;10gen&lt;/a&gt; offices as part of his &lt;a href=&#34;http://steveonjava.com/nighthacking/&#34;&gt;NightHacking tour&lt;/a&gt;. &amp;nbsp;In the video we talk about my sessions at JavaOne and the &lt;a href=&#34;http://www.devoxx.com/pages/viewpage.action?pageId=6391499&#34;&gt;Agile presentation&lt;/a&gt; I&amp;rsquo;m giving at Devoxx, and I do some very basic hacking using the &lt;a href=&#34;http://www.mongodb.org/display/DOCS/Java+Tutorial&#34;&gt;MongoDB Java driver&lt;/a&gt;, attempting to showcase &lt;a href=&#34;http://www.gradle.org/&#34;&gt;gradle&lt;/a&gt; at the same time. It was a fun experience, even if it&amp;rsquo;s scary being live-streamed and recorded!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interviewed for InfoQ at QCon London</title>
      <link>http://trishagee.github.io/presentation/interviewed_for_infoq_at_qcon_london</link>
      <pubDate>Fri, 18 May 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/presentation/interviewed_for_infoq_at_qcon_london</guid>
      <description>&lt;p&gt;I was flattered to be &lt;a href=&#34;http://www.infoq.com/interviews/trisha-gee-disruptor&#34;&gt;interviewed for InfoQ&lt;/a&gt; at QCon London. It was a fun interview actually,
and didn&amp;rsquo;t feel anything like the half an hour it actually took. In it, I get to talk about Agile at LMAX, the Disruptor (of course) and diversity in IT (again).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overheard: Agile truths</title>
      <link>http://trishagee.github.io/post/overheard_agile_truths</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/overheard_agile_truths</guid>
      <description>&lt;p&gt;After attending a number of conferences and events, and performing numerous interviews, I&amp;rsquo;m starting to hear the same things again and again. &amp;nbsp;Since &lt;a href=&#34;http://twitter.com/#!/tastapod&#34;&gt;Dan North&lt;/a&gt; &lt;a href=&#34;http://qconlondon.com/london-2012/presentation/Decisions,%20decisions&#34;&gt;challenged all my assumptions at QCon&lt;/a&gt;, I&amp;rsquo;m reluctant to outright ridicule them, but I will put forward my personal opinion.&lt;br /&gt;&lt;br /&gt;Note: these are things I have heard from multiple sources, so with any luck I am not breaking the sanctity of the &lt;strike&gt;confessional&lt;/strike&gt; interview.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;I&amp;rsquo;ve never pair programmed, but I&amp;rsquo;ve frequently worked with a partner on critical production problems&lt;/b&gt;&lt;br /&gt;I find this fascinating. &amp;nbsp;If there&amp;rsquo;s one thing that needs to be fixed as fast, as correctly, as efficiently as possible, it&amp;rsquo;s a production issue. &amp;nbsp;And when there is one, &amp;ldquo;everyone&amp;rdquo; knows that two heads are better than one, even The Business.&lt;br /&gt;&lt;br /&gt;If this is the case, why is it so hard to sell pair programming as the default state of affairs?&lt;br /&gt;&lt;br /&gt;Is it because creating new features is seen as just typing, where the bottleneck is access to the physical keyboard? &amp;nbsp;Is it because fixing defects when the pressure &lt;i&gt;isn&amp;rsquo;t&lt;/i&gt; on is suddenly easier for one person on their own without help?&lt;br /&gt;&lt;br /&gt;This state of affairs is interesting to me as it implies that when&amp;nbsp;proverbial&amp;nbsp;hits the fan, the instinctive thing to do is to work collaboratively. &amp;nbsp;Why don&amp;rsquo;t we do it more often?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;We use Test Driven Development to get coverage&lt;/b&gt;&lt;br /&gt;Seems weird to me to write your tests first to get coverage. &amp;nbsp;If unit test coverage is your most important metric (and &lt;a href=&#34;http://craftedsw.blogspot.co.uk/2012/02/code-coverage-is-side-effect-and-not.html&#34;&gt;other&lt;/a&gt; &lt;a href=&#34;http://goodenoughsoftware.net/2012/03/21/code-coverage/&#34;&gt;people&lt;/a&gt; &lt;a href=&#34;http://martinfowler.com/bliki/TestCoverage.html&#34;&gt;have&lt;/a&gt; covered why this might not be the case), I&amp;rsquo;m not sure why you would write your tests first. &amp;nbsp;Seems to me that you&amp;rsquo;d get better coverage writing the tests &lt;i&gt;after&lt;/i&gt; the code. &amp;nbsp;That way you can be sure you&amp;rsquo;ve covered every eventuality.&lt;br /&gt;&lt;br /&gt;To me, the statement implies two assumptions which I would challenge:&lt;br /&gt;a) The primary value of writing your tests first is to meet your coverage requirements&lt;br /&gt;b) Coverage is a meaningful metric&lt;br /&gt;&lt;br /&gt;TDD/BDD has a number of benefits (&amp;hellip;and now I&amp;rsquo;m reluctant to list them here in case people repeat them back to me in an interview). &amp;nbsp;Good coverage will probably be a side effect of being forced to write your tests first, but I&amp;rsquo;m not convinced that&amp;rsquo;s the best thing that will come out of using TDD.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;I only test first when I know what I want to code&lt;/b&gt;&lt;br /&gt;I&amp;rsquo;ve overheard people saying that they test first when they know what the code is going to look like. &amp;nbsp;So you dive straight into the code when you &lt;i&gt;don&amp;rsquo;t&lt;/i&gt; know what you&amp;rsquo;re doing???&lt;br /&gt;&lt;br /&gt;Of course there is a place for this - spikes, prototyping, getting a feel for a new library, so on and so forth. &amp;nbsp;But I feel that for most code that you write in your day job, you probably have a business requirement and possibly (probably?) a less firm idea of how you&amp;rsquo;re going to code it. &amp;nbsp;To me, this translates into writing the test first (which documents what you want to deliver, which you already know) and then getting that to pass (which is writing the code, which is the bit you might not know). &lt;br /&gt;&lt;br /&gt;If you know exactly what the code is going to look like a) I would question that statement and b) what&amp;rsquo;s the point of the test?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What are the real answers?&lt;/b&gt;&lt;br /&gt;At &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2012/03/qcon-london-2012.html&#34;&gt;QCon&lt;/a&gt; I saw on Twitter a number of complaints because the presentations there gave opinions, guidelines, and, worst of all, a lot of &amp;ldquo;it depends&amp;rdquo;. &amp;nbsp;But people seemed to want The Answers.&lt;br /&gt;&lt;br /&gt;In my opinion, what developers get paid for is working out the &amp;ldquo;it depends&amp;rdquo; parameters and selecting an approach, technical or process-wise, that works for their situation.&lt;br /&gt;&lt;br /&gt;So although I have strong opinions on all the above subjects, and although LMAX has specific approaches to both pair programming and automated testing, sadly I&amp;rsquo;m not going to go into lots of details about those.&lt;br /&gt;&lt;br /&gt;Mostly because I&amp;rsquo;m still interviewing candidates, and I don&amp;rsquo;t want to give away the correct answers&amp;hellip;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why the customer isn&#39;t always right</title>
      <link>http://trishagee.github.io/post/why_the_customer_isnt_always_right</link>
      <pubDate>Sun, 12 Feb 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/why_the_customer_isnt_always_right</guid>
      <description>&lt;p&gt;Last week I went to get my hair cut (yes, sorry, this is a story about hair). &amp;nbsp;I had thought long and hard about what I wanted. &amp;nbsp;I researched, checked styles online, and bought a magazine so I could show my hairdresser exactly what I was after and there would be no confusion. &amp;nbsp;I was determined I would not be spending that ridiculous amount of money on something I was not going to be happy with. &amp;nbsp;I was even bold enough to ask for some changes to it at the end, which I have never ever had the courage to do before.&lt;br /&gt;&lt;br /&gt;He did an excellent job. &amp;nbsp;It was almost exactly what I had asked for, with some variations to account for my particular hair type. &amp;nbsp;It was a very cute hair style that suited me. &amp;nbsp;But I had a niggling doubt.&lt;br /&gt;&lt;br /&gt;A few days later, that niggle was a certainty. &amp;nbsp;It wasn&amp;rsquo;t what I wanted.&lt;br /&gt;&lt;br /&gt;However, it was what I had asked for.&lt;br /&gt;&lt;br /&gt;Being English, the thought of going back and telling him I wasn&amp;rsquo;t happy with it was horrifying. &amp;nbsp;Especially since he had done a really good job of it. &amp;nbsp;It wasn&amp;rsquo;t his fault that what I&amp;rsquo;d asked for wasn&amp;rsquo;t what I had actually wanted. &amp;nbsp;But I knew what I wanted now, and I was prepared to pay for it (again).&lt;br /&gt;&lt;br /&gt;This time I didn&amp;rsquo;t show him a picture. &amp;nbsp;I didn&amp;rsquo;t point to anything specific. &amp;nbsp;I said I wanted it much shorter after all and outlined the look I was going for. &amp;nbsp;We had a conversation about it and I left it to him to apply his skills to actually implement it.&lt;br /&gt;&lt;br /&gt;This time, I was much happier with the results. &amp;nbsp;In fact, it was exactly what I wanted.&lt;br /&gt;&lt;br /&gt;So what?&lt;br /&gt;&lt;br /&gt;Of course this got me thinking about work. &amp;nbsp;It&amp;rsquo;s not just a lame excuse to write about girl stuff on a supposedly technical blog. &amp;nbsp;It got me thinking about our customers.&lt;br /&gt;&lt;br /&gt;Whoever our customers are, whether they&amp;rsquo;re end users, internal business owners, external clients, or we work in a bank and have fifteen thousand layers of Business Analysts between us and Real People, whoever they are they want something from us. &amp;nbsp;And in many places, we, the techies, have trained them to ask for more and more specific things, so they can be sure they&amp;rsquo;re going to get what they really want. &amp;nbsp;Remember that time Bob asked for that extra field on that report because it would make his job easier? &amp;nbsp;Remember when Sandra wanted the workflow to be altered in a specific way? &amp;nbsp;It&amp;rsquo;s because they know that if they ask for something specific, the chances are better that it will make its way to the front of the work queue at some point, and when it comes out the other end it is more likely to be what they wanted.&lt;br /&gt;&lt;br /&gt;Only it isn&amp;rsquo;t, is it?&lt;br /&gt;&lt;br /&gt;There&amp;rsquo;s always another field to add, or another change to make. &amp;nbsp;And your customer isn&amp;rsquo;t quite satisfied, even though you did exactly what they asked for. &amp;nbsp;And sometimes they don&amp;rsquo;t tell you that they&amp;rsquo;re not getting what they need from your system, because it&amp;rsquo;s expensive or time consuming to get changes made.&lt;br /&gt;&lt;br /&gt;The key to delivering something they really want, instead of something else that&amp;rsquo;s merely adding to the weight of your code, is finding out what they&amp;rsquo;re actually trying to achieve.&lt;br /&gt;&lt;br /&gt;So Bob wants that extra field. &amp;nbsp;That&amp;rsquo;s easy enough. &amp;nbsp;But when you ask him why he wants that extra field, turns out it&amp;rsquo;s because the numbers in the reports he&amp;rsquo;s getting at the moment aren&amp;rsquo;t the ones he needs, or aren&amp;rsquo;t quite correct. &amp;nbsp;He&amp;rsquo;s probably created a monstrous Excel spreadsheet into which he manually types half of the numbers from the reports it took you ages to develop, which munges them into something quite different, in order to get the real thing he wants. &amp;nbsp;He&amp;rsquo;s just missing this one small piece of information to get the final figure correct. &amp;nbsp;It would save your company a lot of time/money/mis-typing errors if you completely re-wrote the reports Bob uses to give him exactly what he needs. &amp;nbsp;Or if you gave him a tool to download CSV formatted raw data from the database.&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s not Bob&amp;rsquo;s fault he can&amp;rsquo;t ask for this, he doesn&amp;rsquo;t know what we&amp;rsquo;re capable of providing him. &amp;nbsp;It&amp;rsquo;s not our fault for not delivering it the first time round, we don&amp;rsquo;t know what he does day-to-day. &amp;nbsp;But having a conversation where we recognise where the knowledge lies (Bob knows what the output of his day job is presumably, and we know what&amp;rsquo;s available and how we can provide it), and collaborating to come up with the least rubbish solution for everyone, is a step to providing that overused term, &amp;ldquo;business value&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;We&amp;rsquo;re not on different sides here, we all play for the same team - we want our jobs to be as painless as possible, which (should) ultimately provide better efficiency for our company. &amp;nbsp;After all, we want the company to make money so they can pay us, right?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;Caveat: Mileage may vary. &amp;nbsp;Sometimes, with some customers, you really do need to tell them what they want.&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Are you an awesome developer?</title>
      <link>http://trishagee.github.io/post/are_you_an_awesome_developer</link>
      <pubDate>Tue, 20 Sep 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/are_you_an_awesome_developer</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://careers.stackoverflow.com/jobs/13468/java-developer-lmax?a=fUyRLfG&#34;&gt;We are hiring&lt;/a&gt;!&lt;br /&gt;&lt;br /&gt;If you think we&amp;rsquo;re &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;doing something interesting&lt;/a&gt;, or if you think you can help us do our thing &lt;i&gt;even better&lt;/i&gt;, come join us. &amp;nbsp;Your boss will be the dude who wrote &lt;a href=&#34;http://continuousdelivery.com/about/&#34;&gt;Continuous Delivery&lt;/a&gt;, you&amp;rsquo;ll get a chance to experience what &lt;a href=&#34;http://blog.codeaholics.org/&#34;&gt;Danny&lt;/a&gt; calls meta-Agile (or Agile Agile), and you&amp;rsquo;ll really start to care about &lt;a href=&#34;http://www.amazon.com/gp/product/0321125215/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;linkCode=as2&amp;amp;camp=217145&amp;amp;creative=399377&amp;amp;creativeASIN=0321125215&#34;&gt;Domain-Driven Design&lt;/a&gt;&lt;img alt=&#34;&#34; border=&#34;0&#34; height=&#34;1&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0321125215&amp;amp;camp=217145&amp;amp;creative=399377&#34; style=&#34;border: none !important; margin: 0px !important;&#34; width=&#34;1&#34; /&gt;.&lt;br /&gt;&lt;br /&gt;Ideally we&amp;rsquo;re after Java people, but at the heart of it we want people who are dead passionate about development.&lt;br /&gt;&lt;br /&gt;Apply via the &lt;a href=&#34;http://careers.stackoverflow.com/jobs/13468/java-developer-lmax?a=fUyRLfG&#34;&gt;Stack Overflow Careers advert&lt;/a&gt;&amp;nbsp;(you get extra brownie points if you mention my blog).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What my hangovers can teach you about Agile</title>
      <link>http://trishagee.github.io/post/what_my_hangovers_can_teach_you_about_agile</link>
      <pubDate>Sat, 17 Sep 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/what_my_hangovers_can_teach_you_about_agile</guid>
      <description>&lt;p&gt;As a survival trait for living and working in the cites&lt;sup&gt;1&lt;/sup&gt; of London, I have a set of rituals to avoid hangovers.  If you are not a single person living in a city like London, you might not understand how vital this is.  Most networking, particularly in the financial services industry, is done in the presence of alcohol.&lt;br /&gt;&lt;br /&gt;So preventing the inevitable hangover is quite important to the other part of the job – the actual working bit.  I&amp;rsquo;ll let you into a secret and tell you my nightly ritual:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Floss and clean teeth (OK I&amp;rsquo;ll admit, I barely floss when I&amp;rsquo;m sober let alone drunk)&lt;/li&gt;&lt;li&gt;Cleanse/tone/moisturise (I&amp;rsquo;m a rubbish girl, this is a very recent ritual for me)&lt;/li&gt;&lt;li&gt;Apply &lt;a href=&#34;http://www.sallyhansen.co.uk/products/diamond-cuticle-nail-cream&#34;&gt;cuticle cream&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Do my calf stretches&lt;/li&gt;&lt;li&gt;Drink 500ml of water&lt;/li&gt;&lt;li&gt;Eat something, even if it&amp;rsquo;s a dirty McDonalds (quarter pounder with cheese, no pickle no onion).&lt;/li&gt;&lt;/ul&gt;Prior to all this is the additional requirement “don&amp;rsquo;t drink more than a bottle and a half of wine”.  Everyone has their limits, &lt;i&gt;lots&lt;/i&gt; of practice means I know full well what mine are.&lt;br /&gt;&lt;br /&gt;This actually works for me.  I won&amp;rsquo;t claim to feel capable of being quite as high performance as the code I&amp;rsquo;m working on, but I won&amp;rsquo;t feel like killing myself, and I will make it to the gym before work and do a whole day of productive coding.&lt;br /&gt;&lt;br /&gt;If you were trying to solve a similar problem (“no debilitating hangovers”), you might try and follow my rituals.  But you might decide that drinking the water was going to mean you had to go to the loo in the night, and strike that off the list.  You might be on a diet, so you don&amp;rsquo;t have the food, thinking the alcohol is calories enough for the night.  And you&amp;rsquo;ll follow everything else religiously, but still have hangovers.&lt;br /&gt;&lt;br /&gt;Or you might ignore the alcohol intake guidelines, thinking the stuff that you do at home to repair the damage should be enough, and drink 12 pints of&amp;nbsp;margaritas.  Or you might be the sort of person who can only get away with drinking a couple of glasses of wine / pints of beer, and follow my rules perfectly, but still feel like dying the next day.  &lt;br /&gt;&lt;br /&gt;And when this happens you&amp;rsquo;ll look at my rituals and think &amp;ldquo;What a waste of time!  This person has no idea what they&amp;rsquo;re talking about&amp;rdquo;, and throw the whole lot out of the window and go back to doing waterfall development (oh wait, I&amp;rsquo;m getting ahead of myself).&lt;br /&gt;&lt;br /&gt;Or you&amp;rsquo;ll do the bits that actually prevent the hangover (the water, the food, restricting alchol) and go around telling the interweb I have no idea what I&amp;rsquo;m talking about because the other stuff is a waste of time.&lt;br /&gt;&lt;br /&gt;The key point here is that this works for &lt;i&gt;me&lt;/i&gt;.  It&amp;rsquo;s foolish of me to tell the world this will fix all their problems, and pointless for others to copy it without realising &lt;i&gt;why&lt;/i&gt; they&amp;rsquo;re doing it.&lt;br /&gt;&lt;br /&gt;For example – why on Earth is “apply cuticle cream” on there? It doesn&amp;rsquo;t actually fix the problem of dehydration due to excessive alcohol intake.  But it&amp;rsquo;s important to me, because I need to make the time to do the whole ritual to get my brain into the right place for sleep.  It&amp;rsquo;s also dead important for my subconscious – alcohol is basically abuse of my body, the beauty part of the regime is to remind my brain that its important to take care of myself too.  It doesn&amp;rsquo;t fix the immediate issue of hangover the next day, but it aims to prevent future problems of drowning my sorrows in alcohol.  It&amp;rsquo;s an important part of my Long Term Plan – these rituals need to be worked into the daily steps to lead eventually to World Domination.&lt;br /&gt;&lt;br /&gt;And calf stretches?  Well, I&amp;rsquo;m injured, have had shin splints for a million years.  If I want to run the Royal Parks Half Marathon in October, I need to stretch 3 times a day.  Doesn&amp;rsquo;t matter if I&amp;rsquo;m drunk or not, it&amp;rsquo;s not an excuse.  The half marathon is a very important longer-term goal.  But &lt;i&gt;you&lt;/i&gt; don&amp;rsquo;t need to do it.  Well, unless you have the same issue.&lt;br /&gt;&lt;br /&gt;The important thing is that all of these rituals are tied to a goal. &amp;nbsp;But they&amp;rsquo;re not the same goal:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Floss and clean teeth.  GOAL – don&amp;rsquo;t get told off by the dentist.  Don&amp;rsquo;t require fillings - costs money and not great for overall health.&lt;/li&gt;&lt;li&gt;Cleanse/tone/moisturise.  GOAL – prepare subconscious for sleep and remind brain that body needs love.&lt;/li&gt;&lt;li&gt;Apply cuticle cream.  GOAL –&amp;nbsp;prepare subconscious for sleep and remind brain that body needs love.&lt;/li&gt;&lt;li&gt;Do my calf stretches GOAL – Royal Parks Half Marathon&lt;/li&gt;&lt;li&gt;Drink 500ml of water GOAL – prevent Debilitating Hangover&lt;/li&gt;&lt;li&gt;Eat something, even if it&amp;rsquo;s a dirty McDonalds GOAL – prevent Debilitating Hangover.&lt;/li&gt;&lt;/ul&gt;The thing here is that if I didn&amp;rsquo;t do the stuff to aim towards longer-term goals, I might be more inclined to drink more out of boredom or despair, I might have worse hangovers in the future.&lt;br /&gt;&lt;br /&gt;To paraphrase Eddie Izzard “&amp;hellip;and that&amp;rsquo;s like &lt;strike&gt;our Lord Jesus&lt;/strike&gt; the agile process&amp;hellip;”.  Agile, in whatever form you take it (actually all processes) is supposed to enable you as a team / organisation to work better.  Whichever cult you follow, there are practices designed to work for you to make you more productive.  But you do have to continuously improve, gather and act on feedback, and, most importantly, to know why you&amp;rsquo;re doing what you&amp;rsquo;re doing.  Otherwise it&amp;rsquo;s just &lt;a href=&#34;http://en.wikipedia.org/wiki/Cargo_cult&#34;&gt;cargo cultism&lt;/a&gt; – you look like you&amp;rsquo;re doing everything, but the results just don&amp;rsquo;t arrive.  I&amp;rsquo;ve worked for a &lt;a href=&#34;http://blogs.msdn.com/b/ericgu/archive/2006/10/13/scrumbut.aspx&#34;&gt;scrum-but&lt;/a&gt; company – they had the cards, short iterations, invested customers. &amp;nbsp;But no single product owner, they never acted on the results of retrospectives, and most importantly the team didn&amp;rsquo;t own the work they&amp;rsquo;d signed up to.  They also had a project manager who told people what they were doing.  This doesn&amp;rsquo;t answer the question.  This is drinking 12 pints of scrumpy and&amp;nbsp;doing &amp;ldquo;cleanse/tone/moisturise&amp;rdquo;,&amp;nbsp;and wondering why it still hurts.&lt;br /&gt;&lt;br /&gt;You have to understand the problem.&amp;nbsp;You can&amp;rsquo;t blindly follow the stuff that you fancy, the stuff you find easy.  If it&amp;rsquo;s easy, it&amp;rsquo;s probably something you were already doing. &amp;nbsp;If you picked up agile to make a change to deliver more/better/faster, there is going to be some pain.  Because if what you were doing before was working, you&amp;rsquo;d carry on doing it.  So improvement is going to be &lt;i&gt;hard&lt;/i&gt;.  At first.&lt;br /&gt;&lt;br /&gt;The key is to stick with it, to check progress, to continuously improve.  To find what works for you.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;sup&gt;1&lt;/sup&gt; Random fact of the day: London is &lt;a href=&#34;http://www.lightuplondon.com/london-facts/12040.html&#34;&gt;actually two cities&lt;/a&gt;, the City of London and the City of Westminster. &amp;nbsp;But you probably already knew that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scrum but...</title>
      <link>http://trishagee.github.io/post/scrum_but</link>
      <pubDate>Tue, 24 Feb 2009 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/scrum_but</guid>
      <description>&lt;p&gt;Having experience &lt;a href=&#34;http://martinfowler.com/bliki/FlaccidScrum.html&#34;&gt;Flaccid Scrum&lt;/a&gt;, I find this article interesting, and agree with most of it.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;d also like to add though, that if you do the scrum practices&amp;nbsp;(story cards, stand ups, retrospectives, etc) but don&amp;rsquo;t buy into the fundamental principals, you will not succeed.&amp;nbsp; And that means everyone on the team, not just the people in charge. &amp;nbsp;In particular, if the team is not empowered, is not committing to the estimates and the iteration plan in its heart, and and does not trust, then you are probably better off using traditional processes.&amp;nbsp; Or just as likely to fail whatever process you use.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile Infection Growing</title>
      <link>http://trishagee.github.io/post/agile_infection_growing</link>
      <pubDate>Thu, 22 Mar 2007 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/agile_infection_growing</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://mikemason.ca/2007/03/21/#20070321CardInfected&#34;&gt;This is a bloody good idea&lt;/a&gt;.  It builds upon my own Virgoen tendancies to write lists and tick things off, but what the list model lacks is the &amp;ldquo;in progress&amp;rdquo; state.  Plus occasionally my lists get confused.  See today&amp;rsquo;s notebook page:&lt;br/&gt;&lt;form&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Thursday&lt;/span&gt;&lt;br/&gt;&lt;ul&gt;&lt;br/&gt;&lt;input type=&#34;checkbox&#34;/&gt;Fix bugs in Test Director&lt;br/&gt;&lt;input type=&#34;checkbox&#34;/&gt;Merge fixes up&lt;br/&gt;&lt;input type=&#34;checkbox&#34;/&gt;Do build&lt;br/&gt;&lt;input checked=&#34;true&#34; type=&#34;checkbox&#34;/&gt;Merge down&lt;br/&gt;&lt;input type=&#34;checkbox&#34;/&gt;Read terms of contract&lt;br/&gt;&lt;input type=&#34;checkbox&#34;/&gt;E-mail solicitor&lt;br/&gt;&lt;input type=&#34;checkbox&#34;/&gt;Go to Robert Dyas&lt;br/&gt;&lt;input checked=&#34;true&#34; type=&#34;checkbox&#34;/&gt;Order DAB Radio&lt;br/&gt;&lt;input type=&#34;checkbox&#34;/&gt;Finish business analysis docs&lt;br/&gt;&lt;input type=&#34;checkbox&#34;/&gt;Carry on with QCon note consolidation&lt;br/&gt;&lt;/ul&gt;&lt;/form&gt;&lt;br/&gt;How do I know which ones I&amp;rsquo;ve started?  I could do with a couple of boards at least as well to separate the personal from the business.&lt;br/&gt;&lt;br/&gt;Also note that I took something away from my Time Management course, attended when I was a mere graduate at a large manufacturing organisation: make a new list for each day, discarding your completed items and moving forward the incomplete ones (it also mentions to discard &amp;ldquo;low priority&amp;rdquo; items that haven&amp;rsquo;t been done over a week or two under the theory that you&amp;rsquo;ll never do it if you haven&amp;rsquo;t by then).&amp;nbsp; This is great for keeping a nice clean list of achievable goals for the day, but a bit rubbish at giving any positive feedback - no matter how much you get done, every day there&amp;rsquo;s &lt;span style=&#34;font-style: italic;&#34;&gt;yet more &lt;/span&gt;to do, and lack of visibility on what you have actually achieved. The example story wall in the link above is great for a sense of acheivement - yes there&amp;rsquo;s still things to be done but look how much has been achieved in comparison!&lt;br/&gt;&lt;br/&gt;However, I am going to make the common criticism of cards: one of their major advantages, their &amp;ldquo;physicality&amp;rdquo;&lt;sup&gt;1&lt;/sup&gt;, is also the disadvantage - whilst I can take my little notebook round with me, I can&amp;rsquo;t lug a story wall between work and home.  And although some of those things are personal tasks, they need to be done at work (e.g. e-mailing because I haven&amp;rsquo;t got my broadband at home yet) or between work and home.&lt;br/&gt;&lt;br/&gt;Mind you, I actually have 3 pieces of paper containing lists of things to do / buy / check / clean with regards to my new flat, because of my inability to actually carry the notebook with me.&amp;nbsp; Or the same one at least.&lt;br/&gt;&lt;br/&gt;I think this means two more items to be added to the &amp;ldquo;To Buy&amp;rdquo; list: a magnetic whiteboard and some story cards.  I like whiteboards because you can even scribble stuff behind / around the cards.&lt;br/&gt;&lt;br/&gt;EDIT: Bah, someone else &lt;a href=&#34;http://www.xprogramming.com/xpmag/jatLetsGetOrganized.htm&#34;&gt;already beat me to it&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;sup&gt;1&lt;/sup&gt; This is an extract from &lt;a href=&#34;http://www.jamesshore.com/Agile-Book/stories.html&#34;&gt;James Shore&amp;rsquo;s section on Stories&lt;/a&gt;:&lt;br/&gt;&lt;blockquote&gt;Write stories on index cards.&lt;br/&gt;&lt;br/&gt;This isn&amp;rsquo;t the result of some strange Ludditian urge on the part of XP&amp;rsquo;s creators—it&amp;rsquo;s a deliberate choice based on the strengths of the medium. You see, physical cards have one feature that no conglomeration of pixels has: you can pick them up and move them around. They&amp;rsquo;re tactile. This gives them power.&lt;/blockquote&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuing the Agile froth...</title>
      <link>http://trishagee.github.io/post/continuing_the_agile_froth</link>
      <pubDate>Tue, 20 Mar 2007 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/continuing_the_agile_froth</guid>
      <description>&lt;p&gt;&amp;hellip;there are a number of points in &lt;a href=&#34;http://www.infoq.com/articles/paul-oldfield-interview&#34;&gt;this interview&lt;/a&gt; with Paul Oldfield which are interesting to consider when thinking about &amp;ldquo;doing Agile right&amp;rdquo;.&amp;nbsp; It seems to be compatible with my &amp;ldquo;people over process&amp;rdquo; view - I&amp;rsquo;m not stating that having good people negates the need for any form of process or discipline, I have seen that this is simply not the case.&amp;nbsp; I do however think that agile techniques in particular rely heavily upon the &amp;ldquo;right&amp;rdquo; people / team, for some nebulous definition of&amp;nbsp; &amp;ldquo;right&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
