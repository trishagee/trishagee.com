<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Design on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/design/index.xml</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Mon, 18 Mar 2013 00:00:00 UTC</updated>
    
    <item>
      <title>It Depends</title>
      <link>http://trishagee.github.io/post/it_depends</link>
      <pubDate>Mon, 18 Mar 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/it_depends</guid>
      <description>&lt;p&gt;Don&amp;rsquo;t you hate it when you ask a perfectly good question, and someone comes back with the answer &amp;ldquo;it depends&amp;rdquo;?&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s so frustrating to think that in a world of ones and zeros, people can&amp;rsquo;t give absolute answers and you can&amp;rsquo;t rely on &amp;ldquo;best practice&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s an answer I&amp;rsquo;ve given so many times, especially when someone asks about performance. &amp;nbsp;Well, I&amp;rsquo;ve had my&amp;nbsp;comeuppance. &amp;nbsp;The entire exercise of designing the new Java driver for &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; has been nothing but a series of questions where the answer is &amp;ldquo;it depends&amp;rdquo;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Which Java version are our users, um, using?&lt;/li&gt;&lt;li&gt;Do people want an asynchronous driver?&lt;/li&gt;&lt;li&gt;How will they want to work with async?&lt;/li&gt;&lt;li&gt;Will they want to use async and synchronous method calls from the same application?&lt;/li&gt;&lt;li&gt;Do people typically use the Java driver directly, or do they use something that wraps it, like &lt;a href=&#34;https://code.google.com/p/morphia/&#34;&gt;Morphia&lt;/a&gt; or &lt;a href=&#34;http://www.springsource.org/spring-data&#34;&gt;Spring Data&lt;/a&gt;?&lt;/li&gt;&lt;li&gt;What&amp;rsquo;s most important for users in terms of performance? &amp;nbsp;Throughput? Latency? Consistent GC profile? Something else?&lt;/li&gt;&lt;li&gt;What sorts of operations are our users doing?&lt;/li&gt;&lt;li&gt;Do people usually update their driver and the server version at the same time?&lt;/li&gt;&lt;li&gt;Is it easier for them to update their driver version than their server version?&lt;/li&gt;&lt;li&gt;Do they use (or will they need) custom encoders and decoders?&lt;/li&gt;&lt;li&gt;When should we deprecate? &amp;nbsp;When should we remove deprecated methods?&lt;/li&gt;&lt;/ul&gt;&amp;hellip;and so on, and so forth.&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s such a change from the sort of development I&amp;rsquo;m used to: &amp;ldquo;the business&amp;rdquo; (a business analyst, a customer, a business owner) comes to you with a requirement, you ask a bunch of questions, preferably explaining the trade-offs that come with decisions or approaches, and then you and the team come up with a design and implement it. &amp;nbsp;If you&amp;rsquo;re agile, this is all done in a nice, iterative fashion, which hopefully leads to &amp;ldquo;the business&amp;rdquo; being happy, or at the very least to another series of stories/requirements to work on.&lt;br /&gt;&lt;br /&gt;The problem is that working on a library, particularly an open source library, is a completely different thing. &amp;nbsp;We don&amp;rsquo;t even know who our users are. &amp;nbsp;This statement is true for pretty much any web application, of course, but there at least you can (if you choose) use tools like analytics and &lt;a href=&#34;http://en.wikipedia.org/wiki/A/B_testing&#34;&gt;A/B testing&lt;/a&gt; to figure out what works for your users and what doesn&amp;rsquo;t.&lt;br /&gt;&lt;br /&gt;When your library is used for free by all kinds of different teams and companies, including organisations behind closed doors, you have no idea what&amp;rsquo;s being used, what works, what people like, what people don&amp;rsquo;t like. &amp;nbsp;The most visible feedback you have is when you see blog posts telling everyone how bad your product is.&lt;br /&gt;&lt;br /&gt;This makes the design exercise VERY difficult. &amp;nbsp;Take performance for example. &amp;nbsp;Having come from a high performance, low latency background, I&amp;rsquo;m desperate to have a very extensive suite of automated performance tests (and we do already have some). &amp;nbsp;But how do I design those, when I don&amp;rsquo;t know:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;What operations are typical for our users&lt;/li&gt;&lt;li&gt;Whether our users care more about latency or throughput, or mean latency vs the long tail, or GC pauses, etc&lt;/li&gt;&lt;li&gt;How much data customers tend to punt around&lt;/li&gt;&lt;li&gt;What the hardware or network topology looks like?&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The number one lesson you learn when performance testing is to make your test environment as similar to production as possible. &amp;nbsp;How can we do that for all our customers?&lt;br /&gt;&lt;br /&gt;Well, we can&amp;rsquo;t. &amp;nbsp;Of course.&lt;br /&gt;&lt;br /&gt;What we can do is offer an easy way for our users to test it for themselves, with their own data, their own hardware, their own use-cases. &amp;nbsp;If we can provide some sort of hook into standard metrics, we could get users to plug into that and do what they needed. &amp;nbsp;In theory, as we get more examples of these standard metrics from a range of users, it will be easier for us to help them diagnose problems. &lt;br /&gt;&lt;br /&gt;What I discovered thinking about this problem is that I was asking the wrong question - it&amp;rsquo;s not &amp;ldquo;how do we test this?&amp;rdquo; but &amp;ldquo;how do we make it as easy as possible for users to test this in a production-like environment?&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;My biggest headache has been backwards compatibility. &amp;nbsp;I&amp;rsquo;ve worked on plenty of systems where we&amp;rsquo;ve provided an API which has to be maintained in a friendly way for those who use it. &amp;nbsp;That&amp;rsquo;s tough enough - you have to be careful to only add methods, not to change signatures or remove them altogether. &amp;nbsp;But when your system is not simply an API to code against, but a library that runs within other people&amp;rsquo;s systems, this problem is even harder. &amp;nbsp;&lt;a href=&#34;http://qconlondon.com/london-2013/presentation/Parallel%20KEYNOTE:%208%20Lines%20of%20Code%20-%20Fleming%20Room%203rd%20Floor&#34;&gt;Greg Young talked at QCon&lt;/a&gt; about this problem from the developer&amp;rsquo;s point of view - every piece of code in your system, even if it&amp;rsquo;s a third party library, is your code. &amp;nbsp;Because you&amp;rsquo;re the one who&amp;rsquo;ll get called at three in the morning if your system falls over with a ConcurrentModificationException in some third party data structure. &lt;br /&gt;&lt;br /&gt;So as library developers, we have to not only provide excellent quality, well tested code, but we also have to let our baby go off and run in strange environments. &amp;nbsp;Ones that might not be running Oracle&amp;rsquo;s Java 1.7, ones that might contain other libraries that could clash with our own. &amp;nbsp;Have you ever looked at all the Maven dependencies in a large project? &amp;nbsp;You can end up with conflicting versions of common libraries (e.g. logging or &lt;a href=&#34;http://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;DI&lt;/a&gt; frameworks) as every library you use pulls in dozens of libraries for itself.&lt;br /&gt;&lt;br /&gt;In our case then, we need to use as few dependencies as possible, and to write nice, clean, modern Java, whilst supporting older versions of Java. &amp;nbsp;What&amp;rsquo;s modern enough? &amp;nbsp;We know that some large organisations take a loooong time to upgrade to the latest versions of Java. &amp;nbsp;We currently support Java 5 and above, as 5 was a big enough change (and is old enough now) to be a good point to draw the line. &amp;nbsp;But what about Java 7, with its shiny new &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/nio/channels/package-summary.html&#34;&gt;asynchronous channels&lt;/a&gt;? &amp;nbsp;That would be awesome for a driver like ours, an application that exists solely to connect to some server somewhere. &amp;nbsp;What about Java 8, with &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2012/11/java-8-introduction-to-lambdas-article.html&#34;&gt;lambda goodness&lt;/a&gt; and a very appealing &lt;a href=&#34;http://cr.openjdk.java.net/~briangoetz/lambda/sotc3.html&#34;&gt;Stream interface&lt;/a&gt;, that supports (and encourages) a syntax that looks like it might work well for providing a fluent API for querying, I dunno, databases? &amp;nbsp;How do we make the most out of advances in modern Java, without alienating our existing users?&lt;br /&gt;&lt;br /&gt;And, of course, I haven&amp;rsquo;t even talked about actually changing the API. &amp;nbsp;The existing Java driver doesn&amp;rsquo;t even make use of generics. &amp;nbsp;How can we change our API to provide a more modern-looking interface, without either forcing all our users to make massive changes to their applications (and for what? &amp;nbsp;Their code already works), or adding so many new classes and methods that it becomes very difficult for new users to work out the Best Practice way of interacting with our driver?&lt;br /&gt;&lt;br /&gt;So, what can we do?&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Firstly we have to figure out which questions we have and what possible solutions exist.&lt;/li&gt;&lt;li&gt;Then we have to weigh up the pros and cons of each of the possible solutions.&lt;/li&gt;&lt;li&gt;Ideally we&amp;rsquo;d get feedback early and often from our users, from the community, about the approaches we&amp;rsquo;re taking.&lt;/li&gt;&lt;li&gt;Development would happen in parallel, in a nice, agile, way, to bring the best possible solution for everyone.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;What this all really means, though, is that the Shiny New Java Driver™ is not ready right now, and will not be ready immediately, despite the fact that we&amp;rsquo;ve already spent some time on its development, and considered all of those questions and more. &amp;nbsp;Right now, we&amp;rsquo;re starting to get feedback from the community - from users, and from committers (or people who would like to be committers). &amp;nbsp;Which means that I get to to go to more conferences and user groups, and talk about our problems when designing the new driver. &amp;nbsp;I&amp;rsquo;m hoping to get two things out of this, apart from more air miles:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Feedback from the community about our assumptions and the direction we&amp;rsquo;re taking.&lt;/li&gt;&lt;li&gt;Present to the development community some of the lessons we&amp;rsquo;ve learnt/are learning, in the hope that you can use them when approaching the design of your own applications.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&amp;lt;gratuitous-conference-plug&amp;gt;You&amp;rsquo;ve already seen some of these &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/03/upcoming-events.html&#34;&gt;upcoming events&lt;/a&gt;. &amp;nbsp;But in case you haven&amp;rsquo;t, &lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/events/109032992/&#34;&gt;this Thursday I&amp;rsquo;ll be presenting at Skillsmatter&lt;/a&gt; on how we approached this design problem, and &lt;a href=&#34;http://www.devoxx.com/display/UK13/What+do+you+mean%2C+backwards+compatibility&#34;&gt;again at DevoxxUK next week&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you&amp;rsquo;re more interested in everything MongoDB, and want to get a much better look at what it is, how it works, how to design for it, then come to &lt;a href=&#34;http://www.10gen.com/events/mongodb-london-2013&#34;&gt;MongoDB London&lt;/a&gt;, where I am one of numerous presenters, all going into MongoDB specifics.&amp;lt;/gratuitous-conference-plug&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So&amp;hellip; I&amp;rsquo;m afraid to say that even after this long post, even after bemoaning my own experiences of hearing &amp;ldquo;it depends&amp;rdquo;, I still don&amp;rsquo;t have an answer for you.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But maybe I do. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;ldquo;It Depends&amp;rdquo; means &amp;ldquo;you need to get more information in order to answer that question&amp;rdquo;. &amp;nbsp;And it&amp;rsquo;s our job as developers to ask the right questions to gather that information. &amp;nbsp;If the answer is &amp;ldquo;it depends&amp;rdquo;, you&amp;rsquo;re not asking the right question yet, or you&amp;rsquo;re not asking the right people. &amp;nbsp;So dig down, find out why you can&amp;rsquo;t answer the original question, and start iterating through your design process until you have answers that you can act upon.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Easy. &amp;nbsp;Right&amp;hellip;?&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
