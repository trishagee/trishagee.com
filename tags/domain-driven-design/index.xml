<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Domain-Driven-Design on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/domain-driven-design/index.xml</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Sat, 16 Jun 2012 00:00:00 UTC</updated>
    
    <item>
      <title>Overheard: Development Myths</title>
      <link>http://trishagee.github.io/post/overheard_development_myths</link>
      <pubDate>Sat, 16 Jun 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/overheard_development_myths</guid>
      <description>&lt;p&gt;Continuing the theme of Things I Have Heard I Don&amp;rsquo;t Think I Agree With.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;To developers technologies are everything&lt;/b&gt;&lt;br /&gt;I can&amp;rsquo;t remember the context of this but I hear the same sentiment in different guises over and over again. &amp;nbsp;Often from non-techies, but more alarmingly from developers.&lt;br /&gt;&lt;br /&gt;Is this true?&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s true for a certain tribe of techies, sure. &amp;nbsp;And creating and effectively using new technologies is an important part of what drives the current information age forward. &amp;nbsp;But I&amp;rsquo;d be worried if I thought that 99% of developers were like this.&lt;br /&gt;&lt;br /&gt;In our day jobs, and also if we want to create something that makes any money, we need to be interested in solving people&amp;rsquo;s problems and creating solutions. &amp;nbsp;Sure, we&amp;rsquo;ll use technology to do that. &amp;nbsp;But if we were all only motivated by technology, we&amp;rsquo;d always be trying out the Next Big Thing when our customers wanted a simple CRUD web app. &amp;nbsp;Any organisation that encouraged this sort of technology um, infidelity? &amp;nbsp;playing the field? might find themselves with lots of fascinated and broadly-educated developers, but not a lot of productivity.&lt;br /&gt;&lt;br /&gt;I always thought developers were drawn by wrestling with the machine to solve a particular problem, or to do something that hadn&amp;rsquo;t been done before. &amp;nbsp;I didn&amp;rsquo;t think we liked learning Ruby because we didn&amp;rsquo;t study it at university, or switching to a functional language simply because that&amp;rsquo;s the way the whole world is going.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;We can train The Business to speak our language&lt;/b&gt;&lt;br /&gt;I&amp;rsquo;ve heard a number of people talking about the Holy Grail of having business owners write acceptance tests. &amp;nbsp;At &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX&lt;/a&gt; we have a (Java-based) DSL that theoretically could allow technical-ish non-developers to write our automated acceptance tests. &amp;nbsp;However, is this the right thing to do? &amp;nbsp;To make our jobs easier, and our code better quality, we need the business to become almost developers?&lt;br /&gt;&lt;br /&gt;Our (very difficult) job as developers is to act as translator between the ones and zeros a computer speaks and the real life doman language our business guys (and girls) use. &amp;nbsp;Forcing the business to become more technical is just, well, lazy.&lt;br /&gt;&lt;br /&gt;So if our business people shouldn&amp;rsquo;t be forced to become more technical, how can we bridge the gap? &amp;nbsp;Is there anything that we as developers can do to move closer to the business?&lt;br /&gt;&lt;br /&gt;A&amp;nbsp;&lt;a href=&#34;http://www.amazon.com/gp/product/0321125215/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321125215&#34;&gt;Ubiquitous Language&lt;/a&gt;&lt;img alt=&#34;&#34; border=&#34;0&#34; height=&#34;1&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0321125215&#34; style=&#34;border: none !important; margin: 0px !important;&#34; width=&#34;1&#34; /&gt;&amp;nbsp;is a good start. &amp;nbsp;When a business user talks about an order, a developer should be thinking about the Order class, or something that implements an Order interface. &amp;nbsp;When the business talks about placing an order, a developer shouldn&amp;rsquo;t be thinking &amp;ldquo;place order translates into the execute method&amp;rdquo;, they should assume there&amp;rsquo;s a placeOrder method somewhere they can use as a start point.&lt;br /&gt;&lt;br /&gt;We certainly shouldn&amp;rsquo;t be training the head of sales to start talking in terms of Java classes or technologies - &amp;ldquo;I want the Resin tier to validate the order while the OrderMatcherImpl checks for availability&amp;rdquo;. &amp;nbsp;That would be silly.&lt;br /&gt;&lt;br /&gt;Development is hard, that&amp;rsquo;s why they pay us. &amp;nbsp;And part of that hard job is learning the business model we&amp;rsquo;re implementing so we can mirror and support the business. &amp;nbsp;We shouldn&amp;rsquo;t be inflicting our technology on the business.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
