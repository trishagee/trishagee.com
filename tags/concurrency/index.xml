<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Concurrency on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/concurrency/index.xml</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Fri, 21 Oct 2011 00:00:00 UTC</updated>
    
    <item>
      <title>Mike and I debut our new Disruptor presentation</title>
      <link>http://trishagee.github.io/post/mike_and_i_debut_our_new_disruptor_presentation</link>
      <pubDate>Fri, 21 Oct 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/mike_and_i_debut_our_new_disruptor_presentation</guid>
      <description>&lt;p&gt;Last Tuesday&amp;nbsp;&lt;a href=&#34;http://mikes-tech.blogspot.com/&#34;&gt;Mike&lt;/a&gt; and I unveiled our brand shiny new presentation: &lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/events/32877942/&#34;&gt;Understanding the Disruptor, a Beginner&amp;rsquo;s Guide to Hardcore Concurrency&lt;/a&gt;. &amp;nbsp;This was a preview of the talk we&amp;rsquo;ll be doing at &lt;a href=&#34;http://jaxlondon.com/2011/sessions/?tid=2175&#34;&gt;JAX London&lt;/a&gt; on the 2nd November.&lt;br /&gt;&lt;br /&gt;A &lt;a href=&#34;http://vimeo.com/30781988&#34;&gt;video of the session&lt;/a&gt; is available, as are &lt;a href=&#34;http://www.slideshare.net/trishagee/understanding-the-disruptor&#34;&gt;the slides&lt;/a&gt;. &amp;nbsp;I promise not to say &amp;ldquo;so&amp;rdquo; anywhere near as many times when I repeat my performance at JAX (is there anything more painful than watching yourself on video?).&lt;br /&gt;&lt;br /&gt;I thought the session went really really well. &amp;nbsp;We got some great questions at the end, we had an audience that was engaged, and I was dead pleased we didn&amp;rsquo;t lose anyone with the assembly language. &amp;nbsp;We had some very valuable feedback afterwards too.&lt;br /&gt;&lt;br /&gt;As well as our presentation, there were three great lightning talks:&lt;br /&gt;&lt;ul&gt;&lt;b&gt;Somay Nakhal on&amp;nbsp;Java Thread States&lt;/b&gt; - Somay gave a nice overview of thread lifecycles with code and some great diagrams. &amp;nbsp;I liked how he made this more applicable to the real world than the sort of book examples you get.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;a href=&#34;http://twitter.com/#!/gedb&#34;&gt;Ged Byrne&lt;/a&gt; on the shiny new&amp;nbsp;&lt;a href=&#34;http://ljcbookclub.wordpress.com/2011/10/11/coherence-3-5-book-review/&#34;&gt;LJC Book Club&lt;/a&gt;&lt;/b&gt; - Ged reminded us how great it is to read an actual, paper book. &amp;nbsp;How committing to reading page by page forces you to learn in a different way to jumping around internet references that might not give you the context you need. &amp;nbsp;I thought this was a great presentation with humour, and I liked the way he challenged us to &amp;ldquo;expand our minds&amp;rdquo;. &amp;nbsp;Although the actual book he was reviewing was &lt;a href=&#34;http://www.blogger.com/%3Ca%20href=%22http://www.amazon.com/gp/product/1847196128/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;linkCode=as2&amp;amp;camp=217145&amp;amp;creative=399369&amp;amp;creativeASIN=1847196128%22%3EOracle%20Coherence%203.5%3C/a%3E%3Cimg%20src=%22http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=1847196128&amp;amp;camp=217145&amp;amp;creative=399369%22%20width=%221%22%20height=%221%22%20border=%220%22%20alt=%22%22%20style=%22border:none%20!important;%20margin:0px%20!important;%22%20/%3E&#34;&gt;Oracle Coherence 3.5&lt;/a&gt;, I&amp;rsquo;ve decided I need to read &lt;a href=&#34;http://www.blogger.com/%3Ca%20href=%22http://www.amazon.com/gp/product/1456438786/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;linkCode=as2&amp;amp;camp=217145&amp;amp;creative=399373&amp;amp;creativeASIN=1456438786%22%3EBeautiful%20Software%3C/a%3E%3Cimg%20src=%22http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=1456438786&amp;amp;camp=217145&amp;amp;creative=399373%22%20width=%221%22%20height=%221%22%20border=%220%22%20alt=%22%22%20style=%22border:none%20!important;%20margin:0px%20!important;%22%20/%3E&#34;&gt;Beautiful Software&lt;/a&gt;, which Ged quoted at the end of the talk.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;a href=&#34;http://vanillajava.blogspot.com/&#34;&gt;Peter Lawrey&lt;/a&gt; on&amp;nbsp;Common Java Misconceptions&lt;/b&gt; - A session which plays well with what we&amp;rsquo;re trying to preach when we talk about &lt;a href=&#34;http://gotocon.com/amsterdam-2011/presentation/Tackling%20the%20folklore%20surrounding%20high%20performance%20computing&#34;&gt;Tackling Folklore&lt;/a&gt;. &amp;nbsp;He covered a few topics that are assumed to be &amp;ldquo;truth&amp;rdquo;. &amp;nbsp;For example, dealing with garbage collection is not a &lt;i&gt;mandatory&lt;/i&gt; part of writing Java - you could write GC-friendly code for a start. &amp;nbsp;Also it&amp;rsquo;s naive to assume the JDK is written in an efficient way, anyone who&amp;rsquo;s actually dug around it for a while will realise that newer, more efficient methods of programming have not been applied to all areas of the (massive) existing code base. &amp;nbsp;I think it&amp;rsquo;s great to have people out there talking about this stuff, it&amp;rsquo;s too easy to make assumptions and take things for granted. &amp;nbsp;The most important thing he said: &amp;ldquo;If you&amp;rsquo;re told something, don&amp;rsquo;t just believe it - test it yourself first&amp;rdquo;.&lt;/ul&gt;All of us (me, Mike and the lightning talk presenters) got such a great response it has encouraged us at the LJC to try and push for more real developers presenting their experiences. &amp;nbsp;We have a lot of great presentations from vendors, but what&amp;rsquo;s more applicable to Java guys and girls across the board is other developers sharing the problems they&amp;rsquo;re trying to solve and how they go about that process.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m very much looking forward to presenting this again at JAX. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disruptor 2.0 - All Change Please</title>
      <link>http://trishagee.github.io/post/disruptor_20__all_change_please</link>
      <pubDate>Tue, 30 Aug 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/disruptor_20__all_change_please</guid>
      <description>&lt;p&gt;Martin recently &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/08/disruptor-20-released.html&#34;&gt;announced version 2.0&lt;/a&gt; of &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;the Disruptor&lt;/a&gt;&amp;nbsp;- basically there have been so many changes since we first open-sourced it that it&amp;rsquo;s time to mark that officially. &amp;nbsp;His post goes over all the changes, the aim of this article is to attempt to translate my previous blog posts into new-world-speak, since it&amp;rsquo;s going to take a long time to re-write each of them all over again.  Now I see the disadvantage of hand-drawing everything.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;In the old world&lt;/b&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-R3vHFiqPCPo/TlvTk9cQEvI/AAAAAAAAIKA/1-o7vhoxGnQ/s1600/1P3C-Diamond-RingBuffer.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;356&#34; src=&#34;http://1.bp.blogspot.com/-R3vHFiqPCPo/TlvTk9cQEvI/AAAAAAAAIKA/1-o7vhoxGnQ/s640/1P3C-Diamond-RingBuffer.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This is an example of a configuration of the Disruptor (specifically a diamond configuration). &amp;nbsp;If none of this means anything to you, feel free to go back and refresh yourself on all the (now outdated) &lt;a href=&#34;http://mechanitis.blogspot.com/search/label/disruptor&#34;&gt;Disruptor details&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The most obvious changes over the last few weeks have been:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Updated naming convention&lt;/li&gt;&lt;li&gt;Integrating the producer barrier into the ring buffer&lt;/li&gt;&lt;li&gt;Adding the &lt;a href=&#34;http://www.symphonious.net/2011/07/11/lmax-disruptor-high-performance-low-latency-and-simple-too/&#34;&gt;Disruptor wizard&lt;/a&gt; into the main code base.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;b&gt;The New World Order&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-4aCmflSb7Fs/TlvZ5z8BesI/AAAAAAAAIKE/kAXR_7Ly5FI/s1600/NewWorldOrder.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;219&#34; src=&#34;http://2.bp.blogspot.com/-4aCmflSb7Fs/TlvZ5z8BesI/AAAAAAAAIKE/kAXR_7Ly5FI/s640/NewWorldOrder.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You&amp;rsquo;ll see the fundamentals are pretty much the same. &amp;nbsp;It&amp;rsquo;s simpler, because the &lt;code&gt;ProducerBarrier&lt;/code&gt; is no longer an entity in its own right - its replacement is the &lt;code&gt;PublishPort&lt;/code&gt; interface, which is implemented by the &lt;code&gt;RingBuffer&lt;/code&gt; itself.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Similarly the name &lt;code&gt;DependencyBarrier&lt;/code&gt; instead of &lt;code&gt;ConsumerBarrier&lt;/code&gt; clarifies the job of this object; &lt;code&gt;Publisher&lt;/code&gt; (instead of &lt;code&gt;Producer&lt;/code&gt;) and &lt;code&gt;EventProcessor&lt;/code&gt; instead of &lt;code&gt;Consumer&lt;/code&gt; also more accurately represent what these things do. &amp;nbsp;There was always a little confusion over the name &lt;code&gt;Consumer&lt;/code&gt;, since consumers never actually consumed anything from the ring buffer.  It was simply a term that we hoped would make sense to those who were used to queue implementations.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Not shown on the diagram is the name change of the items in the &lt;code&gt;RingBuffer&lt;/code&gt; - in the old world, we called this &lt;code&gt;Entry&lt;/code&gt;, now they&amp;rsquo;re an &lt;code&gt;Event&lt;/code&gt;, hence &lt;code&gt;EventProcessor&lt;/code&gt; at the other end.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The aim of this wholesale rename has not been to completely discredit all my old blogs so I can continue blogging about the Disruptor &lt;i&gt;ad infinitum&lt;/i&gt;. This is far from what I want - I have other, more fluffy, things to write about. &amp;nbsp;The aim of the rename is to make it easier to understand how the Disruptor works and how to use it. Although &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;we&lt;/a&gt; use the Disruptor for event processing, when we open sourced it we wanted it to look like a general purpose solution, so the naming convention tried to represent that. &amp;nbsp;But in fact the event processing model does seem more intuitive.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;No more tedious wiring&lt;/b&gt;&lt;br /&gt;Now the &lt;a href=&#34;http://www.symphonious.net/2011/08/13/the-disruptor-wizard-is-dead-long-live-the-disruptor-wizard/&#34;&gt;Disruptor wizard is part of the Disruptor&lt;/a&gt; itself, my whole &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;post on wiring&lt;/a&gt; is pretty pointless - which is good, actually, because it was a little involved.&lt;br /&gt;&lt;br /&gt;These days, if you want to create the diamond pattern (for example the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/perf/com/lmax/disruptor/DiamondPath1P3CPerfTest.java?r=294&#34;&gt;FizzBuzz&lt;/a&gt; performance test), it&amp;rsquo;s a lot simpler:&lt;/div&gt;&lt;div&gt;&lt;blockquote&gt;&lt;pre&gt;DisruptorWizard dw = new DisruptorWizard&amp;lt;FizzBuzzEvent&amp;gt;(&lt;br /&gt;                         ENTRY_FACTORY, &lt;br /&gt;                         RING_BUFFER_SIZE, &lt;br /&gt;                         EXECUTOR,&lt;br /&gt;                         ClaimStrategy.Option.SINGLE_THREADED,&lt;br /&gt;                         WaitStrategy.Option.YIELDING);&lt;br /&gt;FizzBuzzEventHandler fizzHandler = &lt;br /&gt;                         new FizzBuzzEventHandler(FIZZ);&lt;br /&gt;FizzBuzzEventHandler buzzHandler = &lt;br /&gt;                         new FizzBuzzEventHandler(BUZZ);&lt;br /&gt;FizzBuzzEventHandler fizzBuzzHandler = &lt;br /&gt;                         new FizzBuzzEventHandler(FIZZ_BUZZ);&lt;br /&gt;&lt;br /&gt;dw.handleEventsWith(fizzHandler, buzzHandler)&lt;br /&gt;  .then(fizzBuzzHandler);&lt;br /&gt;&lt;br /&gt;RingBuffer ringBuffer = dw.start();&lt;br /&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;Note there is a &lt;a href=&#34;http://code.google.com/p/disruptor/wiki/DisruptorWizard&#34;&gt;Wiki page&lt;/a&gt; on the Disruptor Wizard.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Other changes: performance improvements&lt;/b&gt;&lt;br /&gt;As Martin mentions in &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/08/disruptor-20-released.html&#34;&gt;his post&lt;/a&gt;, he&amp;rsquo;s managed to significantly improve the performance (even more!) of the Disruptor in 2.0. &lt;br /&gt;&lt;br /&gt;The short version of this is that there is a shiny new class,&amp;nbsp;&lt;code&gt;Sequence&lt;/code&gt;, which both takes care of the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast_22.html&#34;&gt;cache line padding&lt;/a&gt;, and removes the need for &lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/dissecting-disruptor-why-its-so-fast.html&#34;&gt;memory barriers&lt;/a&gt;. &amp;nbsp;The cache line padding is now done slightly differently because, bless Java 7&amp;rsquo;s little cotton socks, it managed to &amp;ldquo;optimise&amp;rdquo; our old technique away.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;ll leave you to read the details over there, in this post I just wanted to give a quick summary of the changes and explain why my old diagrams may no longer be correct.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Demystifying Memory Barriers</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers</link>
      <pubDate>Sun, 07 Aug 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers</guid>
      <description>&lt;p&gt;My recent slow-down in posting is because I&amp;rsquo;ve been trying to write a post explaining &lt;a href=&#34;http://en.wikipedia.org/wiki/Memory_barrier&#34;&gt;memory barriers&lt;/a&gt; and their applicability in &lt;a href=&#34;http://code.google.com/p/disruptor&#34;&gt;the Disruptor&lt;/a&gt;.  The problem is, no matter how much I read and no matter how many times I ask the ever-patient &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&lt;/a&gt; and &lt;a href=&#34;http://mikes-tech.blogspot.com/&#34;&gt;Mike&lt;/a&gt; questions trying to clarify some point, I just don&amp;rsquo;t intuitively grasp the subject.  I guess I don&amp;rsquo;t have the deep background knowledge required to fully understand.&lt;br /&gt;&lt;br /&gt;So, rather than make an idiot of myself trying to explain something I don&amp;rsquo;t really get, I&amp;rsquo;m going to try and cover, at an abstract / massive-simplification level, what I do understand in the area. &amp;nbsp;Martin has written a post&amp;nbsp;&lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html&#34;&gt;going into memory barriers&lt;/a&gt;&amp;nbsp;in some detail, so hopefully I can get away with skimming the subject.&lt;br /&gt;&lt;br /&gt;Disclaimer: any errors in the explanation are completely my own, and no reflection on the implementation of the Disruptor or on the &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX &lt;/a&gt;guys who actually do know about this stuff.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s the point?&lt;/b&gt;&lt;br /&gt;My main aim in this series of blog posts is to explain how the Disruptor works and, to a slightly lesser extent, why.  In theory I should be able to provide a bridge between the code and &lt;a href=&#34;http://disruptor.googlecode.com/files/Disruptor-1.0.pdf&#34;&gt;the technical paper&lt;/a&gt; by talking about it from the point of view of a developer who might want to use it.&lt;br /&gt;&lt;br /&gt;The paper mentioned memory barriers, and I wanted to understand what they were, and how they apply.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s a Memory Barrier?&lt;/b&gt;&lt;br /&gt;It&amp;rsquo;s a CPU instruction. &amp;nbsp;Yes, once again, we&amp;rsquo;re thinking about CPU-level stuff in order to get the performance we need (Martin&amp;rsquo;s famous Mechanical Sympathy). &amp;nbsp;Basically it&amp;rsquo;s an instruction to a) ensure the order in which certain operations are executed and b) influence visibility of some data (which might be the result of executing some instruction).&lt;br /&gt;&lt;br /&gt;Compilers and CPUs can re-order instructions, provided the end result is the same, to try and optimise performance. &amp;nbsp;Inserting a memory barrier tells the CPU and the compiler that what happened before that command needs to stay before that command, and what happens after needs to stay after. &amp;nbsp;All similarities to a trip to Vegas are entirely in your own mind.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-wae8jx9Ehuw/Tjg5oFT5M7I/AAAAAAAAIJI/J00e1Fy42DU/s1600/MemoryBarrier.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-wae8jx9Ehuw/Tjg5oFT5M7I/AAAAAAAAIJI/J00e1Fy42DU/s1600/MemoryBarrier.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The other thing a memory barrier does is force an update of the various CPU caches - for example, a write barrier will flush all the data that was written before the barrier out to cache, therefore any other thread that tries to read that data will get the most up-to-date version regardless of which core or which socket it might be executing by.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s this got to do with Java?&lt;/b&gt;&lt;br /&gt;Now I know what you&amp;rsquo;re thinking - this isn&amp;rsquo;t assembler. &amp;nbsp;It&amp;rsquo;s Java. &lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The magic incantation here is the word&amp;nbsp;&lt;code&gt;volatile&lt;/code&gt;&amp;nbsp;(something I felt was never clearly explained in the Java certification). &amp;nbsp;If your field is&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: monospace;&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;, the Java Memory Model inserts a write barrier instruction after you write to it, and a read barrier instruction before you read from it.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-mdQ0VfzF_XM/TjhOOM4PBEI/AAAAAAAAIJQ/K25fNMkKufU/s1600/MemoryBarrierWrite.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-mdQ0VfzF_XM/TjhOOM4PBEI/AAAAAAAAIJQ/K25fNMkKufU/s1600/MemoryBarrierWrite.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;/span&gt;&lt;br /&gt;This means if you write to a volatile field, you know that:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Any thread accessing that field after the point at which you wrote to it will get the updated value&amp;nbsp;&lt;/li&gt;&lt;li&gt;Anything you did before you wrote that field is guaranteed to have happened and any updated data values will also be visible, because the memory barrier flushed all earlier writes to the cache.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;b&gt;Example please!&lt;/b&gt;&lt;/div&gt;&lt;div&gt;So glad you asked. &amp;nbsp;It&amp;rsquo;s about time I started drawing doughnuts again.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;RingBuffer&lt;/a&gt;&amp;nbsp;&lt;code&gt;cursor&lt;/code&gt; is one of these magic volatile thingies, and it&amp;rsquo;s one of the reasons we can get away with implementing the Disruptor without locking.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-_JxCXwReRgA/TjhGfFrokHI/AAAAAAAAIJM/i_VC0M_K5hw/s1600/BarriersWriteExample.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;226&#34; src=&#34;http://2.bp.blogspot.com/-_JxCXwReRgA/TjhGfFrokHI/AAAAAAAAIJM/i_VC0M_K5hw/s400/BarriersWriteExample.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The Producer will obtain the next &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/AbstractEntry.java?spec=svn109&amp;amp;r=201&#34;&gt;Entry&lt;/a&gt; (or batch of them) and do whatever it needs to do to the entries, updating them with whatever values it wants to place in there. &amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;As you know&lt;/a&gt;, at the end of all the changes the producer calls the commit method on the ring buffer, which updates the sequence number. &amp;nbsp;This write of the volatile field (&lt;code&gt;cursor&lt;/code&gt;) creates a memory barrier which ultimately brings all the caches up to date (or at least invalidates them accordingly). &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At this point, the consumers can get the updated sequence number (8), and because the memory barrier also guarantees the ordering of the instructions that happened before then, the consumers can be confident that all changes the producer did to to the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/AbstractEntry.java?spec=svn109&amp;amp;r=201&#34;&gt;Entry&lt;/a&gt; at position 7 are also available.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&amp;hellip;and on the Consumer side?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;The sequence number on the Consumer is volatile, and read by a number of external objects - other &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;downstream&lt;/a&gt; consumers might be tracking this consumer&lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;,&lt;/a&gt;&amp;nbsp;and&amp;nbsp;the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/ProducerBarrier.java?spec=svn109&amp;amp;r=201&#34;&gt;ProducerBarrier&lt;/a&gt;/&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java?spec=svn109&amp;amp;r=242&#34;&gt;RingBuffer&lt;/a&gt; (depending on whether you&amp;rsquo;re looking at older or newer code) tracks it to make sure the the ring doesn&amp;rsquo;t wrap.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-qoKYeSC2_OM/Tj7HG5U6RaI/AAAAAAAAIJc/hnLVu3EL-kE/s1600/MemoryBarrierReadExample.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-qoKYeSC2_OM/Tj7HG5U6RaI/AAAAAAAAIJc/hnLVu3EL-kE/s1600/MemoryBarrierReadExample.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;So, if your downstream consumer (C2) sees that an earlier consumer (C1) reaches number 12, when C2 reads entries up to 12 from the ring buffer it will get all updates C1 made to the entries before it updated its sequence number.&lt;br /&gt;&lt;br /&gt;Basically everything that happens after C2 gets the updated sequence number (shown in blue above) must occur after everything C1 did to the ring buffer before updating its sequence number (shown in black).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Impact on performance&lt;/b&gt;&lt;br /&gt;Memory barriers, being another CPU-level instruction, don&amp;rsquo;t have the same &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html&#34;&gt;cost as locks&lt;/a&gt;&amp;nbsp; - the kernel isn&amp;rsquo;t interfering and arbitrating between multiple threads. &amp;nbsp;But&amp;nbsp;nothing comes for free. &amp;nbsp;Memory barriers do have a cost - the compiler/CPU cannot re-order instructions, which could potentially lead to not using the CPU as efficiently as possible, and refreshing the caches obviously has a performance impact. &amp;nbsp;So don&amp;rsquo;t think that using volatile instead of locking will get you away scot free.&lt;br /&gt;&lt;br /&gt;You&amp;rsquo;ll notice that the Disruptor implementation tries to read from and write to the sequence number as infrequently as possible. &amp;nbsp;Every read or write of a &lt;code&gt;volatile&lt;/code&gt; field is a relatively costly operation. However, recognising this also plays in quite nicely with batching behaviour - if you know you shouldn&amp;rsquo;t read from or write to the sequences too frequently, it makes sense to grab a whole batch of Entries and process them before updating the sequence number, both on the Producer and Consumer side. Here&amp;rsquo;s an example from &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/BatchConsumer.java?r=239&#34;&gt;BatchConsumer&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;table id=&#34;src_table_0&#34; style=&#34;-webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px; border-collapse: collapse; font-family: Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Lucida Console&#39;, monospace; font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; white-space: pre;&#34;&gt;&lt;tbody style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;tr id=&#34;sl_svn239_121&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_122&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;lit&#34; style=&#34;color: #006666;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_123&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;running&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_124&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_125&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_126&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_127&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; availableSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; consumerBarrier&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_128&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; availableSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_129&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_130&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; entry &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; consumerBarrier&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getEntry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_131&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; handler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;onAvailable&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_132&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;++;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_133&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_135&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; handler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;onEndOfBatch&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_136&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_137&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_138&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;color: #000088;&#34;&gt;&amp;hellip;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_142&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;typ&#34; style=&#34;color: #660066;&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; ex&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_143&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_144&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exceptionHandler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;ex&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_145&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_146&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;lit&#34; style=&#34;color: #006666;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_147&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_148&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;(You&amp;rsquo;ll note this is the &amp;ldquo;old&amp;rdquo; code and naming conventions, because this is inline with my previous blog posts, I thought it was slightly less confusing than switching straight to the new conventions).&lt;br /&gt;&lt;br /&gt;In the code above, we use a local variable to increment during our loop over the entries the consumer is processing. &amp;nbsp;This means we read from and write to the volatile sequence field (shown in bold) as infrequently as we can get away with.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;In Summary&lt;/b&gt;&lt;br /&gt;Memory barriers are CPU instructions that allow you to make certain assumptions about when data will be visible to other processes. &amp;nbsp;In Java, you implement them with the &lt;code&gt;volatile&lt;/code&gt; keyword. &amp;nbsp;Using volatile means you don&amp;rsquo;t necessarily have to add locks willy nilly, and will give you performance improvements over using them. &amp;nbsp;However you need to think a little more carefully about your design, in particular how frequently you use volatile fields, and how frequently you read and write them.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;PS Given that the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;New World Order&lt;/a&gt; in the Disruptor uses totally different naming conventions now to everything I&amp;rsquo;ve blogged about so far, I guess the next post is mapping the old world to the new one.&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part two) - Magic cache line padding</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding</link>
      <pubDate>Fri, 22 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding</guid>
      <description>&lt;p&gt;We mention the phrase Mechanical Sympathy quite a lot, in fact it&amp;rsquo;s even &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&amp;rsquo;s blog title&lt;/a&gt;. &amp;nbsp;It&amp;rsquo;s about understanding how the underlying hardware operates and programming in a way that works with that, not against it.&lt;br /&gt;&lt;br /&gt;We get a number of comments and questions about the mysterious cache line padding in the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;RingBuffer&lt;/a&gt;, and I referred to it in the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html&#34;&gt;last post&lt;/a&gt;. &amp;nbsp;Since this lends itself to pretty pictures, it&amp;rsquo;s the next thing I thought I would tackle.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Comp Sci 101&lt;/b&gt;&lt;br /&gt;One of the things I love about working at &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX&lt;/a&gt; is all that stuff I learnt at university and in my A Level Computing actually means something. &amp;nbsp;So often as a developer you can get away with not understanding the CPU, data structures or &lt;a href=&#34;http://en.wikipedia.org/wiki/Big_O_notation&#34;&gt;Big O notation&lt;/a&gt;&amp;nbsp;- I spent 10 years of my career forgetting all that. &amp;nbsp;But it turns out that if you do know about these things, and you apply that knowledge, you can come up with some very clever, very fast code.&lt;br /&gt;&lt;br /&gt;So, a refresher for those of us who studied this at school, and an intro for those who didn&amp;rsquo;t. &amp;nbsp;Beware - this post contains massive over-simplifications.&lt;br /&gt;&lt;br /&gt;The CPU is the heart of your machine and the thing that ultimately has to do all the operations, executing your program. &amp;nbsp;Main memory (RAM) is where your data (including the lines of your program) lives. &amp;nbsp;We&amp;rsquo;re going to ignore stuff like hard drives and networks here because &lt;a href=&#34;https://code.google.com/p/disruptor/&#34;&gt;the Disruptor&lt;/a&gt; is aimed at running as much as possible in memory.&lt;br /&gt;&lt;br /&gt;The CPU has several layers of cache between it and main memory, because even accessing main memory is too slow. &amp;nbsp;If you&amp;rsquo;re doing the same operation on a piece of data multiple times, it makes sense to load this into a place very close to the CPU when it&amp;rsquo;s performing the operation (think a loop counter - you don&amp;rsquo;t want to be going off to main memory to fetch this to increment it every time you loop around).&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-_rreUS6uUzs/TicrO8neu9I/AAAAAAAAIIs/1GVO_DbXcQo/s1600/CPUCache.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;http://1.bp.blogspot.com/-_rreUS6uUzs/TicrO8neu9I/AAAAAAAAIIs/1GVO_DbXcQo/s400/CPUCache.png&#34; width=&#34;298&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The closer the cache is to the CPU, the faster it is and the smaller it is. &amp;nbsp;L1 cache is small and very fast, and right next to the core that uses it. &amp;nbsp;L2 is bigger and slower, and still only used by a single core. &amp;nbsp;L3 is more common with modern multi-core machines, and is bigger again, slower again, and shared across cores on a single socket. &amp;nbsp;Finally you have main memory, which is shared across all cores and all sockets.&lt;br /&gt;&lt;br /&gt;When the CPU is performing an operation, it&amp;rsquo;s first going to look in L1 for the data it needs, then L2, then L3, and finally if it&amp;rsquo;s not in any of the caches the data needs to be fetched all the way from main memory. &amp;nbsp;The further it has to go, the longer the operation will take. &amp;nbsp;So if you&amp;rsquo;re doing something very frequently, you want to make sure that data is in L1 cache.&lt;br /&gt;&lt;br /&gt;Martin and Mike&amp;rsquo;s &lt;a href=&#34;http://www.infoq.com/presentations/LMAX&#34;&gt;QCon presentation&lt;/a&gt; gives some indicative figures for the cost of cache misses:&lt;br /&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&#34;text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;i&gt;Latency from CPU to&amp;hellip;&lt;/i&gt;&lt;/td&gt;&lt;td style=&#34;padding-left: 5px; padding-right: 5px;&#34;&gt;&lt;i&gt;Approx. number of&lt;br /&gt;CPU cycles&lt;/i&gt;&lt;/td&gt;&lt;td style=&#34;padding-left: 5px; padding-right: 5px;&#34;&gt;&lt;i&gt;Approx. time &lt;br /&gt;in nanoseconds&lt;/i&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Main memory&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;~60-80ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;QPI transit&lt;br /&gt;(between sockets, not drawn)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;~20ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L3 cache&lt;/td&gt;&lt;td&gt;~40-45 cycles, &lt;/td&gt;&lt;td&gt;~15ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L2 cache&lt;/td&gt;&lt;td&gt;~10 cycles, &lt;/td&gt;&lt;td&gt;~3ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L1 cache&lt;/td&gt;&lt;td&gt;~3-4 cycles,&lt;/td&gt;&lt;td&gt;~1ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Register&lt;/td&gt;&lt;td&gt;1 cycle&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;If you&amp;rsquo;re aiming for an end-to-end latency of something like 10 milliseconds, an 80 nanosecond trip to main memory to get some missing data is going to take a serious chunk of that.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Cache lines&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Now the interesting thing to note is that it&amp;rsquo;s not individual items that get stored in the cache - i.e. it&amp;rsquo;s not a single variable, a single pointer. &amp;nbsp;The cache is made up of cache lines, typically 64 bytes, and it effectively references a location in main memory. &amp;nbsp;A Java &lt;code&gt;long&lt;/code&gt; is 8 bytes, so in a single cache line you could have 8 &lt;code&gt;long&lt;/code&gt; variables.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/--A4eyU2Joec/TicxZW-yQoI/AAAAAAAAIIw/E40PtQOzMfE/s1600/CacheLines.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;301&#34; src=&#34;http://4.bp.blogspot.com/--A4eyU2Joec/TicxZW-yQoI/AAAAAAAAIIw/E40PtQOzMfE/s400/CacheLines.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;(I&amp;rsquo;m going to ignore the multiple cache-levels for simplicity)&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;This is brilliant if you&amp;rsquo;re accessing an array of longs - when one value from the array gets loaded into the cache, you get up to 7 more for free. &amp;nbsp;So you can walk that array very quickly. &amp;nbsp;In fact, you can iterate over any data structure that is allocated to contiguous blocks in memory very quickly. &amp;nbsp;I made a passing reference to this in the very &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-whats-so-special.html&#34;&gt;first post about the ring buffer&lt;/a&gt;, and it explains why we use an array for it.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So if items in your data structure aren&amp;rsquo;t sat next to each other in memory (linked lists, I&amp;rsquo;m looking at you) you don&amp;rsquo;t get the advantage of freebie cache loading. &amp;nbsp;You could be getting a cache miss for every item in that data structure.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;However, there is a drawback to all this free loading. &amp;nbsp;Imagine your &lt;code&gt;long&lt;/code&gt; isn&amp;rsquo;t part of an array. &amp;nbsp;Imagine it&amp;rsquo;s just a single variable. &amp;nbsp;Let&amp;rsquo;s call it &lt;code&gt;head&lt;/code&gt;, for no real reason. &amp;nbsp;Then imagine you have another variable in your class right next to it. &amp;nbsp;Let&amp;rsquo;s arbitrarily call it &lt;code&gt;tail&lt;/code&gt;. &amp;nbsp;Now, when you load &lt;code&gt;head&lt;/code&gt; into your cache, you get &lt;code&gt;tail&lt;/code&gt; for free. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-4mwTYGoo99U/Tic141EFSgI/AAAAAAAAII0/Q2Y18D38iN0/s1600/FalseSharing.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;http://3.bp.blogspot.com/-4mwTYGoo99U/Tic141EFSgI/AAAAAAAAII0/Q2Y18D38iN0/s400/FalseSharing.png&#34; width=&#34;358&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Which sounds fine. &amp;nbsp;Until you realise that &lt;code&gt;tail&lt;/code&gt; is being written to by your producer, and &lt;code&gt;head&lt;/code&gt; is being written to by your consumer. &amp;nbsp;These two variables aren&amp;rsquo;t actually closely associated, and in fact are going to be used by two different threads that might be running on two different cores.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-ORwRPsgwzVI/Tic4MDC9SHI/AAAAAAAAII4/1bBv6awjOj0/s1600/FalseSharingWriteHead.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;375&#34; src=&#34;http://4.bp.blogspot.com/-ORwRPsgwzVI/Tic4MDC9SHI/AAAAAAAAII4/1bBv6awjOj0/s400/FalseSharingWriteHead.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Imagine your consumer updates the value of &lt;code&gt;head&lt;/code&gt;. &amp;nbsp;The cache value is updated, the value in memory is updated, and any other cache lines that contain head are invalidated because other caches will not have the shiny new value. &amp;nbsp;And remember that we deal with the level of the whole line, we can&amp;rsquo;t just mark &lt;code&gt;head&lt;/code&gt; as being invalid.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-jPntzX3pGao/Tic6xdP9uXI/AAAAAAAAII8/THPUBZrvgX8/s1600/FalseSharingReadTail.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;385&#34; src=&#34;http://4.bp.blogspot.com/-jPntzX3pGao/Tic6xdP9uXI/AAAAAAAAII8/THPUBZrvgX8/s400/FalseSharingReadTail.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Now if some process running on the other core just wants to read the value of &lt;code&gt;tail&lt;/code&gt;, the whole cache line needs to be re-read from main memory. &amp;nbsp;So a thread which is nothing to do with your consumer is reading a value which is nothing to do with &lt;code&gt;head&lt;/code&gt;, and it&amp;rsquo;s slowed down by a cache miss.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Of course this is even worse if two separate threads are writing to the two different values.  Both cores are going to be invalidating the cache line on the other core and having to re-read it every time the other thread has written to it.  You&amp;rsquo;ve basically got write-contention between the two threads even though they&amp;rsquo;re writing to two different variables.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;This is called &lt;a href=&#34;http://en.wikipedia.org/wiki/False_sharing&#34;&gt;false sharing&lt;/a&gt;, because every time you access &lt;code&gt;head&lt;/code&gt; you get &lt;code&gt;tail&lt;/code&gt; too, and every time you access &lt;code&gt;tail&lt;/code&gt;, you get &lt;code&gt;head&lt;/code&gt; as well. &amp;nbsp;All this is happening under the covers, and no compiler warning is going to tell you that you just wrote code that&amp;rsquo;s going to be very inefficient for concurrent access.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;b&gt;Our solution - magic cache line padding&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;You&amp;rsquo;ll see that the Disruptor eliminates this problem, at least for architecture that has a cache size of 64 bytes or less, by adding padding to ensure the ring buffer&amp;rsquo;s sequence number is never in a cache line with anything else.&lt;/div&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;-webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px; border-collapse: collapse; font-family: Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Lucida Console&#39;, monospace; font-size: 12px; white-space: pre;&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;table id=&#34;src_table_0&#34; style=&#34;border-collapse: collapse; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: left;&#34;&gt;&lt;tbody style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;tr id=&#34;sl_svn234_33&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;    public&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p2&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p3&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p4&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p5&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p6&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p7&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;com&#34; style=&#34;color: #880000;&#34;&gt;// cache line padding&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn234_34&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; cursor &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; INITIAL_CURSOR_VALUE&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn234_35&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p8&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p9&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p10&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p11&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p12&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p13&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p14&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;com&#34; style=&#34;color: #880000;&#34;&gt;// cache line padding&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So there&amp;rsquo;s no false sharing, no unintended contention with any other variables, no needless cache misses.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;It&amp;rsquo;s worth doing this on your &lt;code&gt;Entry&lt;/code&gt; classes too - if you have different consumers writing to different fields, you&amp;rsquo;re going to need to make sure there&amp;rsquo;s no false sharing between each of the fields.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;EDIT: Martin wrote a more technically correct and detailed &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html&#34;&gt;post about false sharing&lt;/a&gt;, and posted performance results too.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part one) - Locks Are Bad</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad</link>
      <pubDate>Sat, 16 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad</guid>
      <description>&lt;p&gt;Martin Fowler has written a &lt;a href=&#34;http://martinfowler.com/articles/lmax.html&#34;&gt;&lt;span id=&#34;goog_1736243820&#34;&gt;&lt;/span&gt;really good article&lt;span id=&#34;goog_1736243821&#34;&gt;&lt;/span&gt;&lt;/a&gt; describing not only &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;the Disruptor&lt;/a&gt;, but also how it fits into the architecture at &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX&lt;/a&gt;. &amp;nbsp;This gives some of the context that has been missing so far, but the most frequently asked question is still &amp;ldquo;What is the Disruptor?&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m working up to answering that. &amp;nbsp;I&amp;rsquo;m currently on question number two: &amp;ldquo;Why is it so fast?&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;These questions do go hand in hand, however, because I can&amp;rsquo;t talk about why it&amp;rsquo;s fast without saying what it does, and I can&amp;rsquo;t talk about what it is without saying why it is that way.&lt;br /&gt;&lt;br /&gt;So I&amp;rsquo;m trapped in a circular dependency. &amp;nbsp;A circular dependency of blogging.&lt;br /&gt;&lt;br /&gt;To break the dependency, I&amp;rsquo;m going to answer question one with the simplest answer, and with any luck I&amp;rsquo;ll come back to it in a later post if it still needs explanation:&amp;nbsp;the Disruptor is a way to pass information between threads.&lt;br /&gt;&lt;br /&gt;As a developer, already my alarm bells are going off because the word &amp;ldquo;thread&amp;rdquo; was just mentioned, which means this is about concurrency, and Concurrency Is Hard.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Concurrency 101&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-jFd0nHVAUzA/Th6pstBr8rI/AAAAAAAAIH4/_eCHINrgH50/s1600/ThreadContention.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;231&#34; src=&#34;http://3.bp.blogspot.com/-jFd0nHVAUzA/Th6pstBr8rI/AAAAAAAAIH4/_eCHINrgH50/s400/ThreadContention.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Imagine two threads are trying to change the same value. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;Case One:&lt;/i&gt; Thread 1 gets there first:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;The value changes to &amp;ldquo;blah&amp;rdquo;&lt;/li&gt;&lt;li&gt;Then the value changes to &amp;ldquo;blahy&amp;rdquo; when Thread 2 gets there.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;i&gt;Case Two:&lt;/i&gt; Thread 2 gets there first:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;The value changes to &amp;ldquo;fluffy&amp;rdquo;&lt;/li&gt;&lt;li&gt;Then the value changes to &amp;ldquo;blah&amp;rdquo; when Thread 1 gets there.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;i&gt;Case Three:&lt;/i&gt; Thread 1 interrupts Thread 2:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Thread 2 gets the value &amp;ldquo;fluff&amp;rdquo; and stores it as &lt;code&gt;myValue&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Thread 1 goes in and updates value to &amp;ldquo;blah&amp;rdquo;&lt;/li&gt;&lt;li&gt;Then Thread 2 wakes up and sets the value to &amp;ldquo;fluffy&amp;rdquo;.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Case Three is probably the only one which is definitely wrong, unless you think the naive approach to wiki editing is OK (&lt;a href=&#34;http://code.google.com/&#34;&gt;Google Code&lt;/a&gt; Wiki, I&amp;rsquo;m looking at you&amp;hellip;). &amp;nbsp;In the other two cases it&amp;rsquo;s all about intentions and predictability. &amp;nbsp;Thread 2 might not care what&amp;rsquo;s in &lt;code&gt;value&lt;/code&gt;, the intention might be to append &amp;ldquo;y&amp;rdquo; to whatever is in there regardless. &amp;nbsp;In this circumstance, cases one and two are both correct.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;But if Thread 2 only wanted to change &amp;ldquo;fluff&amp;rdquo; to &amp;ldquo;fluffy&amp;rdquo;, then both cases two and three are incorrect.&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Assuming that Thread 2 wants to set the value to &amp;ldquo;fluffy&amp;rdquo;, there are some different approaches to solving the problem.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Approach One: Pessimistic locking&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-2A7ebRJ1z5g/Th6t4t2AO8I/AAAAAAAAIH8/gAYXlVq86-s/s1600/ConcurrencyPessimisticLocking.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;257&#34; src=&#34;http://4.bp.blogspot.com/-2A7ebRJ1z5g/Th6t4t2AO8I/AAAAAAAAIH8/gAYXlVq86-s/s400/ConcurrencyPessimisticLocking.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;(Does the &amp;ldquo;No Entry&amp;rdquo; sign make sense to people who don&amp;rsquo;t drive in Britain?)&lt;br /&gt;&lt;br /&gt;The terms pessimistic and optimistic locking seem to be more commonly used when talking about database reads and writes, but the principal applies to getting a lock on an object.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Thread 2 grabs a lock on &lt;code&gt;Entry&lt;/code&gt; as soon as it knows it needs it and stops anything from setting it. Then it does its thing, sets the value, and lets everything else carry on.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;You can imagine this gets quite expensive, with threads hanging around all over the place trying to get hold of objects and being blocked. &amp;nbsp;The more threads you have, the more chance that things are going to grind to a halt.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Approach Two: Optimistic locking&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-MC3Zia0u-LI/TiGrA4AEKKI/AAAAAAAAIIo/7q-x9sSJYR4/s1600/ConcurrencyOptimisticLocking.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;252&#34; src=&#34;http://2.bp.blogspot.com/-MC3Zia0u-LI/TiGrA4AEKKI/AAAAAAAAIIo/7q-x9sSJYR4/s400/ConcurrencyOptimisticLocking.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;In this case Thread 2 will only lock &lt;code&gt;Entry&lt;/code&gt; when it needs to write to it. &amp;nbsp;In order to make this work, it needs to check if &lt;code&gt;Entry&lt;/code&gt; has changed since it first looked at it. &amp;nbsp;If Thread 1 came in and changed the value to &amp;ldquo;blah&amp;rdquo; after Thread 2 had read the value, Thread 2 couldn&amp;rsquo;t write &amp;ldquo;fluffy&amp;rdquo; to the &lt;code&gt;Entry&lt;/code&gt; and trample all over the change from Thread 1. &amp;nbsp;Thread 2 could either re-try (go back, read the value, and append &amp;ldquo;y&amp;rdquo; onto the end of the new value), which you would do if Thread 2 didn&amp;rsquo;t care what the value it was changing was; or it could throw an exception or return some sort of failed update flag if it was expecting to change &amp;ldquo;fluff&amp;rdquo; to &amp;ldquo;fluffy&amp;rdquo;. &amp;nbsp;An example of this latter case might be if you have two users trying to update a Wiki page, and you tell the user on the other end of Thread 2 they&amp;rsquo;ll need to load the new changes from Thread 1 and then reapply their changes.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Potential Problem: Deadlock&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Locking can lead to all sorts of issues, for example deadlock. &amp;nbsp;Imagine two threads that need access to two resources to do whatever they need to do:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-sDyHhoLnwxw/Th60id1KUEI/AAAAAAAAIIE/_ru21J5fklI/s1600/ConcurrencyDeadlock.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;240&#34; src=&#34;http://2.bp.blogspot.com/-sDyHhoLnwxw/Th60id1KUEI/AAAAAAAAIIE/_ru21J5fklI/s400/ConcurrencyDeadlock.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;If you&amp;rsquo;ve used an over-zealous locking technique, both threads are going to sit there forever waiting for the other one to release its lock on the resource. &amp;nbsp;That&amp;rsquo;s when you reboot &lt;strike&gt;Windows&lt;/strike&gt; your computer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Definite Problem: Locks are sloooow&amp;hellip;&lt;/b&gt;&lt;br /&gt;The thing about locks is that they need the operating system to arbitrate the argument. &amp;nbsp;The threads are like siblings squabbling over a toy, and the OS kernel is the parent that decides which one gets it. It&amp;rsquo;s like when you run to your Dad to tell him your sister has nicked the &lt;a href=&#34;http://www.amazon.com/Transformers-Power-Bots-Optimus-Prime/dp/B003A6CK0O?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;link_code=btl&amp;amp;camp=213689&amp;amp;creative=392969&#34; target=&#34;_blank&#34;&gt;Transformer&lt;/a&gt;&lt;img alt=&#34;&#34; border=&#34;0&#34; height=&#34;1&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=btl&amp;amp;camp=213689&amp;amp;creative=392969&amp;amp;o=1&amp;amp;a=B003A6CK0O&#34; style=&#34;border: none !important; margin: 0px !important; padding: 0px !important;&#34; width=&#34;1&#34; /&gt; when you wanted to play with it - he&amp;rsquo;s got bigger things to worry about than you two fighting, and he might finish off loading the dishwasher and putting on the laundry before settling the argument. &amp;nbsp;If you draw attention to yourself with a lock, not only does it take time to get the operating system to arbitrate, the OS might decide the CPU has better things to do than servicing your thread.&lt;br /&gt;&lt;br /&gt;The Disruptor paper talks about an experiment we did. &amp;nbsp;The test calls a function incrementing a 64-bit counter in a loop 500 million times. &amp;nbsp;For a single thread with no locking, the test takes 300ms. &amp;nbsp;If you add a lock (and this is for a single thread, no contention, and no additional complexity other than the lock) the test takes&amp;nbsp;10,000ms. &amp;nbsp;That&amp;rsquo;s, like, two orders of magnitude slower. &amp;nbsp;Even more astounding, if you add a second thread (which logic suggests should take maybe half the time of the single thread with a lock) it takes&amp;nbsp;224,000ms. &amp;nbsp;Incrementing a counter 500 million times takes nearly a &lt;i&gt;thousand &lt;/i&gt;times longer when you split it over two threads instead of running it on one with no lock.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Concurrency Is Hard and Locks Are Bad&lt;/b&gt;&lt;br /&gt;I&amp;rsquo;m just touching the surface of the problem, and obviously I&amp;rsquo;m using very simple examples. &amp;nbsp;But the point is, if your code is meant to work in a multi-threaded environment, your job as a developer just got a lot more difficult:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Naive code can have unintended consequences.&lt;/b&gt;&amp;nbsp; Case Three above is an example of how things can go horribly wrong if you don&amp;rsquo;t realise you have multiple threads accessing and writing to the same data.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Selfish code is going to slow your system down.&lt;/b&gt;&amp;nbsp; Using locks to protect your code from the problem in Case Three can lead to things like deadlock or simply poor performance.&lt;/li&gt;&lt;/ul&gt;This is why many organisations have some sort of concurrency problems in their interview process (certainly for Java interviews). &amp;nbsp;Unfortunately it&amp;rsquo;s very easy to learn how to answer the questions without really understanding the problem, or possible solutions to it.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How does the Disruptor address these issues?&lt;/b&gt;&lt;br /&gt;For a start, it doesn&amp;rsquo;t use locks. &amp;nbsp;At all.&lt;br /&gt;&lt;br /&gt;Instead, where we need to make sure that operations are thread-safe (specifically, updating the next available sequence number in the case of &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;multiple producers&lt;/a&gt;), we use a &lt;a href=&#34;http://en.wikipedia.org/wiki/Compare-and-swap&#34;&gt;CAS &lt;/a&gt;(Compare And Swap/Set) operation. &amp;nbsp;This is a CPU-level instruction, and in my mind it works a bit like optimistic locking - the CPU goes to update a value, but if the value it&amp;rsquo;s changing it from is not the one it expects, the operation fails because clearly something else got in there first.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-j7wPAJe3YuE/TiFBp0XCn6I/AAAAAAAAIIM/FrketUYEsFY/s1600/ConcurrencyCAS.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;170&#34; src=&#34;http://4.bp.blogspot.com/-j7wPAJe3YuE/TiFBp0XCn6I/AAAAAAAAIIM/FrketUYEsFY/s320/ConcurrencyCAS.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Note this could be two different cores rather than two separate CPUs.&lt;br /&gt;&lt;br /&gt;CAS operations are much cheaper than locks because they don&amp;rsquo;t involve the operating system, they go straight to the CPU. &amp;nbsp;But they&amp;rsquo;re not cost-free - in the experiment I mentioned above, where a lock-free thread takes 300ms and a thread with a lock takes 10,000ms, a single thread using CAS takes 5,700ms. &amp;nbsp;So it takes less time than using a lock, but more time than a single thread that doesn&amp;rsquo;t worry about contention at all.&lt;br /&gt;&lt;br /&gt;Back to the Disruptor - I talked about the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/ClaimStrategy.java&#34;&gt;ClaimStrategy&lt;/a&gt; when I &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;went over the producers&lt;/a&gt;. &amp;nbsp;In the code you&amp;rsquo;ll see two strategies, a &lt;code&gt;SingleThreadedStrategy&lt;/code&gt; and a &lt;code&gt;MultiThreadedStrategy&lt;/code&gt;. &amp;nbsp;You could argue, why not just use the multi-threaded one with only a single producer? &amp;nbsp;Surely it can handle that case? &amp;nbsp;And it can. &amp;nbsp;But the multi-threaded one uses an &lt;a href=&#34;http://download.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/AtomicLong.html&#34;&gt;AtomicLong&lt;/a&gt; (Java&amp;rsquo;s way of providing CAS operations), and the single-threaded one uses a simple long with no locks and no CAS. &amp;nbsp;This means the single-threaded claim strategy is as fast as possible, given that it knows there is only one producer and therefore no contention on the sequence number.&lt;br /&gt;&lt;br /&gt;I know what you&amp;rsquo;re thinking: turning one single number into an AtomicLong can&amp;rsquo;t possibly have been the only thing that is the secret to the Disruptor&amp;rsquo;s speed. And of course, it&amp;rsquo;s not - otherwise this wouldn&amp;rsquo;t be called &amp;ldquo;Why it&amp;rsquo;s so fast (part &lt;i&gt;one&lt;/i&gt;)&amp;ldquo;.&lt;br /&gt;&lt;br /&gt;But this is an important point - there&amp;rsquo;s only one place in the code where multiple threads might be trying to update the same value. &amp;nbsp;Only one place in the whole of this complicated data-structure-slash-framework. &amp;nbsp;And that&amp;rsquo;s the secret. &amp;nbsp;Remember everything has its own sequence number? &amp;nbsp;If you only have one producer then every sequence number in the system is only ever written to by one thread. That means there is no contention. &amp;nbsp;No need for locks. &amp;nbsp;No need even for CAS. &amp;nbsp;The only sequence number that is ever written to by more than one thread is the one on the &lt;code&gt;ClaimStrategy&lt;/code&gt; if there is more than one producer.&lt;br /&gt;&lt;br /&gt;This is also why each variable in the &lt;code&gt;Entry&lt;/code&gt; &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;can only be written to by one consumer&lt;/a&gt;. &amp;nbsp;It ensures there&amp;rsquo;s no write contention, therefore no need for locks or CAS.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Back to why queues aren&amp;rsquo;t up to the job&lt;/b&gt;&lt;br /&gt;So you start to see why queues, which may implemented as a ring buffer under the covers, still can&amp;rsquo;t match the performance of the Disruptor. &amp;nbsp;The queue, and the&amp;nbsp;&lt;a href=&#34;http://en.wikipedia.org/wiki/Circular_buffer&#34;&gt;basic ring buffer&lt;/a&gt;, only has two pointers - one to the front of the queue and one to the end:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-9yewqxZu37M/TiGdFiaCj6I/AAAAAAAAIIU/bF4fxONwB_8/s1600/QueueMultiple.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;130&#34; src=&#34;http://4.bp.blogspot.com/-9yewqxZu37M/TiGdFiaCj6I/AAAAAAAAIIU/bF4fxONwB_8/s400/QueueMultiple.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;If more than one producer wants to place something on the queue, the tail pointer will be a point of contention as more than one thing wants to write to it. &amp;nbsp;If there&amp;rsquo;s more than one consumer, then the head pointer is contended, because this is not just a read operation but a write, as the pointer is updated when the item is consumed from the queue.&lt;br /&gt;&lt;br /&gt;But wait, I hear you cry foul! &amp;nbsp;Because we already knew this, so queues are usually single producer and single consumer (or at least they are in all the queue comparisons in our performance tests).&lt;br /&gt;&lt;br /&gt;There&amp;rsquo;s another thing to bear in mind with queues/buffers. &amp;nbsp;The whole point is to provide a place for things to hang out between producers and consumers, to help buffer bursts of messages from one to the other. &amp;nbsp;This means the buffer is usually full (the producer is out-pacing the consumer) or empty (the consumer is out-pacing the producer). &amp;nbsp;It&amp;rsquo;s rare that the producer and consumer will be so evenly-matched that the buffer has items in it but the producers and consumers are keeping pace with each other.&lt;br /&gt;&lt;br /&gt;So this is how things really look. &amp;nbsp;An empty queue:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-_-lU_Ey7mi4/TiGmx5Ja2jI/AAAAAAAAIIg/gQOZ8f76mLM/s1600/QueueEmpty.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;173&#34; src=&#34;http://1.bp.blogspot.com/-_-lU_Ey7mi4/TiGmx5Ja2jI/AAAAAAAAIIg/gQOZ8f76mLM/s400/QueueEmpty.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;br /&gt;&amp;hellip;and a full queue:&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-ARPMAbYKnoE/TiGm4hgxeDI/AAAAAAAAIIk/xMl4ItVob2U/s1600/QueueFull.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;178&#34; src=&#34;http://3.bp.blogspot.com/-ARPMAbYKnoE/TiGm4hgxeDI/AAAAAAAAIIk/xMl4ItVob2U/s400/QueueFull.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;The queue needs a size so that it can tell the difference between empty and full. &amp;nbsp;Or, if it doesn&amp;rsquo;t, it might determine that based on the contents of that entry, in which case reading an entry will require a write to erase it or mark it as consumed. &lt;br /&gt;&lt;br /&gt;Whichever implementation is chosen, there&amp;rsquo;s quite a bit of contention around the tail, head and size variables, or the entry itself if a consume operation also includes a write to remove it.&lt;br /&gt;&lt;br /&gt;On top of this, these three variables are often in the same &lt;a href=&#34;http://en.wikipedia.org/wiki/CPU_cache&#34;&gt;cache line&lt;/a&gt;, leading to &lt;a href=&#34;http://en.wikipedia.org/wiki/False_sharing&#34;&gt;false sharing&lt;/a&gt;. &amp;nbsp;So, not only do you have to worry about the producer and the consumer both causing a write to the size variable (or the entry), updating the tail pointer could lead to a cache-miss when the head pointer is updated because they&amp;rsquo;re sat in the same place. &amp;nbsp;I&amp;rsquo;m going to duck out of going into that in detail because this post is quite long enough as it is.&lt;br /&gt;&lt;br /&gt;So this is what we mean when we talk about &amp;ldquo;Teasing Apart the Concerns&amp;rdquo; or a queue&amp;rsquo;s &amp;ldquo;conflated concerns&amp;rdquo;. &amp;nbsp;By giving everything its own sequence number and by allowing only one consumer to write to each variable in the &lt;code&gt;Entry&lt;/code&gt;, the only case the Disruptor needs to manage contention is where more than one producer is writing to the ring buffer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;In summary&lt;/b&gt;&lt;br /&gt;The Disruptor a number of advantages over traditional approaches:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;No contention = no locks = it&amp;rsquo;s very fast.&lt;/li&gt;&lt;li&gt;Having everything track its own sequence number allows multiple producers and multiple consumers to use the same data structure.&lt;/li&gt;&lt;li&gt;Tracking sequence numbers at each individual place (ring buffer, claim strategy, producers and consumers), plus the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;magic cache line padding&lt;/a&gt;, means no false sharing and no unexpected contention.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;EDIT: Note that version 2.0 of the Disruptor uses different names to the ones in this article. &amp;nbsp;Please see &lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;my summary of the changes&lt;/a&gt; if you are confused about class names.&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Wiring up the dependencies</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_wiring_up_the_dependencies</link>
      <pubDate>Sun, 10 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_wiring_up_the_dependencies</guid>
      <description>&lt;p&gt;So now I&amp;rsquo;ve covered the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-whats-so-special.html&#34;&gt;ring buffer&lt;/a&gt; itself, &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-how-do-i-read-from.html&#34;&gt;reading&lt;/a&gt; from it and &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;writing&lt;/a&gt; to it.&lt;br /&gt;&lt;br /&gt;Logically the next thing to do is to wire everything up together.&lt;br /&gt;&lt;br /&gt;I talked about multiple producers - they have the producer barrier to keep them in order and under control. &amp;nbsp;I&amp;rsquo;ve talked about consumers in a simple situation. &amp;nbsp;Multiple consumers can get a little more involved. &amp;nbsp;&lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;We&amp;rsquo;ve&lt;/a&gt; done some clever stuff to allow the consumers to be dependent on each other and the ring buffer. &amp;nbsp;Like a lot of applications, we have a pipeline of things that need to happen before we can actually get on with the business logic - for example, we need to make sure the messages have been journalled to disk before we can do anything.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&#34;http://disruptor.googlecode.com/files/Disruptor-1.0.pdf&#34;&gt;Disruptor paper&lt;/a&gt; and the performance tests cover some basic configurations that you might want. I&amp;rsquo;m going to go over the most interesting one, mostly because I needed the practice with the graphics tablet.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Diamond configuration&lt;/b&gt;&lt;br /&gt;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/perf/com/lmax/disruptor/DiamondPath1P3CPerfTest.java&#34;&gt;DiamondPath1P3CPerfTest&lt;/a&gt; illustrates a configuration which is not too uncommon - a single producer with three consumers. &amp;nbsp;The tricky point being that the third consumer is dependent upon the previous two consumers to finish before it can do anything.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-34LTXhqK1wA/ThSvXbNTAjI/AAAAAAAAIFY/qpFZNXWgbPE/s1600/1P3C-Diamond.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;264&#34; src=&#34;http://4.bp.blogspot.com/-34LTXhqK1wA/ThSvXbNTAjI/AAAAAAAAIFY/qpFZNXWgbPE/s400/1P3C-Diamond.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Consumer three might be your business logic, consumer one could be backing up the data received, and consumer two may be preparing the data or something.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Diamond configuration using queues&lt;/b&gt;&lt;br /&gt;In a &lt;a href=&#34;http://www.theserverside.com/news/1363672/Building-a-Scalable-Enterprise-Applications-Using-Asynchronous-IO-and-SEDA-Model&#34;&gt;SEDA-style architecture&lt;/a&gt;, each stage will be separated by a queue:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-4Di1CzgcZR0/ThSzSdp1sTI/AAAAAAAAIFc/9mhK_7hLBdk/s1600/1P3C-Diamond-Queue.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;263&#34; src=&#34;http://1.bp.blogspot.com/-4Di1CzgcZR0/ThSzSdp1sTI/AAAAAAAAIFc/9mhK_7hLBdk/s400/1P3C-Diamond-Queue.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(Why does queue have to have so many &amp;ldquo;e&amp;rdquo;s? &amp;nbsp;It&amp;rsquo;s the letter I have the most trouble with in these drawings).&lt;br /&gt;&lt;br /&gt;You might get an inkling of the problem here: for a message to get from P1 to C3 it has to travel through four whole queues, each queue taking its cost in terms of putting the message on the queue and taking it off again.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Diamond configuration using the Disruptor&lt;/b&gt;&lt;br /&gt;In the &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;Disruptor&lt;/a&gt; world, it&amp;rsquo;s all managed on a single ring buffer:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-fGp-zkgVWs0/ThnC8m1O8bI/AAAAAAAAIHI/jUZJ6Xos608/s1600/1P3C-Diamond-RingBuffer.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;359&#34; src=&#34;http://1.bp.blogspot.com/-fGp-zkgVWs0/ThnC8m1O8bI/AAAAAAAAIHI/jUZJ6Xos608/s640/1P3C-Diamond-RingBuffer.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;It does look more complicated. &amp;nbsp;But the ring buffer remains the single point of contact between all the players, and the interactions are all based on the barriers checking the sequence numbers of the things it&amp;rsquo;s dependent upon.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;The producer side is fairly simple, it&amp;rsquo;s the single producer model described in my &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;last post&lt;/a&gt;. Interestingly, the producer barrier doesn&amp;rsquo;t have to care about all the consumers. &amp;nbsp;It only cares about consumer three, because if consumer three has finished with an item in the ring buffer the other two will already have processed it. &amp;nbsp;So if C3 has moved on, that slot in the ring buffer is available.&lt;br /&gt;&lt;br /&gt;To manage the dependencies between the consumers you need two consumer barriers. &amp;nbsp;The first just talks to the ring buffer and consumers one and two ask it for the next available item. &amp;nbsp;The second consumer barrier knows about consumers one and two, and it will return the lowest sequence number processed by both consumers.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How consumer dependencies work in the Disruptor&lt;/b&gt;&lt;br /&gt;Hmm. &amp;nbsp;I can see I&amp;rsquo;m going to need an example.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-CDUq8tbkg5U/ThTBcrHD_wI/AAAAAAAAIFo/edukW6dAG5Q/s1600/1P3C-Diamond-RingBuffer-Example.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;294&#34; src=&#34;http://3.bp.blogspot.com/-CDUq8tbkg5U/ThTBcrHD_wI/AAAAAAAAIFo/edukW6dAG5Q/s640/1P3C-Diamond-RingBuffer-Example.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;We&amp;rsquo;re joining the party halfway through the story: the producer has filled the ring buffer up to sequence number 22; consumer one has read and processed everything up to 21; consumer two has processed everything up to sequence 18; consumer three, which is dependent upon the other consumers, has only made it as far as 15.&lt;br /&gt;&lt;br /&gt;The producer can&amp;rsquo;t write anything more to the ring buffer because sequence 15 is taking up the slot where we&amp;rsquo;d want to put sequence 23.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-PKLturGyJac/ThnEt30SVLI/AAAAAAAAIHM/8w-q90sErcY/s1600/1P3C-Diamond-RingBuffer-Example2.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;314&#34; src=&#34;http://3.bp.blogspot.com/-PKLturGyJac/ThnEt30SVLI/AAAAAAAAIHM/8w-q90sErcY/s640/1P3C-Diamond-RingBuffer-Example2.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;(I&amp;rsquo;m sorry, I really did try to find an alternative to red and green, but everything else was just as ambiguous).&lt;br /&gt;&lt;br /&gt;The first consumer barrier lets consumers one and two know they can grab anything up to sequence 22, the highest sequence number in the ring buffer. &amp;nbsp;The second consumer barrier checks the ring buffer sequence, but it also checks the sequences on the other two consumers and returns the lowest value. &amp;nbsp;So consumer three is told it can get anything up to sequence 18 from the ring buffer.&lt;br /&gt;&lt;br /&gt;Note that the consumers are still reading the entries directly from the ring buffer - consumers one and two are not taking the entries off the ring buffer and then passing them on to consumer three. &amp;nbsp;Instead, the second consumer barrier is letting consumer three know which entry in the ring buffer it&amp;rsquo;s safe to process.&lt;br /&gt;&lt;br /&gt;This raises a question - if everything comes directly off the ring buffer, how is consumer three going to find out about anything the first two consumers have done? &amp;nbsp;If all consumer three cares about is that the earlier consumers have done their job (e.g. replicating the data to somewhere else) then everything&amp;rsquo;s fine - when consumer three is told the job is done, it&amp;rsquo;s happy. &amp;nbsp;If, however, consumer three needs the results of an earlier consumer&amp;rsquo;s processing, where does it get that from?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Modifying entries&lt;/b&gt;&lt;br /&gt;The secret is to write them to the ring buffer&amp;nbsp;&lt;code&gt;Entry&lt;/code&gt; itself. &amp;nbsp;This way, when consumer three grabs the entry off the ring buffer, it will have been populated with all the information consumer three needs to do the job. &amp;nbsp;The really important part of this is that for each field on the &lt;code&gt;Entry&lt;/code&gt;&amp;nbsp;only one consumer is allowed to write to it. &amp;nbsp;This prevents any write-contention which will slow the whole thing down.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-C26vt5NZaFo/ThnI4LpUzdI/AAAAAAAAIHU/I_9vAzu8EQY/s1600/FizzBuzzEntry.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;215&#34; src=&#34;http://3.bp.blogspot.com/-C26vt5NZaFo/ThnI4LpUzdI/AAAAAAAAIHU/I_9vAzu8EQY/s400/FizzBuzzEntry.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;You can see this in &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/perf/com/lmax/disruptor/DiamondPath1P3CPerfTest.java&#34;&gt;DiamondPath1P3CPerfTest&lt;/a&gt; - &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/perf/com/lmax/disruptor/support/FizzBuzzEntry.java&#34;&gt;FizzBuzzEntry&lt;/a&gt; has two fields as well as the value: &lt;code&gt;fizz&lt;/code&gt; and &lt;code&gt;buzz&lt;/code&gt;. &amp;nbsp;If the consumer is a Fizz consumer, it writes to &lt;code&gt;fizz&lt;/code&gt;. &amp;nbsp;If it&amp;rsquo;s a Buzz consumer, it writes to &lt;code&gt;buzz&lt;/code&gt;. &amp;nbsp;The third consumer, FizzBuzz, will read both of these fields but not write to either, since reading is fine and won&amp;rsquo;t cause contention.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Some actual Java code&lt;/b&gt;&lt;br /&gt;All this looks more complicated than the queue implementation. &amp;nbsp;And yes, it does involve a bit more coordination. &amp;nbsp;But this is hidden from the consumers and producers, they just talk to the barriers. &amp;nbsp;The trick is in the configuration. &amp;nbsp;The diamond graph in the example above would be created using something like the following:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;ConsumerBarrier consumerBarrier1 = ringBuffer.createConsumerBarrier();&lt;br /&gt;&lt;br /&gt;BatchConsumer consumer1 = new BatchConsumer(consumerBarrier1, handler1);&lt;br /&gt;BatchConsumer consumer2 = new BatchConsumer(consumerBarrier1, handler2);&lt;br /&gt;&lt;br /&gt;ConsumerBarrier consumerBarrier2 = &lt;br /&gt;    ringBuffer.createConsumerBarrier(consumer1, consumer2);&lt;br /&gt;&lt;br /&gt;BatchConsumer consumer3 = new BatchConsumer(consumerBarrier2, handler3);&lt;br /&gt;&lt;br /&gt;ProducerBarrier producerBarrier = &lt;br /&gt;    ringBuffer.createProducerBarrier(consumer3);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;In summary&lt;/b&gt;&lt;br /&gt;So there you have it - how to wire up the Disruptor with multiple consumers that are dependent on each other. &amp;nbsp;The key points:&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Use multiple consumer barriers to manage dependencies between consumers.&lt;/li&gt;&lt;li&gt;Have the producer barrier watch the last consumer in the graph.&lt;/li&gt;&lt;li&gt;Allow only one consumer to write to an individual field in an &lt;code&gt;Entry&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;EDIT: Adrian has &lt;a href=&#34;http://www.symphonious.net/2011/07/11/lmax-disruptor-high-performance-low-latency-and-simple-too/&#34;&gt;written a nice DSL&lt;/a&gt; to make wiring up the Disruptor much easier.&lt;br /&gt;&lt;br /&gt;EDIT 2: Note that version 2.0 of the Disruptor uses different names to the ones in this article. &amp;nbsp;Please see&amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;my summary of the changes&lt;/a&gt;&amp;nbsp;if you are confused about class names. &amp;nbsp;Also Adrian&amp;rsquo;s DSL is now part of the main Disruptor code base.&lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Writing to the ring buffer</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_writing_to_the_ring_buffer</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_writing_to_the_ring_buffer</guid>
      <description>&lt;div style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&#34;&gt;This is the missing piece in the end-to-end view of the Disruptor. &amp;nbsp;Brace yourselves, it&#39;s quite long. &amp;nbsp;But I decided to keep it in a single blog so you could have the context in one place.&lt;br /&gt;&lt;br /&gt;The important areas are: not wrapping the ring; informing the consumers; batching for producers; and how multiple producers work.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;ProducerBarriers&lt;/b&gt;&lt;br /&gt;The &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;Disruptor code&lt;/a&gt; has interfaces and helper classes for the &lt;code&gt;Consumer&lt;/code&gt;s, but there&#39;s no interface for your producer, the thing that writes to the ring buffer. &amp;nbsp;That&#39;s because nothing else needs to access your producer, only you need to know about it. &amp;nbsp;However, like the consuming side, a &lt;code&gt;ProducerBarrier&lt;/code&gt; is created by the ring buffer and your producer will use this to write to it.&lt;br /&gt;&lt;br /&gt;Writing to the ring buffer involves a two-phase commit. &amp;nbsp;First, your producer has to claim the next slot on the buffer. &amp;nbsp;Then, when the producer has finished writing to the slot, it will call &lt;code&gt;commit&lt;/code&gt; on the &lt;code&gt;ProducerBarrier&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;So let&#39;s look at the first bit. &amp;nbsp;It sounds easy - &#34;get me the next slot on the ring buffer&#34;. &amp;nbsp;Well, from your producer&#39;s point of view it is easy. &amp;nbsp;You simply call &lt;code&gt;nextEntry()&lt;/code&gt; on the &lt;code&gt;ProducerBarrier&lt;/code&gt;. &amp;nbsp;This will return you an &lt;code&gt;Entry&lt;/code&gt; object which is basically the next slot in the ring buffer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The ProducerBarrier makes sure the ring buffer doesn&#39;t wrap&lt;/b&gt;&lt;br /&gt;Under the covers, the &lt;code&gt;ProducerBarrier&lt;/code&gt; is doing all the negotiation to figure out what the next slot is, and if you&#39;re allowed to write to it yet.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-YOp3ahmnRLw/ThCPQmuS2gI/AAAAAAAAIE0/oI-w-1l2RJc/s1600/PreventRingFromWrapping.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;231&#34; src=&#34;http://3.bp.blogspot.com/-YOp3ahmnRLw/ThCPQmuS2gI/AAAAAAAAIE0/oI-w-1l2RJc/s640/PreventRingFromWrapping.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(I&#39;m not convinced the &lt;a href=&#34;http://www.amazon.com/Wacom-CTL460-Bamboo-Pen-Tablet/dp/B002OOWC3I?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;link_code=btl&amp;amp;camp=213689&amp;amp;creative=392969&#34; target=&#34;_blank&#34;&gt;shiny new graphics tablet&lt;/a&gt;&lt;img alt=&#34;&#34; border=&#34;0&#34; height=&#34;1&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=btl&amp;amp;camp=213689&amp;amp;creative=392969&amp;amp;o=1&amp;amp;a=B002OOWC3I&#34; style=&#34;border: none !important; margin: 0px !important; padding: 0px !important;&#34; width=&#34;1&#34; /&gt; is helping the clarity of my pictures, but it&#39;s  fun to use).&lt;br /&gt;&lt;br /&gt;For this illustration, we&#39;re going to assume there&#39;s only one producer writing to the ring buffer. &amp;nbsp;We will deal with the intricacies of multiple producers later.&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;ConsumerTrackingProducerBarrier&lt;/code&gt; has a list of all the &lt;code&gt;Consumers&lt;/code&gt; that are accessing the ring buffer. &amp;nbsp;Now to me this seemed a bit odd - I wouldn&#39;t expect the &lt;code&gt;ProducerBarrier&lt;/code&gt; to know anything about the consuming side.  But wait, there is a reason. &amp;nbsp;Because we don&#39;t want the &#34;conflation of concerns&#34; a queue has (it has to track the head and tail which are sometimes the same point), our consumers are responsible for knowing which sequence number they&#39;re up to, not the ring buffer. &amp;nbsp;So, if we want to make sure we don&#39;t wrap the buffer, we need to check where the consumers have got to.&lt;br /&gt;&lt;br /&gt;In the diagram above, one &lt;code&gt;Consumer&lt;/code&gt; is happily at the same point as the highest sequence number (12, highlighted in red/pink). The second &lt;code&gt;Consumer&lt;/code&gt; is a bit behind - maybe it&#39;s doing I/O operations or something - and it&#39;s at sequence number 3. &amp;nbsp;Therefore consumer 2 has the whole length of the buffer to go before it catches up with consumer 1.&lt;br /&gt;&lt;br /&gt;The producer wants to write to the slot on the ring buffer currently occupied by sequence 3, because this slot is the one after the current ring buffer cursor. &amp;nbsp;But the &lt;code&gt;ProducerBarrier&lt;/code&gt; knows it can&#39;t write here because a &lt;code&gt;Consumer&lt;/code&gt; is using it. &amp;nbsp;So the &lt;code&gt;ProducerBarrier&lt;/code&gt; sits and spins, waiting, until the consumers move on.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Claiming the next slot&lt;/b&gt;&lt;br /&gt;Now imagine consumer 2 has finished that batch of entries, and moves its sequence number on. Maybe it got as far as sequence 9 (in real life I expect it will make it as far as 12 because of the way consumer batching works, but that doesn&#39;t make the example as interesting).&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-IxEJ_Dy6_RU/ThCVQIwgLoI/AAAAAAAAIE4/-z4AsZD5nVg/s1600/ProducerNextEntry.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;236&#34; src=&#34;http://4.bp.blogspot.com/-IxEJ_Dy6_RU/ThCVQIwgLoI/AAAAAAAAIE4/-z4AsZD5nVg/s640/ProducerNextEntry.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The diagram above shows what happens when consumer 2 updates to sequence number 9. &amp;nbsp;I&#39;ve slimmed down the &lt;code&gt;ConsumerBarrier&lt;/code&gt; in this picture because it takes no active part in this scene.&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;ProducerBarrier&lt;/code&gt; sees that the next slot, the one that had sequence number 3, is now available. &amp;nbsp;It grabs the &lt;code&gt;Entry&lt;/code&gt; that sits in this slot (I&#39;ve not talked specifically about the &lt;code&gt;Entry&lt;/code&gt; class, but it&#39;s basically a bucket for stuff you want to put into the ring buffer slot which has a sequence number), sets the sequence number on the &lt;code&gt;Entry&lt;/code&gt; to the next sequence number (13) and returns this entry to your producer. &amp;nbsp;The producer can then write whatever value it wants into this &lt;code&gt;Entry&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Committing the new value&lt;/b&gt;&lt;br /&gt;The second phase of the two-stage commit is, well, the commit.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-vBm6k86SO4k/ThCm5GgkhEI/AAAAAAAAIFA/dB-9NNz47qw/s1600/ProducerCommit.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;224&#34; src=&#34;http://2.bp.blogspot.com/-vBm6k86SO4k/ThCm5GgkhEI/AAAAAAAAIFA/dB-9NNz47qw/s640/ProducerCommit.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The green represents our newly updated &lt;code&gt;Entry&lt;/code&gt; with sequence 13 - yeah, I&#39;m sorry, I&#39;m red-green colour-blind too. &amp;nbsp;But other colours were even more rubbish.&lt;br /&gt;&lt;br /&gt;When the producer has finished writing stuff into the entry it tells the &lt;code&gt;ProducerBarrier&lt;/code&gt; to commit it.&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;ProducerBarrier&lt;/code&gt; waits for the ring buffer cursor to catch up to where we are (for a single producer this will always be a bit pointless - e.g. we know the cursor is already at 12, nothing else is writing to the ring buffer). &amp;nbsp;Then the &lt;code&gt;ProducerBarrier&lt;/code&gt; updates the ring buffer cursor to the sequence number on the updated &lt;code&gt;Entry&lt;/code&gt; - 13 in our case. &amp;nbsp;Next, the &lt;code&gt;ProducerBarrier&lt;/code&gt; lets the consumers know there&#39;s something new in the buffer. &amp;nbsp;It does this by poking the &lt;code&gt;WaitStrategy&lt;/code&gt; on the &lt;code&gt;ConsumerBarrier&lt;/code&gt; - &#34;Oi, wake up! Something happened!&#34; (note - different &lt;code&gt;WaitStrategy&lt;/code&gt; implementations deal with this in different ways, depending upon whether it&#39;s blocking or not).&lt;br /&gt;&lt;br /&gt;Now consumer 1 can get entry 13, consumer 2 can get everything up to and including 13, and they all live happily ever after.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;ProducerBarrier batching&lt;/b&gt;&lt;br /&gt;Interestingly the disruptor can batch on the producer side as well as &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-how-do-i-read-from.html&#34;&gt;on the Consumer side&lt;/a&gt;. &amp;nbsp;Remember when consumer 2 finally got with the programme and found itself at sequence 9? &amp;nbsp;There is a very cunning thing the &lt;code&gt;ProducerBarrier&lt;/code&gt; can do here - it knows the size of the buffer, and it knows where the slowest &lt;code&gt;Consumer&lt;/code&gt; is. &amp;nbsp;So it can figure out which slots are now available.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-781DHcbmG2g/ThCXT2xo0xI/AAAAAAAAIE8/5Gls4znj3zw/s1600/ProducerBatching.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;236&#34; src=&#34;http://4.bp.blogspot.com/-781DHcbmG2g/ThCXT2xo0xI/AAAAAAAAIE8/5Gls4znj3zw/s640/ProducerBatching.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;If the &lt;code&gt;ProducerBarrier&lt;/code&gt; knows the ring buffer cursor is at 12, and the slowest &lt;code&gt;Consumer&lt;/code&gt; is at 9, it can let producers write to slots 3, 4, 5, 6, 7 and 8 before it needs to check where the consumers are.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Multiple producers&lt;/b&gt;&lt;br /&gt;You thought I was done, but there&#39;s more.&lt;br /&gt;&lt;br /&gt;I slightly lied in some of the above drawings. &amp;nbsp;I implied that the sequence number the &lt;code&gt;ProducerBarrier&lt;/code&gt; deals with comes directly from the ring buffer&#39;s cursor. &amp;nbsp;However, if you look at the code you&#39;ll see that it uses the &lt;code&gt;ClaimStrategy&lt;/code&gt; to get this. &amp;nbsp;I skipped this to simplify the diagrams, it&#39;s not so important in the single-producer case.&lt;br /&gt;&lt;br /&gt;With multiple producers, you need yet another thing tracking a sequence number. &amp;nbsp;This is the sequence that is available for writing to. &amp;nbsp;Note that this is not the same as ring-buffer-cursor-plus-one - if you have more than one producer writing to the buffer, it&#39;s possible there are entries in the process of being written that haven&#39;t been committed yet.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-xPQJAkN7lgg/ThC8FGgosdI/AAAAAAAAIFE/qZO9xuiKFPY/s1600/ProducersNextEntry.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;274&#34; src=&#34;http://4.bp.blogspot.com/-xPQJAkN7lgg/ThC8FGgosdI/AAAAAAAAIFE/qZO9xuiKFPY/s640/ProducersNextEntry.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Let&#39;s revisit claiming a slot. &amp;nbsp;Each producer asks the &lt;code&gt;ClaimStrategy&lt;/code&gt; for the next available slot. &amp;nbsp;Producer 1 gets sequence 13, like in the single producer case above. &amp;nbsp;Producer 2 gets sequence 14, even though the ring buffer cursor is still only pointing to 12, because the &lt;code&gt;ClaimSequence&lt;/code&gt; is dishing out the numbers and has been keeping track of what&#39;s been allocated.&lt;br /&gt;&lt;br /&gt;So each producer has its own slot with a shiny new sequence number.&lt;br /&gt;&lt;br /&gt;I&#39;m going colour producer 1 and its slot in green, and producer 2 and its slot in a suspiciously pink-looking purple.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-4bSeLcewe-Q/ThDCM1rWOyI/AAAAAAAAIFQ/cF_dPHKNm-I/s1600/ProducersCommit.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-4bSeLcewe-Q/ThDCM1rWOyI/AAAAAAAAIFQ/cF_dPHKNm-I/s1600/ProducersCommit.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: -webkit-auto;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&#34;&gt;Now imaging producer 1 is away with the fairies, and hasn&#39;t got around to committing for whatever reason. &amp;nbsp;Producer 2 is ready to commit, and asks the &lt;code&gt;ProducerBarrier&lt;/code&gt; to do so.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As we saw in the earlier commit diagram, the &lt;code&gt;ProducerBarrier&lt;/code&gt; is only going to commit when the ring buffer cursor reaches the slot behind the one it wants to commit into. &amp;nbsp;In this case, the cursor needs to reach 13 so that we can commit 14. &amp;nbsp;But we can&#39;t, because producer 1 is staring at something shiny and hasn&#39;t committed yet. &amp;nbsp;So the &lt;code&gt;ClaimStrategy&lt;/code&gt; sits there spinning until the ring buffer cursor gets to where it should be.&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-2kzqD61cJNU/ThDEYBSFOkI/AAAAAAAAIFU/WY0m9sn5y-w/s1600/ProducersCommit2.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;204&#34; src=&#34;http://4.bp.blogspot.com/-2kzqD61cJNU/ThDEYBSFOkI/AAAAAAAAIFU/WY0m9sn5y-w/s640/ProducersCommit2.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Now producer 1 wakes up from its coma and asks to commit entry 13 (green arrows are sparked by the request from producer 1). &amp;nbsp;The &lt;code&gt;ProducerBarrier&lt;/code&gt; tells the &lt;code&gt;ClaimStrategy&lt;/code&gt; to wait for the ring buffer cursor to get to 12, which it already had of course. &amp;nbsp;So the ring buffer cursor is incremented to 13, and the &lt;code&gt;ProducerBarrier&lt;/code&gt; pokes the &lt;code&gt;WaitStrategy&lt;/code&gt; to let everything know the ring buffer was updated. &amp;nbsp;Now the &lt;code&gt;ProducerBarrier&lt;/code&gt; can finish the request from producer 2, increment the ring buffer cursor to 14, and let everyone know that we&#39;re done.&lt;br /&gt;&lt;br /&gt;You&#39;ll see that the ring buffer retains the ordering implied by the order of the initial &lt;code&gt;nextEntry()&lt;/code&gt; calls, even if the producers finish writing at different times. &amp;nbsp;It also means that if a producer is causing a pause in writing to the ring buffer, when it unblocks any other pending commits can happen immediately.&lt;br /&gt;&lt;br /&gt;Phew. &amp;nbsp;And I managed to describe all that without mentioning a memory barrier once.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&#34;&gt;EDIT: The most recent version of the&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java?r=239&#34;&gt;RingBuffer&lt;/a&gt;&amp;nbsp;hides away the Producer Barrier. &amp;nbsp;If you can&#39;t see a&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/ProducerBarrier.java?r=239&#34;&gt;ProducerBarrier&lt;/a&gt;&amp;nbsp;in the code you&#39;re looking at, then assume where I say &#34;producer barrier&#34; I mean &#34;ring buffer&#34;&lt;br /&gt;&lt;br /&gt;EDIT 2: Note that version 2.0 of the Disruptor uses different names to the ones in this article. &amp;nbsp;Please see&amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;my summary of the changes&lt;/a&gt;&amp;nbsp;if you are confused about class names.&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: How do I read from the ring buffer?</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer</guid>
      <description>&lt;p&gt;The next in the series of understanding &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;the Disruptor pattern&lt;/a&gt; developed at &lt;a href=&#34;http://www.lmaxtrader.com/&#34;&gt;LMAX&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;After the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-whats-so-special.html&#34;&gt;last post&lt;/a&gt; we all understand ring buffers and how awesome they are. &amp;nbsp;Unfortunately for you, I have not said anything about how to actually populate them or read from them when you&amp;rsquo;re using the Disruptor.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;ConsumerBarriers and Consumers&lt;/b&gt;&lt;br /&gt;I&amp;rsquo;m going to approach this slightly backwards, because it&amp;rsquo;s probably easier to understand in the long run. &amp;nbsp;Assuming that some magic has populated it: how do you read something from the ring buffer? &lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-XfVLYjAqNeY/TgjrImkZ-BI/AAAAAAAAIEg/_SM2EqIgATs/s1600/ConsumerWaitFor.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em; text-align: center;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;214&#34; src=&#34;http://1.bp.blogspot.com/-XfVLYjAqNeY/TgjrImkZ-BI/AAAAAAAAIEg/_SM2EqIgATs/s640/ConsumerWaitFor.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(OK, I&amp;rsquo;m starting to regret using Paint/&lt;a href=&#34;http://www.gimp.org/&#34;&gt;Gimp&lt;/a&gt;. &amp;nbsp;Although it&amp;rsquo;s an excellent excuse to purchase a graphics tablet if I do continue down this road. &amp;nbsp;Also UML gurus are probably cursing my name right now.)&lt;br /&gt;&lt;br /&gt;Your &lt;code&gt;Consumer&lt;/code&gt; is the thread that wants to get something off the buffer. &amp;nbsp;It has access to a &lt;code&gt;ConsumerBarrier&lt;/code&gt;, which is created by the &lt;code&gt;RingBuffer&lt;/code&gt; and interacts with it on behalf of the &lt;code&gt;Consumer&lt;/code&gt;. &amp;nbsp;While the ring buffer obviously needs a sequence number to figure out what the next available slot is, the consumer also needs to know which sequence number it&amp;rsquo;s up to - each consumer needs to be able to figure out which sequence number it&amp;rsquo;s expecting to see next. &amp;nbsp;So in the case above, the consumer has dealt with everything in the ring buffer up to and including 8, so it&amp;rsquo;s expecting to see 9 next.&lt;br /&gt;&lt;br /&gt;The consumer calls &lt;code&gt;waitFor&lt;/code&gt; on the &lt;code&gt;ConsumerBarrier&lt;/code&gt; with the sequence number it wants next&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code style=&#34;font-size: 12px;&#34;&gt;    final long availableSeq = consumerBarrier.waitFor(nextSequence);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;and the &lt;code&gt;ConsumerBarrier&lt;/code&gt; returns the highest sequence number available in the ring buffer - in the example above, 12. &amp;nbsp;The &lt;code&gt;ConsumerBarrier&lt;/code&gt; has a &lt;code&gt;WaitStrategy&lt;/code&gt; which it uses to decide how to wait for this sequence number - I won&amp;rsquo;t go into details of that right now, the code has comments in outlining the advantages and disadvantages of each.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Now what?&lt;/b&gt;&lt;br /&gt;So the consumer has been hanging around waiting for more stuff to get written to the ring buffer, and it&amp;rsquo;s been told what has been written - entries 9, 10, 11 and 12. &amp;nbsp;Now they&amp;rsquo;re there, the consumer can ask the &lt;code&gt;ConsumerBarrier&lt;/code&gt; to fetch them.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-NKI4nQgA_Co/TgjsGRyaTWI/AAAAAAAAIEk/S7fAyNrjlXQ/s1600/ConsumerRequest.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;222&#34; src=&#34;http://2.bp.blogspot.com/-NKI4nQgA_Co/TgjsGRyaTWI/AAAAAAAAIEk/S7fAyNrjlXQ/s640/ConsumerRequest.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As it&amp;rsquo;s fetching them, the &lt;code&gt;Consumer&lt;/code&gt; is updating its own cursor. &lt;br /&gt;&lt;br /&gt;You should start to get a feel for how this helps to smooth latency spikes - instead of asking &amp;ldquo;Can I have the next one yet? &amp;nbsp;How about now? &amp;nbsp;Now?&amp;rdquo; for every individual item, the &lt;code&gt;Consumer&lt;/code&gt; simply says &amp;ldquo;Let me know when you&amp;rsquo;ve got more than this number&amp;rdquo;, and is told in return how many more entries it can grab. &amp;nbsp;Because these new entries have definitely been written (the ring buffer&amp;rsquo;s sequence has been updated), and because the only things trying to get to these entries can only read them and not write to them, this can be done without locks. &amp;nbsp;Which is nice. &amp;nbsp;Not only is it safer and easier to code against, it&amp;rsquo;s much faster not to use a lock.&lt;br /&gt;&lt;br /&gt;And the added bonus - you can have multiple &lt;code&gt;Consumers&lt;/code&gt; reading off the same &lt;code&gt;RingBuffer&lt;/code&gt;, with no need for locks and no need for additional queues to coordinate between the different threads. &amp;nbsp;So you can really run your processing in parallel with the Disruptor coordinating the effort.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/BatchConsumer.java&#34;&gt;BatchConsumer&lt;/a&gt; is an example of consumer code, and if you implement the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/BatchHandler.java&#34;&gt;BatchHandler &lt;/a&gt;you can get the &lt;code&gt;BatchConsumer&lt;/code&gt; to do the heavy lifting I&amp;rsquo;ve outlined above. &amp;nbsp;Then it&amp;rsquo;s easy to deal with the whole batch of entries processed (e.g. from 9-12 above) without having to fetch each one individually.&lt;br /&gt;&lt;br /&gt;EDIT: Note that version 2.0 of the Disruptor uses different names to the ones in this article. &amp;nbsp;Please see&amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;my summary of the changes&lt;/a&gt;&amp;nbsp;if you are confused about class names.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
