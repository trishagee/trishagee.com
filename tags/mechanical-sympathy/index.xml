<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Mechanical-Sympathy on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/mechanical-sympathy/index.xml</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Fri, 12 Apr 2013 00:00:00 UTC</updated>
    
    <item>
      <title>How Mechanical Sympathy got me to the airport on time</title>
      <link>http://trishagee.github.io/post/how_mechanical_sympathy_got_me_to_the_airport_on_time</link>
      <pubDate>Fri, 12 Apr 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/how_mechanical_sympathy_got_me_to_the_airport_on_time</guid>
      <description>&lt;p&gt;&lt;br /&gt;&lt;div class=&#34;p1&#34;&gt;Lets talk about mechanical sympathy. &amp;nbsp;Martin Thompson has been making this term very popular in software development, so it&amp;rsquo;s best to read &lt;a href=&#34;http://mechanical-sympathy.blogspot.co.uk/2011/07/why-mechanical-sympathy.html&#34;&gt;his description of why he used the term&lt;/a&gt;.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-jUnEWLZmVHI/UWfdyJg6fuI/AAAAAAAALd4/YxbGeiy5Xts/s1600/20130411_162419.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-jUnEWLZmVHI/UWfdyJg6fuI/AAAAAAAALd4/YxbGeiy5Xts/s1600/20130411_162419.jpg&#34; height=&#34;300&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I had a perfect example yesterday. &amp;nbsp;I&amp;rsquo;m about to drive to the airport&amp;nbsp;and the car won&amp;rsquo;t move (I&amp;rsquo;m a modern tomboy, I can write&amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.co.uk/2012/02/why-customer-isnt-always-right.html&#34;&gt;stories about hair&lt;/a&gt;&amp;nbsp;and stories about cars). Not at all. &amp;nbsp;It&amp;rsquo;s stuck. &amp;nbsp;I can&amp;rsquo;t reverse out of my parking space.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The first thing that occurs to me is something is stuck under the car. &amp;nbsp;Like a cat. &amp;nbsp;Those buggers hide in the stupidest of places. &amp;nbsp;So I get out and check there&amp;rsquo;s nothing wedged against the wheels, which seems like the most logical thing that would stop the car moving.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;(OK that&amp;rsquo;s not true. &amp;nbsp;The first thing that occurs to me is oh-my-god-I&amp;rsquo;m-going-to-miss-my-plane-and-I-haven&amp;rsquo;t-got-a-backup-plan-to-get-to-the-airport-and-I&amp;rsquo;ve-already-paid-for-parking-and-I-would-like-to-cry-now-but-that&amp;rsquo;s-not-going-to-help)&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Since there&amp;rsquo;s nothing under the car, the next thing that occurs to me is the handbrake is stuck on - it feels like it&amp;rsquo;s the rear left wheel that won&amp;rsquo;t move, and I know (probably as I had a similar problem on my previous car, my lovely but ancient MX5, or maybe because I&amp;rsquo;ve seen far too much Top Gear) that the handbrake applies to the rear wheels.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I also suspect that the handbrake jamming this is the correct answer because I put the car through the car wash on Monday, and the known issue of the brakes jamming on some Volkswagens always manifests in my car after the car wash. &amp;nbsp;I should probably just let it get dirty.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Because I&amp;rsquo;m big on tests, and scientific theory, I test this hypothesis. &amp;nbsp;I rev the hell out of the car and force it backwards. &amp;nbsp;OK, I&amp;rsquo;ll be honest - this wasn&amp;rsquo;t a test. &amp;nbsp;This was a brute force attempt to unjam the handbrake. &lt;i&gt;But&lt;/i&gt; it did provide a suitable test - when I got out of the car to inspect the offending wheel, I could see skid marks on the floor where the wheel had been dragged, rather than rolled, over the tarmac. &amp;nbsp;Oops.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So my (limited) knowledge of how a car works has provided me with a hypothesis, and reasonable proof that it&amp;rsquo;s correct.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;That&amp;rsquo;s all fine, but I&amp;rsquo;m still not on the way to the airport yet. &amp;nbsp;How did I fix it?&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;What do you think I did? Well, I drove it back and forth a view times, hoping the jolting and extreme discomfort of the brake pad against a moving wheel would unlock the brake (from previous experience, the brake clicks off, rather than simply easing off).&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Of course it didn&amp;rsquo;t work, and I&amp;rsquo;m probably going to have to replace that tyre much sooner than expected. &amp;nbsp;Ooops x2.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I sat in the car and pumped the foot brake millions of times - a trick that either inexplicably worked on the MX5, or simply distracted me long enough and the brakes fixed themselves eventually.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;This didn&amp;rsquo;t work, not surprisingly (not the same brakes after all).&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Finally, I got out of the car and kicked the wheel a few times. &amp;nbsp;Hard. &amp;nbsp;I figured this might jolt the brake back into position.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;It didn&amp;rsquo;t&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Then I used my brain. &amp;nbsp;That&amp;rsquo;s not going to work when you unconsciously put the hand brake &lt;i&gt;on&lt;/i&gt; when you leave the car to kick the wheel.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So I took the brake off, then kicked the wheel. &amp;nbsp;Hard. &amp;nbsp;A lot.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;And it worked!!!&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;And this is a bit like diagnosing performance problems (no, really). &amp;nbsp;My basic understanding of how the car was put together, plus some experience with similar problems in the past, gave me guidance on where the issue was and what might be done to fix it.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So, what have we learnt today, boys and girls?&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;A basic understanding of how the hardware works can prevent you calling an expensive expert to do a simple fix.&lt;/li&gt;&lt;li&gt;Always have a backup plan (Disaster Recovery/High Availability - if not hardware, then at least some sort of process). &amp;nbsp;I was much more stressed because without the car, I had to come up with a whole new&amp;nbsp;transportation&amp;nbsp;plan with a very limited time budget and having no knowledge of or experience with alternatives.&lt;/li&gt;&lt;li&gt;I need to drive my car more, because then a) I would have either discovered the problem sooner, or b) it would never have got to that point. &amp;nbsp;I&amp;rsquo;m going to say that in this tenuous analogy, the equivalent is to do testing in a live-like environment, and actually do DR scenario testing. &amp;nbsp;Then you know how your hardware and software behaves under abnormal circumstances, and have some concept of how to get back to normal.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;    &lt;div class=&#34;p2&#34;&gt;I did make it to the airport on time, because adding padding to your estimates is a Good Thing and gives you a bit of space for contingencies. &amp;nbsp;So this story does have a happy ending.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-Opq7B-waDrk/UWfgtwufXGI/AAAAAAAALeI/-6nW5tgo7n8/s1600/20130412_102014.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-Opq7B-waDrk/UWfgtwufXGI/AAAAAAAALeI/-6nW5tgo7n8/s1600/20130412_102014.jpg&#34; height=&#34;300&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Here endeth the lesson.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Demystifying Memory Barriers</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers</link>
      <pubDate>Sun, 07 Aug 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers</guid>
      <description>&lt;p&gt;My recent slow-down in posting is because I&amp;rsquo;ve been trying to write a post explaining &lt;a href=&#34;http://en.wikipedia.org/wiki/Memory_barrier&#34;&gt;memory barriers&lt;/a&gt; and their applicability in &lt;a href=&#34;http://code.google.com/p/disruptor&#34;&gt;the Disruptor&lt;/a&gt;.  The problem is, no matter how much I read and no matter how many times I ask the ever-patient &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&lt;/a&gt; and &lt;a href=&#34;http://mikes-tech.blogspot.com/&#34;&gt;Mike&lt;/a&gt; questions trying to clarify some point, I just don&amp;rsquo;t intuitively grasp the subject.  I guess I don&amp;rsquo;t have the deep background knowledge required to fully understand.&lt;br /&gt;&lt;br /&gt;So, rather than make an idiot of myself trying to explain something I don&amp;rsquo;t really get, I&amp;rsquo;m going to try and cover, at an abstract / massive-simplification level, what I do understand in the area. &amp;nbsp;Martin has written a post&amp;nbsp;&lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html&#34;&gt;going into memory barriers&lt;/a&gt;&amp;nbsp;in some detail, so hopefully I can get away with skimming the subject.&lt;br /&gt;&lt;br /&gt;Disclaimer: any errors in the explanation are completely my own, and no reflection on the implementation of the Disruptor or on the &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX &lt;/a&gt;guys who actually do know about this stuff.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s the point?&lt;/b&gt;&lt;br /&gt;My main aim in this series of blog posts is to explain how the Disruptor works and, to a slightly lesser extent, why.  In theory I should be able to provide a bridge between the code and &lt;a href=&#34;http://disruptor.googlecode.com/files/Disruptor-1.0.pdf&#34;&gt;the technical paper&lt;/a&gt; by talking about it from the point of view of a developer who might want to use it.&lt;br /&gt;&lt;br /&gt;The paper mentioned memory barriers, and I wanted to understand what they were, and how they apply.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s a Memory Barrier?&lt;/b&gt;&lt;br /&gt;It&amp;rsquo;s a CPU instruction. &amp;nbsp;Yes, once again, we&amp;rsquo;re thinking about CPU-level stuff in order to get the performance we need (Martin&amp;rsquo;s famous Mechanical Sympathy). &amp;nbsp;Basically it&amp;rsquo;s an instruction to a) ensure the order in which certain operations are executed and b) influence visibility of some data (which might be the result of executing some instruction).&lt;br /&gt;&lt;br /&gt;Compilers and CPUs can re-order instructions, provided the end result is the same, to try and optimise performance. &amp;nbsp;Inserting a memory barrier tells the CPU and the compiler that what happened before that command needs to stay before that command, and what happens after needs to stay after. &amp;nbsp;All similarities to a trip to Vegas are entirely in your own mind.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-wae8jx9Ehuw/Tjg5oFT5M7I/AAAAAAAAIJI/J00e1Fy42DU/s1600/MemoryBarrier.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-wae8jx9Ehuw/Tjg5oFT5M7I/AAAAAAAAIJI/J00e1Fy42DU/s1600/MemoryBarrier.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The other thing a memory barrier does is force an update of the various CPU caches - for example, a write barrier will flush all the data that was written before the barrier out to cache, therefore any other thread that tries to read that data will get the most up-to-date version regardless of which core or which socket it might be executing by.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s this got to do with Java?&lt;/b&gt;&lt;br /&gt;Now I know what you&amp;rsquo;re thinking - this isn&amp;rsquo;t assembler. &amp;nbsp;It&amp;rsquo;s Java. &lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The magic incantation here is the word&amp;nbsp;&lt;code&gt;volatile&lt;/code&gt;&amp;nbsp;(something I felt was never clearly explained in the Java certification). &amp;nbsp;If your field is&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: monospace;&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;, the Java Memory Model inserts a write barrier instruction after you write to it, and a read barrier instruction before you read from it.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-mdQ0VfzF_XM/TjhOOM4PBEI/AAAAAAAAIJQ/K25fNMkKufU/s1600/MemoryBarrierWrite.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-mdQ0VfzF_XM/TjhOOM4PBEI/AAAAAAAAIJQ/K25fNMkKufU/s1600/MemoryBarrierWrite.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;/span&gt;&lt;br /&gt;This means if you write to a volatile field, you know that:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Any thread accessing that field after the point at which you wrote to it will get the updated value&amp;nbsp;&lt;/li&gt;&lt;li&gt;Anything you did before you wrote that field is guaranteed to have happened and any updated data values will also be visible, because the memory barrier flushed all earlier writes to the cache.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;b&gt;Example please!&lt;/b&gt;&lt;/div&gt;&lt;div&gt;So glad you asked. &amp;nbsp;It&amp;rsquo;s about time I started drawing doughnuts again.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;RingBuffer&lt;/a&gt;&amp;nbsp;&lt;code&gt;cursor&lt;/code&gt; is one of these magic volatile thingies, and it&amp;rsquo;s one of the reasons we can get away with implementing the Disruptor without locking.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-_JxCXwReRgA/TjhGfFrokHI/AAAAAAAAIJM/i_VC0M_K5hw/s1600/BarriersWriteExample.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;226&#34; src=&#34;http://2.bp.blogspot.com/-_JxCXwReRgA/TjhGfFrokHI/AAAAAAAAIJM/i_VC0M_K5hw/s400/BarriersWriteExample.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The Producer will obtain the next &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/AbstractEntry.java?spec=svn109&amp;amp;r=201&#34;&gt;Entry&lt;/a&gt; (or batch of them) and do whatever it needs to do to the entries, updating them with whatever values it wants to place in there. &amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;As you know&lt;/a&gt;, at the end of all the changes the producer calls the commit method on the ring buffer, which updates the sequence number. &amp;nbsp;This write of the volatile field (&lt;code&gt;cursor&lt;/code&gt;) creates a memory barrier which ultimately brings all the caches up to date (or at least invalidates them accordingly). &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At this point, the consumers can get the updated sequence number (8), and because the memory barrier also guarantees the ordering of the instructions that happened before then, the consumers can be confident that all changes the producer did to to the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/AbstractEntry.java?spec=svn109&amp;amp;r=201&#34;&gt;Entry&lt;/a&gt; at position 7 are also available.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&amp;hellip;and on the Consumer side?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;The sequence number on the Consumer is volatile, and read by a number of external objects - other &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;downstream&lt;/a&gt; consumers might be tracking this consumer&lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;,&lt;/a&gt;&amp;nbsp;and&amp;nbsp;the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/ProducerBarrier.java?spec=svn109&amp;amp;r=201&#34;&gt;ProducerBarrier&lt;/a&gt;/&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java?spec=svn109&amp;amp;r=242&#34;&gt;RingBuffer&lt;/a&gt; (depending on whether you&amp;rsquo;re looking at older or newer code) tracks it to make sure the the ring doesn&amp;rsquo;t wrap.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-qoKYeSC2_OM/Tj7HG5U6RaI/AAAAAAAAIJc/hnLVu3EL-kE/s1600/MemoryBarrierReadExample.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-qoKYeSC2_OM/Tj7HG5U6RaI/AAAAAAAAIJc/hnLVu3EL-kE/s1600/MemoryBarrierReadExample.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;So, if your downstream consumer (C2) sees that an earlier consumer (C1) reaches number 12, when C2 reads entries up to 12 from the ring buffer it will get all updates C1 made to the entries before it updated its sequence number.&lt;br /&gt;&lt;br /&gt;Basically everything that happens after C2 gets the updated sequence number (shown in blue above) must occur after everything C1 did to the ring buffer before updating its sequence number (shown in black).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Impact on performance&lt;/b&gt;&lt;br /&gt;Memory barriers, being another CPU-level instruction, don&amp;rsquo;t have the same &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html&#34;&gt;cost as locks&lt;/a&gt;&amp;nbsp; - the kernel isn&amp;rsquo;t interfering and arbitrating between multiple threads. &amp;nbsp;But&amp;nbsp;nothing comes for free. &amp;nbsp;Memory barriers do have a cost - the compiler/CPU cannot re-order instructions, which could potentially lead to not using the CPU as efficiently as possible, and refreshing the caches obviously has a performance impact. &amp;nbsp;So don&amp;rsquo;t think that using volatile instead of locking will get you away scot free.&lt;br /&gt;&lt;br /&gt;You&amp;rsquo;ll notice that the Disruptor implementation tries to read from and write to the sequence number as infrequently as possible. &amp;nbsp;Every read or write of a &lt;code&gt;volatile&lt;/code&gt; field is a relatively costly operation. However, recognising this also plays in quite nicely with batching behaviour - if you know you shouldn&amp;rsquo;t read from or write to the sequences too frequently, it makes sense to grab a whole batch of Entries and process them before updating the sequence number, both on the Producer and Consumer side. Here&amp;rsquo;s an example from &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/BatchConsumer.java?r=239&#34;&gt;BatchConsumer&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;table id=&#34;src_table_0&#34; style=&#34;-webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px; border-collapse: collapse; font-family: Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Lucida Console&#39;, monospace; font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; white-space: pre;&#34;&gt;&lt;tbody style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;tr id=&#34;sl_svn239_121&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_122&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;lit&#34; style=&#34;color: #006666;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_123&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;running&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_124&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_125&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_126&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_127&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; availableSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; consumerBarrier&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_128&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; availableSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_129&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_130&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; entry &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; consumerBarrier&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getEntry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_131&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; handler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;onAvailable&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_132&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;++;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_133&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_135&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; handler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;onEndOfBatch&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_136&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_137&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_138&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;color: #000088;&#34;&gt;&amp;hellip;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_142&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;typ&#34; style=&#34;color: #660066;&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; ex&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_143&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_144&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exceptionHandler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;ex&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_145&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_146&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;lit&#34; style=&#34;color: #006666;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_147&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_148&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;(You&amp;rsquo;ll note this is the &amp;ldquo;old&amp;rdquo; code and naming conventions, because this is inline with my previous blog posts, I thought it was slightly less confusing than switching straight to the new conventions).&lt;br /&gt;&lt;br /&gt;In the code above, we use a local variable to increment during our loop over the entries the consumer is processing. &amp;nbsp;This means we read from and write to the volatile sequence field (shown in bold) as infrequently as we can get away with.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;In Summary&lt;/b&gt;&lt;br /&gt;Memory barriers are CPU instructions that allow you to make certain assumptions about when data will be visible to other processes. &amp;nbsp;In Java, you implement them with the &lt;code&gt;volatile&lt;/code&gt; keyword. &amp;nbsp;Using volatile means you don&amp;rsquo;t necessarily have to add locks willy nilly, and will give you performance improvements over using them. &amp;nbsp;However you need to think a little more carefully about your design, in particular how frequently you use volatile fields, and how frequently you read and write them.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;PS Given that the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;New World Order&lt;/a&gt; in the Disruptor uses totally different naming conventions now to everything I&amp;rsquo;ve blogged about so far, I guess the next post is mapping the old world to the new one.&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part two) - Magic cache line padding</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding</link>
      <pubDate>Fri, 22 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding</guid>
      <description>&lt;p&gt;We mention the phrase Mechanical Sympathy quite a lot, in fact it&amp;rsquo;s even &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&amp;rsquo;s blog title&lt;/a&gt;. &amp;nbsp;It&amp;rsquo;s about understanding how the underlying hardware operates and programming in a way that works with that, not against it.&lt;br /&gt;&lt;br /&gt;We get a number of comments and questions about the mysterious cache line padding in the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;RingBuffer&lt;/a&gt;, and I referred to it in the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html&#34;&gt;last post&lt;/a&gt;. &amp;nbsp;Since this lends itself to pretty pictures, it&amp;rsquo;s the next thing I thought I would tackle.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Comp Sci 101&lt;/b&gt;&lt;br /&gt;One of the things I love about working at &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX&lt;/a&gt; is all that stuff I learnt at university and in my A Level Computing actually means something. &amp;nbsp;So often as a developer you can get away with not understanding the CPU, data structures or &lt;a href=&#34;http://en.wikipedia.org/wiki/Big_O_notation&#34;&gt;Big O notation&lt;/a&gt;&amp;nbsp;- I spent 10 years of my career forgetting all that. &amp;nbsp;But it turns out that if you do know about these things, and you apply that knowledge, you can come up with some very clever, very fast code.&lt;br /&gt;&lt;br /&gt;So, a refresher for those of us who studied this at school, and an intro for those who didn&amp;rsquo;t. &amp;nbsp;Beware - this post contains massive over-simplifications.&lt;br /&gt;&lt;br /&gt;The CPU is the heart of your machine and the thing that ultimately has to do all the operations, executing your program. &amp;nbsp;Main memory (RAM) is where your data (including the lines of your program) lives. &amp;nbsp;We&amp;rsquo;re going to ignore stuff like hard drives and networks here because &lt;a href=&#34;https://code.google.com/p/disruptor/&#34;&gt;the Disruptor&lt;/a&gt; is aimed at running as much as possible in memory.&lt;br /&gt;&lt;br /&gt;The CPU has several layers of cache between it and main memory, because even accessing main memory is too slow. &amp;nbsp;If you&amp;rsquo;re doing the same operation on a piece of data multiple times, it makes sense to load this into a place very close to the CPU when it&amp;rsquo;s performing the operation (think a loop counter - you don&amp;rsquo;t want to be going off to main memory to fetch this to increment it every time you loop around).&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-_rreUS6uUzs/TicrO8neu9I/AAAAAAAAIIs/1GVO_DbXcQo/s1600/CPUCache.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;http://1.bp.blogspot.com/-_rreUS6uUzs/TicrO8neu9I/AAAAAAAAIIs/1GVO_DbXcQo/s400/CPUCache.png&#34; width=&#34;298&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The closer the cache is to the CPU, the faster it is and the smaller it is. &amp;nbsp;L1 cache is small and very fast, and right next to the core that uses it. &amp;nbsp;L2 is bigger and slower, and still only used by a single core. &amp;nbsp;L3 is more common with modern multi-core machines, and is bigger again, slower again, and shared across cores on a single socket. &amp;nbsp;Finally you have main memory, which is shared across all cores and all sockets.&lt;br /&gt;&lt;br /&gt;When the CPU is performing an operation, it&amp;rsquo;s first going to look in L1 for the data it needs, then L2, then L3, and finally if it&amp;rsquo;s not in any of the caches the data needs to be fetched all the way from main memory. &amp;nbsp;The further it has to go, the longer the operation will take. &amp;nbsp;So if you&amp;rsquo;re doing something very frequently, you want to make sure that data is in L1 cache.&lt;br /&gt;&lt;br /&gt;Martin and Mike&amp;rsquo;s &lt;a href=&#34;http://www.infoq.com/presentations/LMAX&#34;&gt;QCon presentation&lt;/a&gt; gives some indicative figures for the cost of cache misses:&lt;br /&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&#34;text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;i&gt;Latency from CPU to&amp;hellip;&lt;/i&gt;&lt;/td&gt;&lt;td style=&#34;padding-left: 5px; padding-right: 5px;&#34;&gt;&lt;i&gt;Approx. number of&lt;br /&gt;CPU cycles&lt;/i&gt;&lt;/td&gt;&lt;td style=&#34;padding-left: 5px; padding-right: 5px;&#34;&gt;&lt;i&gt;Approx. time &lt;br /&gt;in nanoseconds&lt;/i&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Main memory&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;~60-80ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;QPI transit&lt;br /&gt;(between sockets, not drawn)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;~20ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L3 cache&lt;/td&gt;&lt;td&gt;~40-45 cycles, &lt;/td&gt;&lt;td&gt;~15ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L2 cache&lt;/td&gt;&lt;td&gt;~10 cycles, &lt;/td&gt;&lt;td&gt;~3ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L1 cache&lt;/td&gt;&lt;td&gt;~3-4 cycles,&lt;/td&gt;&lt;td&gt;~1ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Register&lt;/td&gt;&lt;td&gt;1 cycle&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;If you&amp;rsquo;re aiming for an end-to-end latency of something like 10 milliseconds, an 80 nanosecond trip to main memory to get some missing data is going to take a serious chunk of that.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Cache lines&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Now the interesting thing to note is that it&amp;rsquo;s not individual items that get stored in the cache - i.e. it&amp;rsquo;s not a single variable, a single pointer. &amp;nbsp;The cache is made up of cache lines, typically 64 bytes, and it effectively references a location in main memory. &amp;nbsp;A Java &lt;code&gt;long&lt;/code&gt; is 8 bytes, so in a single cache line you could have 8 &lt;code&gt;long&lt;/code&gt; variables.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/--A4eyU2Joec/TicxZW-yQoI/AAAAAAAAIIw/E40PtQOzMfE/s1600/CacheLines.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;301&#34; src=&#34;http://4.bp.blogspot.com/--A4eyU2Joec/TicxZW-yQoI/AAAAAAAAIIw/E40PtQOzMfE/s400/CacheLines.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;(I&amp;rsquo;m going to ignore the multiple cache-levels for simplicity)&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;This is brilliant if you&amp;rsquo;re accessing an array of longs - when one value from the array gets loaded into the cache, you get up to 7 more for free. &amp;nbsp;So you can walk that array very quickly. &amp;nbsp;In fact, you can iterate over any data structure that is allocated to contiguous blocks in memory very quickly. &amp;nbsp;I made a passing reference to this in the very &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-whats-so-special.html&#34;&gt;first post about the ring buffer&lt;/a&gt;, and it explains why we use an array for it.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So if items in your data structure aren&amp;rsquo;t sat next to each other in memory (linked lists, I&amp;rsquo;m looking at you) you don&amp;rsquo;t get the advantage of freebie cache loading. &amp;nbsp;You could be getting a cache miss for every item in that data structure.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;However, there is a drawback to all this free loading. &amp;nbsp;Imagine your &lt;code&gt;long&lt;/code&gt; isn&amp;rsquo;t part of an array. &amp;nbsp;Imagine it&amp;rsquo;s just a single variable. &amp;nbsp;Let&amp;rsquo;s call it &lt;code&gt;head&lt;/code&gt;, for no real reason. &amp;nbsp;Then imagine you have another variable in your class right next to it. &amp;nbsp;Let&amp;rsquo;s arbitrarily call it &lt;code&gt;tail&lt;/code&gt;. &amp;nbsp;Now, when you load &lt;code&gt;head&lt;/code&gt; into your cache, you get &lt;code&gt;tail&lt;/code&gt; for free. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-4mwTYGoo99U/Tic141EFSgI/AAAAAAAAII0/Q2Y18D38iN0/s1600/FalseSharing.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;http://3.bp.blogspot.com/-4mwTYGoo99U/Tic141EFSgI/AAAAAAAAII0/Q2Y18D38iN0/s400/FalseSharing.png&#34; width=&#34;358&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Which sounds fine. &amp;nbsp;Until you realise that &lt;code&gt;tail&lt;/code&gt; is being written to by your producer, and &lt;code&gt;head&lt;/code&gt; is being written to by your consumer. &amp;nbsp;These two variables aren&amp;rsquo;t actually closely associated, and in fact are going to be used by two different threads that might be running on two different cores.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-ORwRPsgwzVI/Tic4MDC9SHI/AAAAAAAAII4/1bBv6awjOj0/s1600/FalseSharingWriteHead.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;375&#34; src=&#34;http://4.bp.blogspot.com/-ORwRPsgwzVI/Tic4MDC9SHI/AAAAAAAAII4/1bBv6awjOj0/s400/FalseSharingWriteHead.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Imagine your consumer updates the value of &lt;code&gt;head&lt;/code&gt;. &amp;nbsp;The cache value is updated, the value in memory is updated, and any other cache lines that contain head are invalidated because other caches will not have the shiny new value. &amp;nbsp;And remember that we deal with the level of the whole line, we can&amp;rsquo;t just mark &lt;code&gt;head&lt;/code&gt; as being invalid.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-jPntzX3pGao/Tic6xdP9uXI/AAAAAAAAII8/THPUBZrvgX8/s1600/FalseSharingReadTail.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;385&#34; src=&#34;http://4.bp.blogspot.com/-jPntzX3pGao/Tic6xdP9uXI/AAAAAAAAII8/THPUBZrvgX8/s400/FalseSharingReadTail.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Now if some process running on the other core just wants to read the value of &lt;code&gt;tail&lt;/code&gt;, the whole cache line needs to be re-read from main memory. &amp;nbsp;So a thread which is nothing to do with your consumer is reading a value which is nothing to do with &lt;code&gt;head&lt;/code&gt;, and it&amp;rsquo;s slowed down by a cache miss.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Of course this is even worse if two separate threads are writing to the two different values.  Both cores are going to be invalidating the cache line on the other core and having to re-read it every time the other thread has written to it.  You&amp;rsquo;ve basically got write-contention between the two threads even though they&amp;rsquo;re writing to two different variables.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;This is called &lt;a href=&#34;http://en.wikipedia.org/wiki/False_sharing&#34;&gt;false sharing&lt;/a&gt;, because every time you access &lt;code&gt;head&lt;/code&gt; you get &lt;code&gt;tail&lt;/code&gt; too, and every time you access &lt;code&gt;tail&lt;/code&gt;, you get &lt;code&gt;head&lt;/code&gt; as well. &amp;nbsp;All this is happening under the covers, and no compiler warning is going to tell you that you just wrote code that&amp;rsquo;s going to be very inefficient for concurrent access.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;b&gt;Our solution - magic cache line padding&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;You&amp;rsquo;ll see that the Disruptor eliminates this problem, at least for architecture that has a cache size of 64 bytes or less, by adding padding to ensure the ring buffer&amp;rsquo;s sequence number is never in a cache line with anything else.&lt;/div&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;-webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px; border-collapse: collapse; font-family: Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Lucida Console&#39;, monospace; font-size: 12px; white-space: pre;&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;table id=&#34;src_table_0&#34; style=&#34;border-collapse: collapse; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: left;&#34;&gt;&lt;tbody style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;tr id=&#34;sl_svn234_33&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;    public&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p2&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p3&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p4&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p5&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p6&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p7&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;com&#34; style=&#34;color: #880000;&#34;&gt;// cache line padding&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn234_34&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; cursor &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; INITIAL_CURSOR_VALUE&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn234_35&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p8&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p9&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p10&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p11&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p12&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p13&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p14&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;com&#34; style=&#34;color: #880000;&#34;&gt;// cache line padding&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So there&amp;rsquo;s no false sharing, no unintended contention with any other variables, no needless cache misses.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;It&amp;rsquo;s worth doing this on your &lt;code&gt;Entry&lt;/code&gt; classes too - if you have different consumers writing to different fields, you&amp;rsquo;re going to need to make sure there&amp;rsquo;s no false sharing between each of the fields.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;EDIT: Martin wrote a more technically correct and detailed &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html&#34;&gt;post about false sharing&lt;/a&gt;, and posted performance results too.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
