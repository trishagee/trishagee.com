<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Lmax on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/lmax/index.xml</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Mon, 11 Mar 2013 00:00:00 UTC</updated>
    
    <item>
      <title>The Coalescing Ring Buffer</title>
      <link>http://trishagee.github.io/post/the_coalescing_ring_buffer</link>
      <pubDate>Mon, 11 Mar 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/the_coalescing_ring_buffer</guid>
      <description>&lt;p&gt;For anyone who is interested in what LMAX is up to, and is still following my blog, have a look at this post about the latest tool they&amp;rsquo;ve open sourced: the &lt;a href=&#34;http://nickzeeb.wordpress.com/2013/03/07/the-coalescing-ring-buffer/&#34;&gt;Coalescing Ring Buffer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile&#43;&#43;: When Agile Goes Well</title>
      <link>http://trishagee.github.io/post/agile_when_agile_goes_well</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/agile_when_agile_goes_well</guid>
      <description>&lt;p&gt;If you see anything about &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX&lt;/a&gt; - the Disruptor, Continuous Delivery, or even the selection criteria for hiring developers, you&amp;rsquo;ll see that LMAX is pretty keen on &lt;a href=&#34;http://agilemanifesto.org/&#34;&gt;Agile&lt;/a&gt;. &amp;nbsp;However, no-one&amp;rsquo;s documented the Agile process there, as far as I know. &amp;nbsp;Although I personally had it on my todo list, I never had the motivation, the hook to do it. &amp;nbsp;And I realised eventually that&amp;rsquo;s because I&amp;rsquo;m not sure it&amp;rsquo;s a process that would work very well for another team, in another company, working in another business.&lt;br /&gt;&lt;br /&gt;The agile process followed at LMAX is one that works for the individuals and the organisation there. &amp;nbsp;And that&amp;rsquo;s because they do one thing very well - they regularly examine the issues faced and adapt the process to try and combat them. &amp;nbsp;It&amp;rsquo;s an agile process that&amp;rsquo;s, well, very agile - it&amp;rsquo;s constantly changing. &amp;nbsp;Documenting it would only represent a single snapshot in time that would be out of date almost as soon as the next retrospective comes along.&lt;br /&gt;&lt;br /&gt;Any process can inspire &lt;a href=&#34;http://en.wikipedia.org/wiki/Cargo_cult#Pacific_cults_of_World_War_II&#34;&gt;Cargo Cultism&lt;/a&gt;, and the last thing I want to do is give people a process to without the tools to know whether it&amp;rsquo;s the right thing for them or not. &amp;nbsp;It&amp;rsquo;s more important to &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2011/09/what-my-hangovers-can-teach-you-about.html&#34;&gt;understand your goals, check progress and improve&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I was talking this through with a colleague, Israel, and he rightly pointed out the tool that LMAX can share with everyone else - thinking. &amp;nbsp;Examining the problems, visualising them, and trying out different ways to fix them.&lt;br /&gt;&lt;br /&gt;So at Devoxx &lt;a href=&#34;https://twitter.com/IsraKaos&#34;&gt;Israel&lt;/a&gt; and I presented a session on &amp;ldquo;Agile++&amp;rdquo;, using LMAX as a use case of when agile methods work. &amp;nbsp;The session examines four specific issues encountered at LMAX and the steps taken to solve them, and it&amp;rsquo;s available on Parleys. &amp;nbsp;Enjoy.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;object height=&#34;395&#34; width=&#34;395&#34;&gt;  &lt;param name=&#34;movie&#34; value=&#34;http://www.parleys.com/dist/share/parleysshare.swf&#34;/&gt;  &lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;/&gt;  &lt;param name=&#34;wmode&#34; value=&#34;direct&#34;/&gt;  &lt;param name=&#34;bgcolor&#34; value=&#34;#222222&#34;/&gt;  &lt;param name=&#34;flashVars&#34; value=&#34;sv=true&amp;amp;pageId=3486&#34;/&gt;  &lt;embed src=&#34;http://www.parleys.com/dist/share/parleysshare.swf&#34; type=&#34;application/x-shockwave-flash&#34; flashVars=&#34;sv=true&amp;amp;pageId=3486&#34; allowfullscreen=&#34;true&#34; bgcolor=&#34;#222222&#34; width=&#34;395&#34; height=&#34;395&#34;/&gt;&lt;/object&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Summary of Devoxx 2012</title>
      <link>http://trishagee.github.io/post/summary_of_devoxx_2012</link>
      <pubDate>Thu, 22 Nov 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/summary_of_devoxx_2012</guid>
      <description>&lt;div style=&#34;text-align: center;&#34;&gt;&lt;iframe allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34; height=&#34;300&#34; mozallowfullscreen=&#34;mozallowfullscreen&#34; src=&#34;http://player.vimeo.com/video/53695846?byline=0&amp;amp;portrait=0&amp;amp;badge=0&#34; webkitallowfullscreen=&#34;webkitallowfullscreen&#34; width=&#34;400&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;Devoxx topped off a crazy two months of conferences.  I&#39;ve heard people talk about the conference season in the past, and been slightly (OK, very) jealous of all that jet-setting. &amp;nbsp;I&#39;ll admit, however, to a slight feeling of relief that my focus until Christmas is pretty much going to be coding. &amp;nbsp;I hope.&lt;br /&gt;&lt;br /&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: left; margin-right: 1em; text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-tRGVrwupluI/UK4SNGpa6vI/AAAAAAAALTY/fKASg2z7mqE/s1600/NealFord.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;214&#34; src=&#34;http://2.bp.blogspot.com/-tRGVrwupluI/UK4SNGpa6vI/AAAAAAAALTY/fKASg2z7mqE/s320/NealFord.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Neal Ford&#39;s When Geek Leaks&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;So, how was Devoxx? &amp;nbsp;Well for starters, the calibre of the speakers and talks was excellent. &amp;nbsp;I learnt things in every one I went to - either something I could put into practice at work, or something I could do to improve my own presentations. &amp;nbsp;My favourite was Neal Ford&#39;s &lt;a href=&#34;http://www.devoxx.com/display/DV12/When+Geek+Leaks&#34;&gt;When Geek Leaks&lt;/a&gt; - Neal is a great speaker, and this talk was entertaining and informative. I&#39;m also currently reading his &lt;a href=&#34;http://www.amazon.com/gp/product/B0093J9K14/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B0093J9K14&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&#34;&gt;Presentation Patterns&lt;/a&gt; book, which is extremely useful. &amp;nbsp;Although obviously I give a bunch of presentations and have found some very handy tips in here, it&#39;s dead handy for everyone, even if you&#39;re just presenting to your boss or team at work.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-Kw7t50i85x0/UK5TTwOWQ7I/AAAAAAAALU8/W1rA0ulMtnA/s1600/IMG_6383.JPG&#34; imageanchor=&#34;1&#34; style=&#34;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;320&#34; src=&#34;http://4.bp.blogspot.com/-Kw7t50i85x0/UK5TTwOWQ7I/AAAAAAAALU8/W1rA0ulMtnA/s320/IMG_6383.JPG&#34; width=&#34;305&#34; /&gt;&lt;/a&gt;&lt;/div&gt;The great thing about Devoxx is being able to meet all the European-based people in the Java space. People fight to get to JavaOne, but Devoxx is a lot easier if you&#39;re based over this side of the pond. It&#39;s also easy to run into people in either the exhibition area (where lunch is served, so everyone ends up there at some point), or the central corridor between the rooms (which everyone has to go through at some point). &amp;nbsp;It was really awesome to have so many people grab me either at the &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; booth or when I was sat at the desks in the corridor. &amp;nbsp;I really like that venue for a conference, the only downside is the seats are so comfortable, people fall asleep in the talks. &amp;nbsp;Even in our presentation (how rude).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I have a lot of personal highlights from Devoxx now I&#39;m finally free to think about it:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;a href=&#34;http://2.bp.blogspot.com/--qnZ2LiLA3Q/UK4eKBMm8gI/AAAAAAAALTs/ppE_fURIttM/s1600/Keynote.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;212&#34; src=&#34;http://2.bp.blogspot.com/--qnZ2LiLA3Q/UK4eKBMm8gI/AAAAAAAALTs/ppE_fURIttM/s320/Keynote.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;li&gt;It was fun making a couple of guest appearances in the keynote, firstly as one of Stephen Chin&#39;s&amp;nbsp;&lt;a href=&#34;http://steveonjava.com/nighthacking/&#34;&gt;Nighthacking&lt;/a&gt; crew and then to celebrate the &lt;a href=&#34;http://www.londonjavacommunity.co.uk/&#34;&gt;London Java Community&lt;/a&gt; being re-elected to the Java Community Process Executive Committee (with a &lt;a href=&#34;http://jcp.org/en/whatsnew/elections&#34;&gt;massive 33% of the vote&lt;/a&gt;!).&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Another re-run of &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2012/10/javaone-problem-with-women-technical.html&#34;&gt;The Problem With Women&lt;/a&gt;. &amp;nbsp;If anything, this went even better than when I ran it at JavaOne. What I really loved about the session is the sheer number of men who turned up. &amp;nbsp;it&#39;s tempting to assume they&#39;re there to heckle, but in fact their active&amp;nbsp;participation&amp;nbsp;in the subject proves to me that the men in this industry are very much on board with trying to address the gender balance. &amp;nbsp;As always, I have so much more to say on this subject, so I&#39;ll make a note to write a separate blog post. &amp;nbsp;In summary, although there are differences in the contributions from the audience in these sessions, there are common themes and a willingness to get involved and Do Something.&lt;/li&gt;&lt;/ul&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: right; margin-left: 1em; text-align: right;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-6wqO__6WfF0/UK4_h5TkS3I/AAAAAAAALUE/B2eM4iLNPm8/s1600/Agile++.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;253&#34; src=&#34;http://2.bp.blogspot.com/-6wqO__6WfF0/UK4_h5TkS3I/AAAAAAAALUE/B2eM4iLNPm8/s320/Agile++.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;font-size: 13px; text-align: center;&#34;&gt;Agile++ with Israel Boza Rodriguez&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;The exclusive premier of the new Agile++ talk, co-presented with a colleague of mine from&amp;nbsp;&lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX&lt;/a&gt;. &amp;nbsp;The aim of this presentation was to talk about where you go when your organisation starts with a great agile grounding - what problems might you face and how do you tackle them. &amp;nbsp;Bit confusing for me giving this talk since I was still in LMAX-mode, and I&#39;m very grateful to&amp;nbsp;&lt;a href=&#34;http://www.10gen.com/&#34;&gt;10gen&lt;/a&gt;&amp;nbsp;for not only allowing me to present this, but actually promoting it for us as well. I&#39;d love to do this session again, I&#39;d like to work out how to without having a split personality as an LMAX person and a MongoDB person.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Not everything can go swimmingly, so I should probably make an apology for giving the Shortest Talk Ever on Wednesday. &amp;nbsp;It was supposed to be a 20 minute talk about the benefits of open sourcing your software, but it ended up being more like a lightning talk. &amp;nbsp;Lessons learned: 1) no matter how much you think you have to say about a subject, having the speaker notes is still very important (to me) and 2) a bit more preparation, updating the talk given my new role, would have been extremely beneficial - as it was, I cut a lot of the content on the fly and had nothing to replace it with. &amp;nbsp;Oh well, you live and learn.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I also had a new experience on Tuesday, being on the MongoDB booth in the exhibition space. &amp;nbsp;This was really educational too:&lt;/div&gt;&lt;div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-CnQ0T_R5V_k/UK4_ogZX7JI/AAAAAAAALUM/5OeVyDv5yws/s1600/TrishaBoothBabe.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;241&#34; src=&#34;http://4.bp.blogspot.com/-CnQ0T_R5V_k/UK4_ogZX7JI/AAAAAAAALUM/5OeVyDv5yws/s320/TrishaBoothBabe.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;I&#39;m glad I had a week of intensive MongoDB training the week before, I could actually answer all the technical questions thrown at me - yay me! &amp;nbsp;It&#39;s true that educating people is a really good way to learn stuff.&lt;/li&gt;&lt;li&gt;People are really interested in MongoDB. Many are using it already, but even more are wanting to learn about NoSQL in general, and Mongo specifically. &amp;nbsp;It was really awesome that &lt;a href=&#34;http://www.devoxx.com/display/DV12/Stephan+Janssen&#34;&gt;Stephan&lt;/a&gt; gave a massive boost to Mongo&#39;s reputation, describing how the central data store for the conference technology was MongoDB running on a&amp;nbsp;&lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry&amp;nbsp;Pi&lt;/a&gt;. &amp;nbsp;You don&#39;t get cooler than that. &amp;nbsp;Numerous&amp;nbsp;other speakers gave very positive stories of using MongoDB too, so we had a lot of people stop by the stand to ask us what it was all about.&lt;/li&gt;&lt;li&gt;Although I was nervous of being on the stand after &lt;a href=&#34;http://www.insightofanintern.com/2012/10/02/insight-of-an-intern-sexism-in-tech/&#34;&gt;Ceri&#39;s experiences&lt;/a&gt;, I didn&#39;t notice anyone doubting my ability as a technical person despite being of the female&amp;nbsp;persuasion&amp;nbsp; &amp;nbsp;I only had one conversation where the (male) developer I was speaking to kept addressing his questions to the (non-technical) (male) sales person instead of me. &amp;nbsp;But that&#39;s fine, I just kept answering the questions, and maybe I&#39;ve made a slight dent on his (clearly&amp;nbsp;subconscious) assumption that women aren&#39;t techies. &amp;nbsp;I still think the best way to address problems like this is to keep persevering, keep being visible, and to not let your assumptions about what other people are thinking override your own confidence in your abilities.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;And finally...&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-KGWIzLonLqU/UK5CX5bYQyI/AAAAAAAALUo/-c-Sn-8ToNM/s1600/DevoxxRobots.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;141&#34; src=&#34;http://2.bp.blogspot.com/-KGWIzLonLqU/UK5CX5bYQyI/AAAAAAAALUo/-c-Sn-8ToNM/s320/DevoxxRobots.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Robots seem to be cool again, and I, for one, welcome our new automated masters. &amp;nbsp;I was totally blown away by the&amp;nbsp;choreographed&amp;nbsp;dancing robotos on stage as a lead up to the keynote. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I think the only way to top that for &lt;a href=&#34;http://www.devoxx.com/display/UK13/Home&#34;&gt;Devoxx UK&lt;/a&gt; is Robot Dancing&amp;nbsp;Tyrannosaurus&amp;nbsp;Rexes. &amp;nbsp;On caffeine. &amp;nbsp;Destroying Lego cities.&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>QCon London 2012</title>
      <link>http://trishagee.github.io/post/qcon_london_2012</link>
      <pubDate>Tue, 27 Mar 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/qcon_london_2012</guid>
      <description>&lt;p&gt;I&amp;rsquo;m late with my write-up of &lt;a href=&#34;http://qconlondon.com/london-2012/&#34;&gt;QCon&lt;/a&gt;, and what&amp;rsquo;s worse, it will be partial - &amp;ldquo;sadly&amp;rdquo; I was in Lanzarote on a training week with the running club from the Thursday (8th) so I missed most of it.&amp;nbsp; A sacrifice I had to make for 7 days in the sunshine….&lt;br /&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;b&gt;Firstly, me me me&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I presented the talk I &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2012/03/new-disruptor-presentation-unveiled-to.html&#34;&gt;previewed at Skillsmatter&lt;/a&gt; the previous week, something I was calling the User&amp;rsquo;s Guide to the Disruptor, but actually turned out to be how-can-Trish-fill-95-slides-with-pictures-and-finish-in-under-40-minutes.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The audience was different to the &lt;a href=&#34;http://skillsmatter.com/&#34;&gt;Skillsmatter&lt;/a&gt; event, not surprisingly.&amp;nbsp; What was surprising is that I expected people at the conference to be less aware of &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;the Disruptor&lt;/a&gt;, and those who came to the Disruptor-only LJC event to have had more exposure to it.&amp;nbsp; It was a (pleasant) surprise to see how many of the standing-room-only audience had not only heard of the Disruptor but had &lt;a href=&#34;http://mechanitis.blogspot.co.uk/search/label/disruptor&#34;&gt;read stuff about it&lt;/a&gt; (I always love it when people have read my blog), played with it and were even using it in anger.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Because of that, I think if anything the talk did not go into enough detail, or enough new stuff, to please everyone.&amp;nbsp; Tough crowd!&amp;nbsp; But it was gratifying to hear the audience correct me in some of my answers, and answer other people&amp;rsquo;s questions - it&amp;rsquo;s always nice to know people are listening.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Of course, I will post a link to the presentation when it&amp;rsquo;s available. &amp;nbsp;For now only the &lt;a href=&#34;http://qconlondon.com/dl/qcon-london-2012/slides/TrishaGee_ConcurrentProgrammingUsingTheDisruptor.pdf&#34;&gt;slides are online&lt;/a&gt;.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;b&gt;I enjoyed QCon&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;QCon was noticeably different to the other conferences I&amp;rsquo;ve been to in the last six months.&amp;nbsp; For one, it&amp;rsquo;s not a Java conference - sure, I was hosted on the Java track, but QCon is wider-ranging than just one technology platform.&amp;nbsp; I&amp;rsquo;m not sure if it&amp;rsquo;s because of this, or because it was based in the notoriously impatient London, but I felt like there was a message of &amp;ldquo;Look, let&amp;rsquo;s just get stuff done, OK?&amp;rdquo;.&amp;nbsp; Ultimately we get paid to deliver stuff for the business, and since my favourite question is always &amp;ldquo;but what are we trying to achieve?&amp;rdquo; I like to hear ideas around how to actually deliver.&amp;nbsp; Don&amp;rsquo;t get me wrong, I&amp;rsquo;ve loved the technology conferences - I like to hear about new stuff I had no idea about, and I really like the community vibe from them.&amp;nbsp; But it&amp;rsquo;s a nice change to be shaken up into thinking exactly &lt;i&gt;why&lt;/i&gt; we do all this.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;b&gt;The Data Panorama&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Firstly, Rebecca Parsons and &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt; from my old employer &lt;a href=&#34;http://www.thoughtworks.com/&#34;&gt;ThoughtWorks&lt;/a&gt; put Big Data into perspective.&amp;nbsp; Previously I hadn&amp;rsquo;t really cared about it - we process lots of data at &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX&lt;/a&gt; but we don&amp;rsquo;t really have to dig into it, so Big Data is not top of my &amp;ldquo;oooh I really worry about that&amp;rdquo; problems.&amp;nbsp; There were quite a few interesting points I took out of this:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-A6XxOlBvbMg/T3F3oFTMPFI/AAAAAAAAJlk/1uaS3_A3ozs/s1600/2012-03-07+09.58.29.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;240&#34; src=&#34;http://1.bp.blogspot.com/-A6XxOlBvbMg/T3F3oFTMPFI/AAAAAAAAJlk/1uaS3_A3ozs/s320/2012-03-07+09.58.29.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&amp;nbsp;- In the past, it was easy (and possibly even correct) to model the whole application based on the data you were collecting or manipulating (and probably storing in a relational database).&amp;nbsp; These days it&amp;rsquo;s not just the data from your app you need to worry about (and that can get big enough), but also all the news, blogs, twitter, and Facebook stuff generated by you and about you.&amp;nbsp; In addition, your data might not even be located with your app - the cloud has made the physical question of location redundant.&amp;nbsp; All of this pushes you towards an architecture which has to separate data from the application, and forces you to ponder your design.&amp;nbsp; I heard good arguments for &lt;a href=&#34;http://www.amazon.com/gp/product/B00794TAUG/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B00794TAUG&#34;&gt;Domain Driven Design&lt;/a&gt;&lt;img alt=&#34;&#34; border=&#34;0&#34; height=&#34;1&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=B00794TAUG&#34; style=&#34;border: none !important; margin: 0px !important;&#34; width=&#34;1&#34; /&gt; here, which is nice because we like that at LMAX.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- Reporting and analytics on Big Data must be more fluid.&amp;nbsp; There&amp;rsquo;s so much data about you, your users, your application, out there that you don&amp;rsquo;t even know the questions to ask.&amp;nbsp; Instead you want to be able to spot patterns in data you didn&amp;rsquo;t even know you had,&amp;nbsp; I thought this was dead interesting - I studied Computer Science and Artificial Intelligence at university, and we were told data mining using AI was going to be fundamental to companies who wanted to be on the bleeding edge.&amp;nbsp; Only now is it looking like people realise it&amp;rsquo;s becoming that important.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- Martin referred to Data Scientists and said he was suspicious of scientists.&amp;nbsp; I&amp;rsquo;d been reading &lt;a href=&#34;http://www.amazon.com/gp/product/B00139XTG4/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B00139XTG4&#34;&gt;The Black Swan&lt;/a&gt;&lt;img alt=&#34;&#34; border=&#34;0&#34; height=&#34;1&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=B00139XTG4&#34; style=&#34;border: none !important; margin: 0px !important;&#34; width=&#34;1&#34; /&gt; on the train in that morning and couldn&amp;rsquo;t help but wonder if he&amp;rsquo;s read the same thing - that was talking about how you should treat someone with suspicion if they suggest you can apply science and logic to anything that is… well, actually to anything other than actual science (by which he meant physics I believe).&amp;nbsp; By saying it&amp;rsquo;s a science you suggest it&amp;rsquo;s predictable and follows rules.&amp;nbsp; And if it was predictable, it wouldn&amp;rsquo;t be hard.&amp;nbsp; Big Data is anything other than predictable - the data could be corrupt (it&amp;rsquo;s safest to assume some of it is); it&amp;rsquo;s generated by people (and we all know how fickle they are); and if you&amp;rsquo;re collecting lots of it practically randomly, then cause/effect/correlation are not guaranteed.&amp;nbsp; So Martin suggests the term Data Journalist.&amp;nbsp; There was a storm on Twitter which suggested a certain amount of disagreement with this term, but I like it.&amp;nbsp; But then, I like to pretend I&amp;rsquo;m a writer and not a programmer.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- They gave some examples of using data to drive economic growth (e.g. &lt;a href=&#34;https://opendata.go.ke/&#34;&gt;Kenya&lt;/a&gt;) - what I thought was interesting about this is that it was a win-win situation - expose the data to grow technology skills, but get a lot of interesting/useful/socially responsible applications in return.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- Something I liked was about the idea of embracing &amp;ldquo;bad&amp;rdquo; data, stuff that&amp;rsquo;s not trustworthy for whatever reason.&amp;nbsp; You can assume that the good data overwhelms the bad but you can&amp;rsquo;t be sure.&amp;nbsp; By looking for more fluffy patterns, vague correlations, in your data, you might expose something interesting even if the data&amp;rsquo;s not &amp;ldquo;correct&amp;rdquo;.&amp;nbsp; As humans, we can&amp;rsquo;t expect that we won&amp;rsquo;t make a mistake - it&amp;rsquo;s better assume we will and work out how to deal with it.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- There was a call to not passively accept requirements, but to play an active role.&amp;nbsp; I like to think this ties in to my post about &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2012/02/why-customer-isnt-always-right.html&#34;&gt;working with your customer&lt;/a&gt;.&amp;nbsp; But then I would.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- I got a lot from this keynote, even if it was just a feeling of &amp;ldquo;I knew it!&amp;nbsp; I was right!&amp;ldquo;.&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;b&gt;Highly available systems in Erlang&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Joe Armstrong was a very interesting person to listen to, clearly someone who&amp;rsquo;s been there and done that. Even without the presentation, &lt;a href=&#34;http://qconlondon.com/dl/qcon-london-2012/slides/JoeArmstrong_BuildingHighlyAvailableSystemsInErlang.pdf&#34;&gt;the slides&lt;/a&gt; are interesting in their own right as they contain a lot of information and guidelines.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The points I took away are:&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- If part of the system fails, it&amp;rsquo;s not up to that part to fix itself.&amp;nbsp; You need special help to deal with failures.&amp;nbsp; If you fell over with a heart attack, you wouldn&amp;rsquo;t try and heal yourself, you&amp;rsquo;d get a medic&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- Isolation between threads/programs will mean that those different things cannot interfere with each other (i.e. no shared state).&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- My favourite quote was &amp;ldquo;If you make things synchronous you&amp;rsquo;ll bugger things up&amp;rdquo;.&amp;nbsp; In theory, it&amp;rsquo;s so much easier for us humans (programmers) to think synchronously.&amp;nbsp; But whenever you design your system to by asynchronous, you find that your system actually becomes simpler and not more complicated.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;b&gt;JVM performance optimizations at Twitter&amp;rsquo;s scale&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- I had a terrible view in the fully packed room, so I was just picking up phrases. I heard&amp;nbsp;&lt;a href=&#34;https://twitter.com/#!/asz&#34;&gt;Attila&lt;/a&gt;&amp;nbsp;mention the Uncanny Valley, a phenomenon I was introduced to by my sister when she was studying her Cybernetics PhD (Google it, I found it fascinating). &amp;nbsp;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&amp;nbsp;- There was a lot of really useful information about how the Java GC works.&amp;nbsp; It seemed to back up the (rough) premise we work on - stuff that&amp;rsquo;s very short-lived is fine, and stuff that lasts &amp;ldquo;forever&amp;rdquo; is fine - it&amp;rsquo;s the stuff in between which&amp;nbsp; cripples your system when it keeps getting shoved around.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;b&gt;Decisions Decisions&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;a href=&#34;http://dannorth.net/&#34;&gt;Dan North&lt;/a&gt; was, as always, an excellent speaker.&amp;nbsp; He entertained us but got us all thinking.&amp;nbsp; Five years ago at QCon London (my very first conference ever, and the thing that motivated me to &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2007/03/qcon-london.html&#34;&gt;start a professional blog&lt;/a&gt;), I saw Dan speaking and I was inspired to think about my working practices.&amp;nbsp; He was talking about BDD at the time, which was a relatively new concept to me.&amp;nbsp; I came away from that QCon with clearer ideas of what awesome development practices should look like.&amp;nbsp; Never did I imagine that five years later, not only would I be working in an environment which follows a lot of those practices (and pioneers many more) but that I would actually be speaking at the same conference.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-dSflRhQmCtU/T3F3eta5bUI/AAAAAAAAJlU/TSJDG-V23Ck/s1600/2012-03-07+16.47.15.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;240&#34; src=&#34;http://4.bp.blogspot.com/-dSflRhQmCtU/T3F3eta5bUI/AAAAAAAAJlU/TSJDG-V23Ck/s320/2012-03-07+16.47.15.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;I&amp;rsquo;ve come a long way since then, and of course, Dan isn&amp;rsquo;t talking about the same things either. &amp;nbsp;I&amp;rsquo;ve been to a lot of conferences this year, and I heard nothing really preaching to the &amp;ldquo;meta-agile&amp;rdquo; LMAX (still have a post pending about our agile practices&amp;hellip;).&amp;nbsp; When it comes to agile, there seem to be very few people who we can learn off - don&amp;rsquo;t get me wrong, there are lots of things we want to improve on, which is why we&amp;rsquo;re looking for people to learn off.&amp;nbsp; But most people are still preaching TDD and we want to know &amp;ldquo;what next?&amp;rdquo;. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Well, Dan took everything we thought we knew, and ripped it to pieces.&amp;nbsp; Taught us to challenge everything we think we know.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;It was irritating actually because he had no answers.&amp;nbsp; But he did tell us that the answers we think we already have might not be the right ones….&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Well worth watching his talk when it comes online, I really can&amp;rsquo;t summarise it here.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;b&gt;Developers Have a Mental Disorder&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I nearly missed this ending keynote.&amp;nbsp; I&amp;rsquo;m so glad I didn&amp;rsquo;t,&amp;nbsp;Greg Young&amp;nbsp;is awesome at ranting.&amp;nbsp; He said developers have a disease - we overcomplicate things, when we try to simplify things.&amp;nbsp; We want to abstract stuff, we love to look for patterns and reuse when actually sometimes we just need to solve the problem.&lt;br /&gt;&lt;br /&gt;In my notes I have &amp;ldquo;People come to conferences for answers, when they should be remembering to use their brains&amp;rdquo;.&amp;nbsp; I assume that&amp;rsquo;s a quote from him, and not a comment I thought of at the time, but I wholeheartedly agree with it - if a shiny new technology solved your problems, you&amp;rsquo;d be out of a job.&amp;nbsp; Your job is to take the problem and figure out how to solve it.&amp;nbsp; Not to drag and drop an answer into place.&lt;br /&gt;&lt;br /&gt;Another talk that I can&amp;rsquo;t do justice to, watch the video when it comes online.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;div class=&#34;p2&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;b&gt;…and finally….&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;At the end of the day, the &lt;a href=&#34;http://www.atlassian.com/&#34;&gt;Atlassian&lt;/a&gt;-sponsored community night was awesome.&amp;nbsp; I got to chat to (be prepared for gratuitous name dropping here) &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt;; my old friend &lt;a href=&#34;http://www.simonbrown.je/&#34;&gt;Simon Brown&lt;/a&gt;; my ubiquitous &lt;a href=&#34;http://londonjavacommunity.co.uk/&#34;&gt;LJC&lt;/a&gt; colleagues &lt;a href=&#34;https://twitter.com/#!/karianna&#34;&gt;Martijn&lt;/a&gt; and &lt;a href=&#34;http://blog.jr0cket.co.uk/2012/03/qcon-london-2012-aftermath-return-of.html&#34;&gt;John&lt;/a&gt;; the &lt;a href=&#34;http://zeroturnaround.com/&#34;&gt;Zero Turnaround&lt;/a&gt; guys; a couple of ex-colleagues from Evolution / Detica; a heap of LMAX and ex-LMAX guys; and, of course, bundles and bundles of new interesting people.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;b&gt;Summary (i.e the short version for those who can&amp;rsquo;t be bothered to read this whole post)&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;Maybe it&amp;rsquo;s wishful thinking, but the messages I took from QCon were:&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-pASVscBgNZY/T3F3V-wBbuI/AAAAAAAAJlM/K8VlKf0FjLM/s1600/2012-03-07+17.49.55.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;320&#34; src=&#34;http://1.bp.blogspot.com/-pASVscBgNZY/T3F3V-wBbuI/AAAAAAAAJlM/K8VlKf0FjLM/s320/2012-03-07+17.49.55.jpg&#34; width=&#34;240&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;If you want to solve the problem your business has, you might want to model your system around their world.&amp;nbsp; Funny, that sounds suspiciously like Domain Driven Design.&lt;/li&gt;&lt;li&gt;Synchronous is bad, mmmkay?&amp;nbsp;&lt;/li&gt;&lt;li&gt;Hardcore understanding of what the computer is really doing seems to be coming back into fashion.&amp;nbsp; Hmmm, I wonder who started that…? (tongue firmly in cheek, we can&amp;rsquo;t have been the only ones)&lt;/li&gt;&lt;li&gt;&amp;ldquo;You can&amp;rsquo;t tune something you don&amp;rsquo;t understand&amp;rdquo; - testing and monitoring is kinda important.&lt;/li&gt;&lt;li&gt;Our business is all about trade offs.&amp;nbsp; There is no perfect solution, they pay us because it&amp;rsquo;s very very hard to work out something that&amp;rsquo;s Good Enough.&lt;/li&gt;&lt;li&gt;Ultimately it feels like back to basics: understand the problem; model the domain, and have sympathy for the hardware that&amp;rsquo;s running your solution.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;My Corporate Bit&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;QCon overall turned out to be a bit of an LMAX fest in the end, with &lt;a href=&#34;http://bad-concurrency.blogspot.co.uk/&#34;&gt;Mike&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://mechanical-sympathy.blogspot.co.uk/&#34;&gt;Martin&lt;/a&gt;&amp;nbsp;and Andy Stewart (our Chief Lord Business Analyst), all giving presentations there as well as me.&amp;nbsp; It&amp;rsquo;s nice to be on home turf, and it&amp;rsquo;s very cool to see that we have such a range of things to talk about that so many of us are invited to speak.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;b&gt;PS&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I just found out there&amp;rsquo;s a &lt;a href=&#34;http://qconnewyork.com/&#34;&gt;QCon in New York&lt;/a&gt;.&amp;nbsp; My invitation seems to have got lost in the post.&amp;nbsp; Don&amp;rsquo;t suppose anyone wants me to speak there…?&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to make your CV Not Suck</title>
      <link>http://trishagee.github.io/post/how_to_make_your_cv_not_suck</link>
      <pubDate>Wed, 21 Dec 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/how_to_make_your_cv_not_suck</guid>
      <description>

&lt;p&gt;When you&amp;rsquo;re applying for a job at &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX&lt;/a&gt;, your CV (or résumé, for our American readers) usually comes through me and I decide whether
to call you for a technical phone screen.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to let you into a secret.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to tell you the criteria I use when judging your CV.&lt;/p&gt;

&lt;p&gt;Now, you could say this is a foolish thing for me to do, because now when you apply you&amp;rsquo;ll be &amp;ldquo;cheating&amp;rdquo; and writing your CV to pass
these guidelines.&lt;/p&gt;

&lt;p&gt;Good.&lt;/p&gt;

&lt;p&gt;LMAX isn&amp;rsquo;t the only company that&amp;rsquo;s going to judge your CV based on these criteria. I firmly believe that an increase in quality of the
CVs in our industry can only be A Good Thing.  An increase in the quality of &lt;em&gt;your&lt;/em&gt; CV is definitely A Good Thing for
&lt;em&gt;you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Even more importantly, if I get CVs that do not pass these basic criteria, now I know you either don&amp;rsquo;t read the &lt;a href=&#34;http://blogs.lmax.com/&#34;&gt;LMAX blogs&lt;/a&gt; (shame on
you), or you&amp;rsquo;re not able to follow simple instructions (bodes poorly for your ability to learn within the company).&lt;/p&gt;

&lt;p&gt;The thing that you have to keep in mind when you&amp;rsquo;re writing your CV is that the reader really does spend less than a minute reading it.
It&amp;rsquo;s not fair, true.  But it&amp;rsquo;s the way humans are. I&amp;rsquo;m not in HR or recruitment, I have a proper job as a software developer,
and I need to get back to that as soon as I can.  When I get CVs in batches of up to 12, as I regularly do,
I&amp;rsquo;m not free to spend more than 10 minutes going through all of them.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;The Easy Stuff&lt;/h2&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;You must be able to spell&lt;/h3&gt;

&lt;p&gt;You really must.  There are things called Spell Checkers and they are amazing.  Some of these new-fangled pieces of software even show
you your errors in this cool squiggly red underline in your document.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m reading your CV in Open Office, and if I see red squigglies under words that aren&amp;rsquo;t technologies or acronyms I&amp;rsquo;m going to wonder how
good your attention to detail is.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;You must use capital letters in the appropriate places&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s traditional to start a sentence with a capital.  It&amp;rsquo;s also traditional to use a capital &amp;ldquo;I&amp;rdquo; not &amp;ldquo;i&amp;rdquo; when referring to oneself. We&amp;rsquo;re
not 14 years old, we&amp;rsquo;re not writing an SMS to our mates.  We&amp;rsquo;re applying for a proper job paying proper money.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Correct grammar is appreciated&lt;/h3&gt;

&lt;p&gt;Whether you&amp;rsquo;re a native English-speaker or not, you need to get someone else who is a native English-speaker to check the prose in your
CV to see if it scans correctly. For me, it&amp;rsquo;s not about being prejudiced against you because you&amp;rsquo;re not a natural author,
it&amp;rsquo;s a) attention to detail again and b) your ability to make yourself understood.  If your sentence construction,
choice of words or simple comma placement is off, I&amp;rsquo;ll have to read that sentence a couple of times to parse it and it&amp;rsquo;s going to trip
me up and ruin my flow.  I want to get a good feel for you from reading your CV, so if I stumble a few times I&amp;rsquo;m not going to feel like
I connected with you.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Harder and fluffier&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;I don&amp;rsquo;t care which versions of Spring you&amp;rsquo;ve worked with&lt;/h3&gt;

&lt;p&gt;I know you need a checklist of technologies on your CV so it gets past the non-technical recruitment agents and get picked up via
automated searches.  This is a bigger problem with our industry than one I want to tackle right now.  So I&amp;rsquo;ll let you off having
buzzword bingo on your CV.  However, your CV needs to be more than just a list of technologies you have used vaguely,
or perhaps once read about.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s useful to me if a) you put the technology check list in a single place on your CV, b) you give an indication of your level of
proficiency in that technology (novice/competent/master) or length of time you&amp;rsquo;ve used it in a commercial environment,
and c) you organise them in some useful fashion - preferably the ones that are appropriate to the job you&amp;rsquo;re applying for near the top,
or at least those you&amp;rsquo;re happiest with at the top.  Alternatively put the checklist of technologies next to the role you used them in.&lt;/p&gt;

&lt;p&gt;Often I will completely ignore this section because I&amp;rsquo;m more interested in your ability to learn and your passion for what you do.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;I want to know about your passions&lt;/h3&gt;

&lt;p&gt;In the old days I used to fast forward to your hobbies and interests, but these days we&amp;rsquo;re encouraged not to put those on the CV in case
you&amp;rsquo;re judged against them.  Which seems like political correctness gone crazy, but then when you think about it you can infer a lot
about a person from their hobbies and interests, and therefore you could be pre-judging them based on some criteria that is not at all
associated with their ability to do the job.  For example, if they have hobbies that take them all over England I might infer they have
a car and can drive - OK, it&amp;rsquo;s a dumb example, but you get the idea.&lt;/p&gt;

&lt;p&gt;These days, given that I&amp;rsquo;m trying to find great team members to work with me at LMAX, I&amp;rsquo;m looking for things like: your blog; any
contributions to open source software; your involvement in a Java User Group (or other extra-curricular activity).  I&amp;rsquo;m not going to
discard you if you don&amp;rsquo;t have any of these things, but if you do it&amp;rsquo;s definitely extra brownie points for you.&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;I want to know if you worship at the altar of technology, or if you&amp;rsquo;re business-value driven&lt;/h3&gt;

&lt;p&gt;Either of these things is fine - we need people who are very business-focussed and people who are rabid about technology,
as well as all those in between, to build a good team.  Another axis of interest is people/process - are you passionate about people,
about building a good team, about helping them to deliver?&lt;/p&gt;

&lt;p&gt;Getting a feel for where you sit on these axes is not for me to discard you, but if you look like you&amp;rsquo;re strongly in one of these camps
and I feel like we need a team member to really push that area, then you stand a much better chance of getting a phone interview.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll get an indication of where you are by the way you talk about your roles and your achievements.  This does not help me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Senior Developer on a web administration application.  Product was implemented using JavaScript, HTML, Spring, Hibernate, JMS, and MySQL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is much more useful:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was part of a team of four developers implementing a web based administration application, commissioned to enable internal users to
update the settings of our reporting tool.  This saved the support staff approximately 4 hours every week,
as they no longer needed to manually update the database. We used agile techniques such as daily standups and weekly iterations in order
to provide quick feedback to the business.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(I made both of those up, by the way, before anyone starts trying to sue me for stealing something off their CV).&lt;/p&gt;

&lt;p&gt;Here I can see:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The size of the team, and your ability to work in a team&lt;/li&gt;
&lt;li&gt;You understood the business need you were trying to fulfill&lt;/li&gt;
&lt;li&gt;You have worked in an agile environment and at least pay lip service to why you were working that way.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don&amp;rsquo;t really care about the specific technologies you used, the fact that you mentioned web-based and database gives me enough of a
feel.&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Sometimes prospective employers really do stalk you&lt;/h3&gt;

&lt;p&gt;Personally I think claims that prospective employers will check every facet of your web presence are somewhat over-exaggerated.  If I
barely have 60 seconds to read your CV, I&amp;rsquo;m not going to check you out on Facebook, my life is too short.&lt;/p&gt;

&lt;p&gt;However, if you claim to have written a book I will look it up on
&lt;a href=&#34;http://amazon.com/?_encoding=UTF8&amp;amp;tag=trissramb-20&amp;amp;linkCode=ur2&amp;amp;camp=1789&amp;amp;creative=9325&#34;&gt;Amazon&lt;/a&gt;. If you have a publication or example
code, I will glance at those.  If you&amp;rsquo;ve worked for a company I&amp;rsquo;ve worked for in the past, I&amp;rsquo;ll look you up on
&lt;a href=&#34;http://uk.linkedin.com/in/trishagee&#34;&gt;LinkedIn&lt;/a&gt; to see if we have any common connections (or worse,
to see if I should remember you and simply don&amp;rsquo;t).  I&amp;rsquo;ll also use LinkedIn if your CV is not screaming yes or no,
to see if there&amp;rsquo;s an extra dimension in your profile which will tip me one way or the other.&lt;/p&gt;

&lt;p&gt;So be aware of your web presence, particularly something that is aimed at your professional image like LinkedIn,
and make sure it represents you the way you want it to.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;This post might be simply a good way to increase my own workload - every CV I get from now on may be an automatic pass,
and then I have to call all of you before I can start weeding you out.&lt;/p&gt;

&lt;p&gt;But I don&amp;rsquo;t mind too much about that.  I get concerned sometimes that good people are not getting the interviews they deserve,
not just at LMAX but across the industry, because they get almost no good CV advice.  Frequently the people who are the first to read
CVs are agencies who are not technologists.  By all means, have words on there that will make your CV appear on their search results.&lt;br /&gt;
But you need to put something on there for me, a real developer, because strings of keywords tell me nothing about you.&lt;/p&gt;

&lt;p&gt;If I can improve the quality of just one person&amp;rsquo;s CV with this post, I&amp;rsquo;m happy.  If I have given you that first step towards that job
you &lt;em&gt;really&lt;/em&gt; want, then that&amp;rsquo;s even better.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A NYSE Product Manager and an LMAX Developer walk into a low latency trading seminar...</title>
      <link>http://trishagee.github.io/post/a_nyse_product_manager_and_an_lmax_developer_walk_into_a_low_latency_trading_seminar</link>
      <pubDate>Wed, 09 Nov 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/a_nyse_product_manager_and_an_lmax_developer_walk_into_a_low_latency_trading_seminar</guid>
      <description>&lt;p&gt;&amp;ldquo;What&amp;hellip; exactly&amp;hellip; were you guys looking to get out of today&amp;rsquo;s event? Because&amp;hellip;&amp;rdquo;&lt;br /&gt;&lt;br /&gt;&amp;ldquo;Because we&amp;rsquo;re girls?&amp;rdquo;&lt;br /&gt;&lt;br /&gt;&amp;ldquo;Um&amp;hellip; yes&amp;hellip;&amp;rdquo;&lt;br /&gt;&lt;br /&gt;Kim impetuously opts for The Truth: &amp;ldquo;We&amp;rsquo;re here to meet men.&amp;rdquo;&lt;br /&gt;&lt;br /&gt;Our interrogator looks round dubiously. &lt;br /&gt;&lt;br /&gt;&amp;ldquo;No, really, why are you here?&amp;rdquo;&lt;br /&gt;&lt;br /&gt;Phew. &amp;nbsp;My reputation is intact&lt;sup&gt;1&lt;/sup&gt;&lt;br /&gt;&lt;br /&gt;Kim eloquently describes what her situation is as Product Manager and the criteria she&amp;rsquo;s measuring third party products against. &amp;nbsp;I explain how LMAX aims to be the fastest retail exchange in the world, and therefore low latency is a tiny bit important to us. &amp;nbsp;I talk about how we created &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;The Disruptor&lt;/a&gt; on our path to achieve that goal. &amp;nbsp;The guys gathered around us look a little&amp;hellip; shell-shocked.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m exaggerating for Dramatic Effect. &amp;nbsp;Before anyone starts getting upset about the only two girls at the event who weren&amp;rsquo;t staff or hospitality being singled out, you have to give the guys credit. &amp;nbsp;They approached us, engaged us in conversation, and had a very serious question about what we were after, and was there anything the vendor could do to either improve their offering or to make their sales pitch more appealing.&lt;br /&gt;&lt;br /&gt;And don&amp;rsquo;t get me wrong - it&amp;rsquo;s brilliant being different in a situation like that, if people are brave / foolish / drunk enough to talk to you. &amp;nbsp;It beats the hell out of sitting in a corner trying to get up the nerve to speak to Strangers (been there, done that).&lt;br /&gt;&lt;br /&gt;But it is quite a contrast, even from the Java events (JAX London, Java One). &amp;nbsp;There, I was in a select group of people of the female&amp;nbsp;persuasion. &amp;nbsp;But I was also part of a community, and treated as A Developer. &amp;nbsp;At very specialised events (low latency, high performance in particular) diversity is almost non-existent. &amp;nbsp;You can count the number of women on one hand (if you can see any at all) and even the developers wear suits (poor bastards). &amp;nbsp;However it would probably be better if you could hide your surprise at hearing technical terminology coming out of a woman&amp;rsquo;s mouth. &lt;br /&gt;&lt;br /&gt;But&amp;hellip; I kinda like it. &amp;nbsp;Yes, I&amp;rsquo;m an alien. &amp;nbsp;Yes, I&amp;rsquo;m special. &amp;nbsp;But if it means you make the extra effort to speak to me, I can live with that.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;nbsp;&amp;ldquo;Extra extra, read all about it! &lt;i&gt;Blogger And International Conference Speaker Only Does It To Meet Boys&lt;/i&gt;!&amp;rdquo; &amp;nbsp;Not quite &lt;i&gt;Jordan Stalks Rugby Ace For Sperm Donor&lt;/i&gt;. &amp;nbsp;Which I really did see this morning.&lt;br /&gt;&lt;br /&gt;EDIT: oh yes, and of course I forgot to plug my panel at Devoxx next week: &lt;a href=&#34;http://devoxx.com/display/DV11/Why+We+Shouldn%27t+Target+Women&#34;&gt;&amp;ldquo;Why we shouldn&amp;rsquo;t target women&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaOne: Initial Observations</title>
      <link>http://trishagee.github.io/post/javaone_initial_observations</link>
      <pubDate>Tue, 04 Oct 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/javaone_initial_observations</guid>
      <description>&lt;p&gt;So I&amp;rsquo;ve been at JavaOne for the better part of three days, it&amp;rsquo;s time to record some of my observations so far:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The wireless access is rubbish.&lt;/li&gt;&lt;li&gt;&amp;lt;Gross generalisation&amp;gt; technical people are not natural public speakers. &amp;nbsp;Makes me feel better about the presentations I&amp;rsquo;m going to be giving (see &lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/events/32877942/&#34;&gt;A Beginner&amp;rsquo;s Guide to Hardcore Concurrency&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;The sessions are less useful than getting out and chatting. &amp;nbsp;I&amp;rsquo;ve had a really excellent time, I&amp;rsquo;ve met: people from other Java User Groups; the &lt;a href=&#34;http://jduchess.org/&#34;&gt;Duchess&lt;/a&gt; girls; other Duke Award winners; the &lt;a href=&#34;http://www.azulsystems.com/&#34;&gt;Azul&lt;/a&gt; guys; guys (well, girls) from O&amp;rsquo;Reilly books; JCP members and many random and awesome people.&lt;/li&gt;&lt;li&gt;Everyone thinks that Large is an acceptable default t-shirt size (it&amp;rsquo;s not). &amp;nbsp;Vendors - if you&amp;rsquo;re really serious about appealing to The Other Gender you need to stock XS, if not actual skinny tees.&lt;/li&gt;&lt;li&gt;If you&amp;rsquo;re running a conference, you should probably have your projection screens &lt;i&gt;above&lt;/i&gt; the height of the audience members&amp;rsquo; heads&lt;/li&gt;&lt;li&gt;People at JavaOne are dead friendly. &amp;nbsp;I&amp;rsquo;ve ended up in a lot of conversations just by virtue of standing alone for longer than 30 seconds. &amp;nbsp;It is noticeably easier to talk to people here than at the conferences I&amp;rsquo;ve been attending in London. &amp;nbsp;Not sure if that&amp;rsquo;s a location thing or a domain thing.&lt;/li&gt;&lt;li&gt;Socialising in London is &lt;a href=&#34;http://mechanitis.blogspot.com/2011/09/what-my-hangovers-can-teach-you-about.html&#34;&gt;great practice&lt;/a&gt; for this sort of event. &amp;nbsp;I am capable of taking advantage of free drink and still maintaining a conversation and staying upright in 6 inch heels.&lt;/li&gt;&lt;li&gt;I miss American breakfasts. &amp;nbsp;I&amp;rsquo;ve been gorging myself on pancakes, biscuits and gravy, and eggs benedict. &amp;nbsp;I&amp;rsquo;ll be calling my personal trainer as soon as I return.&lt;/li&gt;&lt;li&gt;Haven&amp;rsquo;t seen anything to contradict my view that San Francisco is not the Brit&amp;rsquo;s typical view of California - the weather is rubbish. &amp;nbsp;London has been hotter and sunnier this week.&lt;/li&gt;&lt;li&gt;Sharing an apartment with your CTO is not as weird as you might think. &amp;nbsp;Especially if you relegate him to the closet (no, that&amp;rsquo;s not a euphemism).&lt;/li&gt;&lt;li&gt;It&amp;rsquo;s difficult to remember to Tweet or blog when you&amp;rsquo;re totally engrossed in conversations with people.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Here&amp;rsquo;s a photo of me representing &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX&lt;/a&gt; as I pick up the &lt;a href=&#34;http://java.com/en/dukeschoice/index.jsp&#34;&gt;Duke Award&lt;/a&gt; we won for the &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;Disruptor&lt;/a&gt;:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-z4fj8X89gh8/TouHpDgIy4I/AAAAAAAAIKs/v_3k_WC8rCU/s1600/duke.JPG&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;313&#34; src=&#34;http://2.bp.blogspot.com/-z4fj8X89gh8/TouHpDgIy4I/AAAAAAAAIKs/v_3k_WC8rCU/s320/duke.JPG&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;(Thanks to &lt;a href=&#34;http://martijnverburg.blogspot.com/&#34;&gt;Martijn&lt;/a&gt; for taking the photo).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I was grabbed for an interview which should be available (un-edited - erk!) on&amp;nbsp;&lt;a href=&#34;http://java.net/&#34;&gt;java.net&lt;/a&gt;&amp;nbsp;at some point, I&amp;rsquo;ll post it when it&amp;rsquo;s available (if it&amp;rsquo;s not rubbish).&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaOne 2011</title>
      <link>http://trishagee.github.io/post/javaone_2011</link>
      <pubDate>Tue, 27 Sep 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/javaone_2011</guid>
      <description>&lt;p&gt;So, I&amp;rsquo;m off to &lt;a href=&#34;http://www.oracle.com/javaone/index.html&#34;&gt;JavaOne&lt;/a&gt; next week!&lt;br /&gt;&lt;br /&gt;This is an unexpected and very pleasant surprise. &amp;nbsp;I&amp;rsquo;ll be there with &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&lt;/a&gt; (of the &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;Disruptor&lt;/a&gt; fame), and &lt;a href=&#34;http://martijnverburg.blogspot.com/&#34;&gt;Martijn&lt;/a&gt; (that&amp;rsquo;s not going to get confusing at all). &amp;nbsp;Martin will be talking about the Disruptor on Thursday, and Martijn is busy talking about&amp;hellip; everything. &amp;nbsp;Most importantly for the &lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/&#34;&gt;LJC&lt;/a&gt; he&amp;rsquo;s representing us in our &lt;a href=&#34;http://mechanitis.blogspot.com/2011/05/london-java-community-elected-to-jcp.html&#34;&gt;shiny new JCP Executive Committee&lt;/a&gt; role.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m really looking forward to meeting pretty much anyone and everyone who&amp;rsquo;ll talk to me. &amp;nbsp;It&amp;rsquo;s the first international conference I&amp;rsquo;ve been to and I&amp;rsquo;m hoping to meet people I wouldn&amp;rsquo;t normally get a chance to see in London. &amp;nbsp;It&amp;rsquo;s also really cool to be able to represent both &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX&lt;/a&gt; and the London Java Community. Hopefully it won&amp;rsquo;t lead to some sort of split personality syndrome.&lt;br /&gt;&lt;br /&gt;Almost more excitingly, I&amp;rsquo;ll be doing a spot of shopping in New York on the way there and back. Because, well, it would be rude to fly over to the States and not drop in on my old home.&lt;br /&gt;&lt;br /&gt;Maybe I&amp;rsquo;ll get a chance to catch up with some of you in one of those amazing cities&amp;hellip;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Demystifying Memory Barriers</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers</link>
      <pubDate>Sun, 07 Aug 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers</guid>
      <description>&lt;p&gt;My recent slow-down in posting is because I&amp;rsquo;ve been trying to write a post explaining &lt;a href=&#34;http://en.wikipedia.org/wiki/Memory_barrier&#34;&gt;memory barriers&lt;/a&gt; and their applicability in &lt;a href=&#34;http://code.google.com/p/disruptor&#34;&gt;the Disruptor&lt;/a&gt;.  The problem is, no matter how much I read and no matter how many times I ask the ever-patient &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&lt;/a&gt; and &lt;a href=&#34;http://mikes-tech.blogspot.com/&#34;&gt;Mike&lt;/a&gt; questions trying to clarify some point, I just don&amp;rsquo;t intuitively grasp the subject.  I guess I don&amp;rsquo;t have the deep background knowledge required to fully understand.&lt;br /&gt;&lt;br /&gt;So, rather than make an idiot of myself trying to explain something I don&amp;rsquo;t really get, I&amp;rsquo;m going to try and cover, at an abstract / massive-simplification level, what I do understand in the area. &amp;nbsp;Martin has written a post&amp;nbsp;&lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html&#34;&gt;going into memory barriers&lt;/a&gt;&amp;nbsp;in some detail, so hopefully I can get away with skimming the subject.&lt;br /&gt;&lt;br /&gt;Disclaimer: any errors in the explanation are completely my own, and no reflection on the implementation of the Disruptor or on the &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX &lt;/a&gt;guys who actually do know about this stuff.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s the point?&lt;/b&gt;&lt;br /&gt;My main aim in this series of blog posts is to explain how the Disruptor works and, to a slightly lesser extent, why.  In theory I should be able to provide a bridge between the code and &lt;a href=&#34;http://disruptor.googlecode.com/files/Disruptor-1.0.pdf&#34;&gt;the technical paper&lt;/a&gt; by talking about it from the point of view of a developer who might want to use it.&lt;br /&gt;&lt;br /&gt;The paper mentioned memory barriers, and I wanted to understand what they were, and how they apply.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s a Memory Barrier?&lt;/b&gt;&lt;br /&gt;It&amp;rsquo;s a CPU instruction. &amp;nbsp;Yes, once again, we&amp;rsquo;re thinking about CPU-level stuff in order to get the performance we need (Martin&amp;rsquo;s famous Mechanical Sympathy). &amp;nbsp;Basically it&amp;rsquo;s an instruction to a) ensure the order in which certain operations are executed and b) influence visibility of some data (which might be the result of executing some instruction).&lt;br /&gt;&lt;br /&gt;Compilers and CPUs can re-order instructions, provided the end result is the same, to try and optimise performance. &amp;nbsp;Inserting a memory barrier tells the CPU and the compiler that what happened before that command needs to stay before that command, and what happens after needs to stay after. &amp;nbsp;All similarities to a trip to Vegas are entirely in your own mind.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-wae8jx9Ehuw/Tjg5oFT5M7I/AAAAAAAAIJI/J00e1Fy42DU/s1600/MemoryBarrier.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-wae8jx9Ehuw/Tjg5oFT5M7I/AAAAAAAAIJI/J00e1Fy42DU/s1600/MemoryBarrier.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The other thing a memory barrier does is force an update of the various CPU caches - for example, a write barrier will flush all the data that was written before the barrier out to cache, therefore any other thread that tries to read that data will get the most up-to-date version regardless of which core or which socket it might be executing by.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What&amp;rsquo;s this got to do with Java?&lt;/b&gt;&lt;br /&gt;Now I know what you&amp;rsquo;re thinking - this isn&amp;rsquo;t assembler. &amp;nbsp;It&amp;rsquo;s Java. &lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The magic incantation here is the word&amp;nbsp;&lt;code&gt;volatile&lt;/code&gt;&amp;nbsp;(something I felt was never clearly explained in the Java certification). &amp;nbsp;If your field is&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: monospace;&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;, the Java Memory Model inserts a write barrier instruction after you write to it, and a read barrier instruction before you read from it.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-mdQ0VfzF_XM/TjhOOM4PBEI/AAAAAAAAIJQ/K25fNMkKufU/s1600/MemoryBarrierWrite.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-mdQ0VfzF_XM/TjhOOM4PBEI/AAAAAAAAIJQ/K25fNMkKufU/s1600/MemoryBarrierWrite.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;/span&gt;&lt;br /&gt;This means if you write to a volatile field, you know that:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Any thread accessing that field after the point at which you wrote to it will get the updated value&amp;nbsp;&lt;/li&gt;&lt;li&gt;Anything you did before you wrote that field is guaranteed to have happened and any updated data values will also be visible, because the memory barrier flushed all earlier writes to the cache.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;b&gt;Example please!&lt;/b&gt;&lt;/div&gt;&lt;div&gt;So glad you asked. &amp;nbsp;It&amp;rsquo;s about time I started drawing doughnuts again.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;RingBuffer&lt;/a&gt;&amp;nbsp;&lt;code&gt;cursor&lt;/code&gt; is one of these magic volatile thingies, and it&amp;rsquo;s one of the reasons we can get away with implementing the Disruptor without locking.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-_JxCXwReRgA/TjhGfFrokHI/AAAAAAAAIJM/i_VC0M_K5hw/s1600/BarriersWriteExample.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;226&#34; src=&#34;http://2.bp.blogspot.com/-_JxCXwReRgA/TjhGfFrokHI/AAAAAAAAIJM/i_VC0M_K5hw/s400/BarriersWriteExample.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The Producer will obtain the next &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/AbstractEntry.java?spec=svn109&amp;amp;r=201&#34;&gt;Entry&lt;/a&gt; (or batch of them) and do whatever it needs to do to the entries, updating them with whatever values it wants to place in there. &amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;As you know&lt;/a&gt;, at the end of all the changes the producer calls the commit method on the ring buffer, which updates the sequence number. &amp;nbsp;This write of the volatile field (&lt;code&gt;cursor&lt;/code&gt;) creates a memory barrier which ultimately brings all the caches up to date (or at least invalidates them accordingly). &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At this point, the consumers can get the updated sequence number (8), and because the memory barrier also guarantees the ordering of the instructions that happened before then, the consumers can be confident that all changes the producer did to to the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/AbstractEntry.java?spec=svn109&amp;amp;r=201&#34;&gt;Entry&lt;/a&gt; at position 7 are also available.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&amp;hellip;and on the Consumer side?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;The sequence number on the Consumer is volatile, and read by a number of external objects - other &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;downstream&lt;/a&gt; consumers might be tracking this consumer&lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;,&lt;/a&gt;&amp;nbsp;and&amp;nbsp;the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/ProducerBarrier.java?spec=svn109&amp;amp;r=201&#34;&gt;ProducerBarrier&lt;/a&gt;/&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java?spec=svn109&amp;amp;r=242&#34;&gt;RingBuffer&lt;/a&gt; (depending on whether you&amp;rsquo;re looking at older or newer code) tracks it to make sure the the ring doesn&amp;rsquo;t wrap.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-qoKYeSC2_OM/Tj7HG5U6RaI/AAAAAAAAIJc/hnLVu3EL-kE/s1600/MemoryBarrierReadExample.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-qoKYeSC2_OM/Tj7HG5U6RaI/AAAAAAAAIJc/hnLVu3EL-kE/s1600/MemoryBarrierReadExample.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;So, if your downstream consumer (C2) sees that an earlier consumer (C1) reaches number 12, when C2 reads entries up to 12 from the ring buffer it will get all updates C1 made to the entries before it updated its sequence number.&lt;br /&gt;&lt;br /&gt;Basically everything that happens after C2 gets the updated sequence number (shown in blue above) must occur after everything C1 did to the ring buffer before updating its sequence number (shown in black).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Impact on performance&lt;/b&gt;&lt;br /&gt;Memory barriers, being another CPU-level instruction, don&amp;rsquo;t have the same &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html&#34;&gt;cost as locks&lt;/a&gt;&amp;nbsp; - the kernel isn&amp;rsquo;t interfering and arbitrating between multiple threads. &amp;nbsp;But&amp;nbsp;nothing comes for free. &amp;nbsp;Memory barriers do have a cost - the compiler/CPU cannot re-order instructions, which could potentially lead to not using the CPU as efficiently as possible, and refreshing the caches obviously has a performance impact. &amp;nbsp;So don&amp;rsquo;t think that using volatile instead of locking will get you away scot free.&lt;br /&gt;&lt;br /&gt;You&amp;rsquo;ll notice that the Disruptor implementation tries to read from and write to the sequence number as infrequently as possible. &amp;nbsp;Every read or write of a &lt;code&gt;volatile&lt;/code&gt; field is a relatively costly operation. However, recognising this also plays in quite nicely with batching behaviour - if you know you shouldn&amp;rsquo;t read from or write to the sequences too frequently, it makes sense to grab a whole batch of Entries and process them before updating the sequence number, both on the Producer and Consumer side. Here&amp;rsquo;s an example from &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/BatchConsumer.java?r=239&#34;&gt;BatchConsumer&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;table id=&#34;src_table_0&#34; style=&#34;-webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px; border-collapse: collapse; font-family: Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Lucida Console&#39;, monospace; font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; white-space: pre;&#34;&gt;&lt;tbody style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;tr id=&#34;sl_svn239_121&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_122&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;lit&#34; style=&#34;color: #006666;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_123&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;running&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_124&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_125&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_126&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_127&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; availableSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; consumerBarrier&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_128&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; availableSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_129&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_130&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; entry &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; consumerBarrier&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getEntry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_131&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; handler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;onAvailable&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_132&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nextSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;++;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_133&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_135&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; handler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;onEndOfBatch&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_136&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_137&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_138&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pln&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;color: #000088;&#34;&gt;&amp;hellip;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_142&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;typ&#34; style=&#34;color: #660066;&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; ex&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_143&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;{&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_144&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exceptionHandler&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;ex&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_145&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;sequence &lt;/b&gt;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_146&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nextSequence &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; entry&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;getSequence&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;lit&#34; style=&#34;color: #006666;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_147&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn239_148&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;(You&amp;rsquo;ll note this is the &amp;ldquo;old&amp;rdquo; code and naming conventions, because this is inline with my previous blog posts, I thought it was slightly less confusing than switching straight to the new conventions).&lt;br /&gt;&lt;br /&gt;In the code above, we use a local variable to increment during our loop over the entries the consumer is processing. &amp;nbsp;This means we read from and write to the volatile sequence field (shown in bold) as infrequently as we can get away with.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;In Summary&lt;/b&gt;&lt;br /&gt;Memory barriers are CPU instructions that allow you to make certain assumptions about when data will be visible to other processes. &amp;nbsp;In Java, you implement them with the &lt;code&gt;volatile&lt;/code&gt; keyword. &amp;nbsp;Using volatile means you don&amp;rsquo;t necessarily have to add locks willy nilly, and will give you performance improvements over using them. &amp;nbsp;However you need to think a little more carefully about your design, in particular how frequently you use volatile fields, and how frequently you read and write them.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;PS Given that the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;New World Order&lt;/a&gt; in the Disruptor uses totally different naming conventions now to everything I&amp;rsquo;ve blogged about so far, I guess the next post is mapping the old world to the new one.&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part two) - Magic cache line padding</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding</link>
      <pubDate>Fri, 22 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding</guid>
      <description>&lt;p&gt;We mention the phrase Mechanical Sympathy quite a lot, in fact it&amp;rsquo;s even &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&amp;rsquo;s blog title&lt;/a&gt;. &amp;nbsp;It&amp;rsquo;s about understanding how the underlying hardware operates and programming in a way that works with that, not against it.&lt;br /&gt;&lt;br /&gt;We get a number of comments and questions about the mysterious cache line padding in the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;RingBuffer&lt;/a&gt;, and I referred to it in the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html&#34;&gt;last post&lt;/a&gt;. &amp;nbsp;Since this lends itself to pretty pictures, it&amp;rsquo;s the next thing I thought I would tackle.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Comp Sci 101&lt;/b&gt;&lt;br /&gt;One of the things I love about working at &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX&lt;/a&gt; is all that stuff I learnt at university and in my A Level Computing actually means something. &amp;nbsp;So often as a developer you can get away with not understanding the CPU, data structures or &lt;a href=&#34;http://en.wikipedia.org/wiki/Big_O_notation&#34;&gt;Big O notation&lt;/a&gt;&amp;nbsp;- I spent 10 years of my career forgetting all that. &amp;nbsp;But it turns out that if you do know about these things, and you apply that knowledge, you can come up with some very clever, very fast code.&lt;br /&gt;&lt;br /&gt;So, a refresher for those of us who studied this at school, and an intro for those who didn&amp;rsquo;t. &amp;nbsp;Beware - this post contains massive over-simplifications.&lt;br /&gt;&lt;br /&gt;The CPU is the heart of your machine and the thing that ultimately has to do all the operations, executing your program. &amp;nbsp;Main memory (RAM) is where your data (including the lines of your program) lives. &amp;nbsp;We&amp;rsquo;re going to ignore stuff like hard drives and networks here because &lt;a href=&#34;https://code.google.com/p/disruptor/&#34;&gt;the Disruptor&lt;/a&gt; is aimed at running as much as possible in memory.&lt;br /&gt;&lt;br /&gt;The CPU has several layers of cache between it and main memory, because even accessing main memory is too slow. &amp;nbsp;If you&amp;rsquo;re doing the same operation on a piece of data multiple times, it makes sense to load this into a place very close to the CPU when it&amp;rsquo;s performing the operation (think a loop counter - you don&amp;rsquo;t want to be going off to main memory to fetch this to increment it every time you loop around).&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-_rreUS6uUzs/TicrO8neu9I/AAAAAAAAIIs/1GVO_DbXcQo/s1600/CPUCache.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;http://1.bp.blogspot.com/-_rreUS6uUzs/TicrO8neu9I/AAAAAAAAIIs/1GVO_DbXcQo/s400/CPUCache.png&#34; width=&#34;298&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The closer the cache is to the CPU, the faster it is and the smaller it is. &amp;nbsp;L1 cache is small and very fast, and right next to the core that uses it. &amp;nbsp;L2 is bigger and slower, and still only used by a single core. &amp;nbsp;L3 is more common with modern multi-core machines, and is bigger again, slower again, and shared across cores on a single socket. &amp;nbsp;Finally you have main memory, which is shared across all cores and all sockets.&lt;br /&gt;&lt;br /&gt;When the CPU is performing an operation, it&amp;rsquo;s first going to look in L1 for the data it needs, then L2, then L3, and finally if it&amp;rsquo;s not in any of the caches the data needs to be fetched all the way from main memory. &amp;nbsp;The further it has to go, the longer the operation will take. &amp;nbsp;So if you&amp;rsquo;re doing something very frequently, you want to make sure that data is in L1 cache.&lt;br /&gt;&lt;br /&gt;Martin and Mike&amp;rsquo;s &lt;a href=&#34;http://www.infoq.com/presentations/LMAX&#34;&gt;QCon presentation&lt;/a&gt; gives some indicative figures for the cost of cache misses:&lt;br /&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&#34;text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;i&gt;Latency from CPU to&amp;hellip;&lt;/i&gt;&lt;/td&gt;&lt;td style=&#34;padding-left: 5px; padding-right: 5px;&#34;&gt;&lt;i&gt;Approx. number of&lt;br /&gt;CPU cycles&lt;/i&gt;&lt;/td&gt;&lt;td style=&#34;padding-left: 5px; padding-right: 5px;&#34;&gt;&lt;i&gt;Approx. time &lt;br /&gt;in nanoseconds&lt;/i&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Main memory&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;~60-80ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;QPI transit&lt;br /&gt;(between sockets, not drawn)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;~20ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L3 cache&lt;/td&gt;&lt;td&gt;~40-45 cycles, &lt;/td&gt;&lt;td&gt;~15ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L2 cache&lt;/td&gt;&lt;td&gt;~10 cycles, &lt;/td&gt;&lt;td&gt;~3ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;L1 cache&lt;/td&gt;&lt;td&gt;~3-4 cycles,&lt;/td&gt;&lt;td&gt;~1ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Register&lt;/td&gt;&lt;td&gt;1 cycle&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;If you&amp;rsquo;re aiming for an end-to-end latency of something like 10 milliseconds, an 80 nanosecond trip to main memory to get some missing data is going to take a serious chunk of that.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Cache lines&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Now the interesting thing to note is that it&amp;rsquo;s not individual items that get stored in the cache - i.e. it&amp;rsquo;s not a single variable, a single pointer. &amp;nbsp;The cache is made up of cache lines, typically 64 bytes, and it effectively references a location in main memory. &amp;nbsp;A Java &lt;code&gt;long&lt;/code&gt; is 8 bytes, so in a single cache line you could have 8 &lt;code&gt;long&lt;/code&gt; variables.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/--A4eyU2Joec/TicxZW-yQoI/AAAAAAAAIIw/E40PtQOzMfE/s1600/CacheLines.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;301&#34; src=&#34;http://4.bp.blogspot.com/--A4eyU2Joec/TicxZW-yQoI/AAAAAAAAIIw/E40PtQOzMfE/s400/CacheLines.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;(I&amp;rsquo;m going to ignore the multiple cache-levels for simplicity)&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;This is brilliant if you&amp;rsquo;re accessing an array of longs - when one value from the array gets loaded into the cache, you get up to 7 more for free. &amp;nbsp;So you can walk that array very quickly. &amp;nbsp;In fact, you can iterate over any data structure that is allocated to contiguous blocks in memory very quickly. &amp;nbsp;I made a passing reference to this in the very &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-whats-so-special.html&#34;&gt;first post about the ring buffer&lt;/a&gt;, and it explains why we use an array for it.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So if items in your data structure aren&amp;rsquo;t sat next to each other in memory (linked lists, I&amp;rsquo;m looking at you) you don&amp;rsquo;t get the advantage of freebie cache loading. &amp;nbsp;You could be getting a cache miss for every item in that data structure.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;However, there is a drawback to all this free loading. &amp;nbsp;Imagine your &lt;code&gt;long&lt;/code&gt; isn&amp;rsquo;t part of an array. &amp;nbsp;Imagine it&amp;rsquo;s just a single variable. &amp;nbsp;Let&amp;rsquo;s call it &lt;code&gt;head&lt;/code&gt;, for no real reason. &amp;nbsp;Then imagine you have another variable in your class right next to it. &amp;nbsp;Let&amp;rsquo;s arbitrarily call it &lt;code&gt;tail&lt;/code&gt;. &amp;nbsp;Now, when you load &lt;code&gt;head&lt;/code&gt; into your cache, you get &lt;code&gt;tail&lt;/code&gt; for free. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-4mwTYGoo99U/Tic141EFSgI/AAAAAAAAII0/Q2Y18D38iN0/s1600/FalseSharing.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;http://3.bp.blogspot.com/-4mwTYGoo99U/Tic141EFSgI/AAAAAAAAII0/Q2Y18D38iN0/s400/FalseSharing.png&#34; width=&#34;358&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Which sounds fine. &amp;nbsp;Until you realise that &lt;code&gt;tail&lt;/code&gt; is being written to by your producer, and &lt;code&gt;head&lt;/code&gt; is being written to by your consumer. &amp;nbsp;These two variables aren&amp;rsquo;t actually closely associated, and in fact are going to be used by two different threads that might be running on two different cores.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-ORwRPsgwzVI/Tic4MDC9SHI/AAAAAAAAII4/1bBv6awjOj0/s1600/FalseSharingWriteHead.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;375&#34; src=&#34;http://4.bp.blogspot.com/-ORwRPsgwzVI/Tic4MDC9SHI/AAAAAAAAII4/1bBv6awjOj0/s400/FalseSharingWriteHead.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Imagine your consumer updates the value of &lt;code&gt;head&lt;/code&gt;. &amp;nbsp;The cache value is updated, the value in memory is updated, and any other cache lines that contain head are invalidated because other caches will not have the shiny new value. &amp;nbsp;And remember that we deal with the level of the whole line, we can&amp;rsquo;t just mark &lt;code&gt;head&lt;/code&gt; as being invalid.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-jPntzX3pGao/Tic6xdP9uXI/AAAAAAAAII8/THPUBZrvgX8/s1600/FalseSharingReadTail.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;385&#34; src=&#34;http://4.bp.blogspot.com/-jPntzX3pGao/Tic6xdP9uXI/AAAAAAAAII8/THPUBZrvgX8/s400/FalseSharingReadTail.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Now if some process running on the other core just wants to read the value of &lt;code&gt;tail&lt;/code&gt;, the whole cache line needs to be re-read from main memory. &amp;nbsp;So a thread which is nothing to do with your consumer is reading a value which is nothing to do with &lt;code&gt;head&lt;/code&gt;, and it&amp;rsquo;s slowed down by a cache miss.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Of course this is even worse if two separate threads are writing to the two different values.  Both cores are going to be invalidating the cache line on the other core and having to re-read it every time the other thread has written to it.  You&amp;rsquo;ve basically got write-contention between the two threads even though they&amp;rsquo;re writing to two different variables.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;This is called &lt;a href=&#34;http://en.wikipedia.org/wiki/False_sharing&#34;&gt;false sharing&lt;/a&gt;, because every time you access &lt;code&gt;head&lt;/code&gt; you get &lt;code&gt;tail&lt;/code&gt; too, and every time you access &lt;code&gt;tail&lt;/code&gt;, you get &lt;code&gt;head&lt;/code&gt; as well. &amp;nbsp;All this is happening under the covers, and no compiler warning is going to tell you that you just wrote code that&amp;rsquo;s going to be very inefficient for concurrent access.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;b&gt;Our solution - magic cache line padding&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;You&amp;rsquo;ll see that the Disruptor eliminates this problem, at least for architecture that has a cache size of 64 bytes or less, by adding padding to ensure the ring buffer&amp;rsquo;s sequence number is never in a cache line with anything else.&lt;/div&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;-webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px; border-collapse: collapse; font-family: Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Lucida Console&#39;, monospace; font-size: 12px; white-space: pre;&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;table id=&#34;src_table_0&#34; style=&#34;border-collapse: collapse; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: left;&#34;&gt;&lt;tbody style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;tr id=&#34;sl_svn234_33&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;    public&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p1&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p2&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p3&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p4&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p5&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p6&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p7&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;com&#34; style=&#34;color: #880000;&#34;&gt;// cache line padding&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn234_34&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; cursor &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; INITIAL_CURSOR_VALUE&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&#34;sl_svn234_35&#34; style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&#34;&gt;&lt;td class=&#34;source&#34; style=&#34;font-size: 12px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 4px; padding-right: 0px; padding-top: 0px; vertical-align: top; white-space: pre-wrap;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: &#39;Courier New&#39;, Courier, monospace;&#34;&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kwd&#34; style=&#34;color: #000088;&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p8&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p9&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p10&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p11&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p12&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p13&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; p14&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600;&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;com&#34; style=&#34;color: #880000;&#34;&gt;// cache line padding&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So there&amp;rsquo;s no false sharing, no unintended contention with any other variables, no needless cache misses.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;It&amp;rsquo;s worth doing this on your &lt;code&gt;Entry&lt;/code&gt; classes too - if you have different consumers writing to different fields, you&amp;rsquo;re going to need to make sure there&amp;rsquo;s no false sharing between each of the fields.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;EDIT: Martin wrote a more technically correct and detailed &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html&#34;&gt;post about false sharing&lt;/a&gt;, and posted performance results too.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part one) - Locks Are Bad</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad</link>
      <pubDate>Sat, 16 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad</guid>
      <description>&lt;p&gt;Martin Fowler has written a &lt;a href=&#34;http://martinfowler.com/articles/lmax.html&#34;&gt;&lt;span id=&#34;goog_1736243820&#34;&gt;&lt;/span&gt;really good article&lt;span id=&#34;goog_1736243821&#34;&gt;&lt;/span&gt;&lt;/a&gt; describing not only &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;the Disruptor&lt;/a&gt;, but also how it fits into the architecture at &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX&lt;/a&gt;. &amp;nbsp;This gives some of the context that has been missing so far, but the most frequently asked question is still &amp;ldquo;What is the Disruptor?&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m working up to answering that. &amp;nbsp;I&amp;rsquo;m currently on question number two: &amp;ldquo;Why is it so fast?&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;These questions do go hand in hand, however, because I can&amp;rsquo;t talk about why it&amp;rsquo;s fast without saying what it does, and I can&amp;rsquo;t talk about what it is without saying why it is that way.&lt;br /&gt;&lt;br /&gt;So I&amp;rsquo;m trapped in a circular dependency. &amp;nbsp;A circular dependency of blogging.&lt;br /&gt;&lt;br /&gt;To break the dependency, I&amp;rsquo;m going to answer question one with the simplest answer, and with any luck I&amp;rsquo;ll come back to it in a later post if it still needs explanation:&amp;nbsp;the Disruptor is a way to pass information between threads.&lt;br /&gt;&lt;br /&gt;As a developer, already my alarm bells are going off because the word &amp;ldquo;thread&amp;rdquo; was just mentioned, which means this is about concurrency, and Concurrency Is Hard.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Concurrency 101&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-jFd0nHVAUzA/Th6pstBr8rI/AAAAAAAAIH4/_eCHINrgH50/s1600/ThreadContention.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;231&#34; src=&#34;http://3.bp.blogspot.com/-jFd0nHVAUzA/Th6pstBr8rI/AAAAAAAAIH4/_eCHINrgH50/s400/ThreadContention.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Imagine two threads are trying to change the same value. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;Case One:&lt;/i&gt; Thread 1 gets there first:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;The value changes to &amp;ldquo;blah&amp;rdquo;&lt;/li&gt;&lt;li&gt;Then the value changes to &amp;ldquo;blahy&amp;rdquo; when Thread 2 gets there.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;i&gt;Case Two:&lt;/i&gt; Thread 2 gets there first:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;The value changes to &amp;ldquo;fluffy&amp;rdquo;&lt;/li&gt;&lt;li&gt;Then the value changes to &amp;ldquo;blah&amp;rdquo; when Thread 1 gets there.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;i&gt;Case Three:&lt;/i&gt; Thread 1 interrupts Thread 2:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Thread 2 gets the value &amp;ldquo;fluff&amp;rdquo; and stores it as &lt;code&gt;myValue&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Thread 1 goes in and updates value to &amp;ldquo;blah&amp;rdquo;&lt;/li&gt;&lt;li&gt;Then Thread 2 wakes up and sets the value to &amp;ldquo;fluffy&amp;rdquo;.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Case Three is probably the only one which is definitely wrong, unless you think the naive approach to wiki editing is OK (&lt;a href=&#34;http://code.google.com/&#34;&gt;Google Code&lt;/a&gt; Wiki, I&amp;rsquo;m looking at you&amp;hellip;). &amp;nbsp;In the other two cases it&amp;rsquo;s all about intentions and predictability. &amp;nbsp;Thread 2 might not care what&amp;rsquo;s in &lt;code&gt;value&lt;/code&gt;, the intention might be to append &amp;ldquo;y&amp;rdquo; to whatever is in there regardless. &amp;nbsp;In this circumstance, cases one and two are both correct.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;But if Thread 2 only wanted to change &amp;ldquo;fluff&amp;rdquo; to &amp;ldquo;fluffy&amp;rdquo;, then both cases two and three are incorrect.&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Assuming that Thread 2 wants to set the value to &amp;ldquo;fluffy&amp;rdquo;, there are some different approaches to solving the problem.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Approach One: Pessimistic locking&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-2A7ebRJ1z5g/Th6t4t2AO8I/AAAAAAAAIH8/gAYXlVq86-s/s1600/ConcurrencyPessimisticLocking.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;257&#34; src=&#34;http://4.bp.blogspot.com/-2A7ebRJ1z5g/Th6t4t2AO8I/AAAAAAAAIH8/gAYXlVq86-s/s400/ConcurrencyPessimisticLocking.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;(Does the &amp;ldquo;No Entry&amp;rdquo; sign make sense to people who don&amp;rsquo;t drive in Britain?)&lt;br /&gt;&lt;br /&gt;The terms pessimistic and optimistic locking seem to be more commonly used when talking about database reads and writes, but the principal applies to getting a lock on an object.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Thread 2 grabs a lock on &lt;code&gt;Entry&lt;/code&gt; as soon as it knows it needs it and stops anything from setting it. Then it does its thing, sets the value, and lets everything else carry on.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;You can imagine this gets quite expensive, with threads hanging around all over the place trying to get hold of objects and being blocked. &amp;nbsp;The more threads you have, the more chance that things are going to grind to a halt.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Approach Two: Optimistic locking&lt;/b&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-MC3Zia0u-LI/TiGrA4AEKKI/AAAAAAAAIIo/7q-x9sSJYR4/s1600/ConcurrencyOptimisticLocking.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;252&#34; src=&#34;http://2.bp.blogspot.com/-MC3Zia0u-LI/TiGrA4AEKKI/AAAAAAAAIIo/7q-x9sSJYR4/s400/ConcurrencyOptimisticLocking.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;In this case Thread 2 will only lock &lt;code&gt;Entry&lt;/code&gt; when it needs to write to it. &amp;nbsp;In order to make this work, it needs to check if &lt;code&gt;Entry&lt;/code&gt; has changed since it first looked at it. &amp;nbsp;If Thread 1 came in and changed the value to &amp;ldquo;blah&amp;rdquo; after Thread 2 had read the value, Thread 2 couldn&amp;rsquo;t write &amp;ldquo;fluffy&amp;rdquo; to the &lt;code&gt;Entry&lt;/code&gt; and trample all over the change from Thread 1. &amp;nbsp;Thread 2 could either re-try (go back, read the value, and append &amp;ldquo;y&amp;rdquo; onto the end of the new value), which you would do if Thread 2 didn&amp;rsquo;t care what the value it was changing was; or it could throw an exception or return some sort of failed update flag if it was expecting to change &amp;ldquo;fluff&amp;rdquo; to &amp;ldquo;fluffy&amp;rdquo;. &amp;nbsp;An example of this latter case might be if you have two users trying to update a Wiki page, and you tell the user on the other end of Thread 2 they&amp;rsquo;ll need to load the new changes from Thread 1 and then reapply their changes.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Potential Problem: Deadlock&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Locking can lead to all sorts of issues, for example deadlock. &amp;nbsp;Imagine two threads that need access to two resources to do whatever they need to do:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-sDyHhoLnwxw/Th60id1KUEI/AAAAAAAAIIE/_ru21J5fklI/s1600/ConcurrencyDeadlock.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;240&#34; src=&#34;http://2.bp.blogspot.com/-sDyHhoLnwxw/Th60id1KUEI/AAAAAAAAIIE/_ru21J5fklI/s400/ConcurrencyDeadlock.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;If you&amp;rsquo;ve used an over-zealous locking technique, both threads are going to sit there forever waiting for the other one to release its lock on the resource. &amp;nbsp;That&amp;rsquo;s when you reboot &lt;strike&gt;Windows&lt;/strike&gt; your computer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Definite Problem: Locks are sloooow&amp;hellip;&lt;/b&gt;&lt;br /&gt;The thing about locks is that they need the operating system to arbitrate the argument. &amp;nbsp;The threads are like siblings squabbling over a toy, and the OS kernel is the parent that decides which one gets it. It&amp;rsquo;s like when you run to your Dad to tell him your sister has nicked the &lt;a href=&#34;http://www.amazon.com/Transformers-Power-Bots-Optimus-Prime/dp/B003A6CK0O?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;link_code=btl&amp;amp;camp=213689&amp;amp;creative=392969&#34; target=&#34;_blank&#34;&gt;Transformer&lt;/a&gt;&lt;img alt=&#34;&#34; border=&#34;0&#34; height=&#34;1&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=btl&amp;amp;camp=213689&amp;amp;creative=392969&amp;amp;o=1&amp;amp;a=B003A6CK0O&#34; style=&#34;border: none !important; margin: 0px !important; padding: 0px !important;&#34; width=&#34;1&#34; /&gt; when you wanted to play with it - he&amp;rsquo;s got bigger things to worry about than you two fighting, and he might finish off loading the dishwasher and putting on the laundry before settling the argument. &amp;nbsp;If you draw attention to yourself with a lock, not only does it take time to get the operating system to arbitrate, the OS might decide the CPU has better things to do than servicing your thread.&lt;br /&gt;&lt;br /&gt;The Disruptor paper talks about an experiment we did. &amp;nbsp;The test calls a function incrementing a 64-bit counter in a loop 500 million times. &amp;nbsp;For a single thread with no locking, the test takes 300ms. &amp;nbsp;If you add a lock (and this is for a single thread, no contention, and no additional complexity other than the lock) the test takes&amp;nbsp;10,000ms. &amp;nbsp;That&amp;rsquo;s, like, two orders of magnitude slower. &amp;nbsp;Even more astounding, if you add a second thread (which logic suggests should take maybe half the time of the single thread with a lock) it takes&amp;nbsp;224,000ms. &amp;nbsp;Incrementing a counter 500 million times takes nearly a &lt;i&gt;thousand &lt;/i&gt;times longer when you split it over two threads instead of running it on one with no lock.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Concurrency Is Hard and Locks Are Bad&lt;/b&gt;&lt;br /&gt;I&amp;rsquo;m just touching the surface of the problem, and obviously I&amp;rsquo;m using very simple examples. &amp;nbsp;But the point is, if your code is meant to work in a multi-threaded environment, your job as a developer just got a lot more difficult:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Naive code can have unintended consequences.&lt;/b&gt;&amp;nbsp; Case Three above is an example of how things can go horribly wrong if you don&amp;rsquo;t realise you have multiple threads accessing and writing to the same data.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Selfish code is going to slow your system down.&lt;/b&gt;&amp;nbsp; Using locks to protect your code from the problem in Case Three can lead to things like deadlock or simply poor performance.&lt;/li&gt;&lt;/ul&gt;This is why many organisations have some sort of concurrency problems in their interview process (certainly for Java interviews). &amp;nbsp;Unfortunately it&amp;rsquo;s very easy to learn how to answer the questions without really understanding the problem, or possible solutions to it.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How does the Disruptor address these issues?&lt;/b&gt;&lt;br /&gt;For a start, it doesn&amp;rsquo;t use locks. &amp;nbsp;At all.&lt;br /&gt;&lt;br /&gt;Instead, where we need to make sure that operations are thread-safe (specifically, updating the next available sequence number in the case of &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;multiple producers&lt;/a&gt;), we use a &lt;a href=&#34;http://en.wikipedia.org/wiki/Compare-and-swap&#34;&gt;CAS &lt;/a&gt;(Compare And Swap/Set) operation. &amp;nbsp;This is a CPU-level instruction, and in my mind it works a bit like optimistic locking - the CPU goes to update a value, but if the value it&amp;rsquo;s changing it from is not the one it expects, the operation fails because clearly something else got in there first.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-j7wPAJe3YuE/TiFBp0XCn6I/AAAAAAAAIIM/FrketUYEsFY/s1600/ConcurrencyCAS.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;170&#34; src=&#34;http://4.bp.blogspot.com/-j7wPAJe3YuE/TiFBp0XCn6I/AAAAAAAAIIM/FrketUYEsFY/s320/ConcurrencyCAS.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Note this could be two different cores rather than two separate CPUs.&lt;br /&gt;&lt;br /&gt;CAS operations are much cheaper than locks because they don&amp;rsquo;t involve the operating system, they go straight to the CPU. &amp;nbsp;But they&amp;rsquo;re not cost-free - in the experiment I mentioned above, where a lock-free thread takes 300ms and a thread with a lock takes 10,000ms, a single thread using CAS takes 5,700ms. &amp;nbsp;So it takes less time than using a lock, but more time than a single thread that doesn&amp;rsquo;t worry about contention at all.&lt;br /&gt;&lt;br /&gt;Back to the Disruptor - I talked about the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/ClaimStrategy.java&#34;&gt;ClaimStrategy&lt;/a&gt; when I &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;went over the producers&lt;/a&gt;. &amp;nbsp;In the code you&amp;rsquo;ll see two strategies, a &lt;code&gt;SingleThreadedStrategy&lt;/code&gt; and a &lt;code&gt;MultiThreadedStrategy&lt;/code&gt;. &amp;nbsp;You could argue, why not just use the multi-threaded one with only a single producer? &amp;nbsp;Surely it can handle that case? &amp;nbsp;And it can. &amp;nbsp;But the multi-threaded one uses an &lt;a href=&#34;http://download.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/AtomicLong.html&#34;&gt;AtomicLong&lt;/a&gt; (Java&amp;rsquo;s way of providing CAS operations), and the single-threaded one uses a simple long with no locks and no CAS. &amp;nbsp;This means the single-threaded claim strategy is as fast as possible, given that it knows there is only one producer and therefore no contention on the sequence number.&lt;br /&gt;&lt;br /&gt;I know what you&amp;rsquo;re thinking: turning one single number into an AtomicLong can&amp;rsquo;t possibly have been the only thing that is the secret to the Disruptor&amp;rsquo;s speed. And of course, it&amp;rsquo;s not - otherwise this wouldn&amp;rsquo;t be called &amp;ldquo;Why it&amp;rsquo;s so fast (part &lt;i&gt;one&lt;/i&gt;)&amp;ldquo;.&lt;br /&gt;&lt;br /&gt;But this is an important point - there&amp;rsquo;s only one place in the code where multiple threads might be trying to update the same value. &amp;nbsp;Only one place in the whole of this complicated data-structure-slash-framework. &amp;nbsp;And that&amp;rsquo;s the secret. &amp;nbsp;Remember everything has its own sequence number? &amp;nbsp;If you only have one producer then every sequence number in the system is only ever written to by one thread. That means there is no contention. &amp;nbsp;No need for locks. &amp;nbsp;No need even for CAS. &amp;nbsp;The only sequence number that is ever written to by more than one thread is the one on the &lt;code&gt;ClaimStrategy&lt;/code&gt; if there is more than one producer.&lt;br /&gt;&lt;br /&gt;This is also why each variable in the &lt;code&gt;Entry&lt;/code&gt; &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html&#34;&gt;can only be written to by one consumer&lt;/a&gt;. &amp;nbsp;It ensures there&amp;rsquo;s no write contention, therefore no need for locks or CAS.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Back to why queues aren&amp;rsquo;t up to the job&lt;/b&gt;&lt;br /&gt;So you start to see why queues, which may implemented as a ring buffer under the covers, still can&amp;rsquo;t match the performance of the Disruptor. &amp;nbsp;The queue, and the&amp;nbsp;&lt;a href=&#34;http://en.wikipedia.org/wiki/Circular_buffer&#34;&gt;basic ring buffer&lt;/a&gt;, only has two pointers - one to the front of the queue and one to the end:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-9yewqxZu37M/TiGdFiaCj6I/AAAAAAAAIIU/bF4fxONwB_8/s1600/QueueMultiple.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;130&#34; src=&#34;http://4.bp.blogspot.com/-9yewqxZu37M/TiGdFiaCj6I/AAAAAAAAIIU/bF4fxONwB_8/s400/QueueMultiple.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;If more than one producer wants to place something on the queue, the tail pointer will be a point of contention as more than one thing wants to write to it. &amp;nbsp;If there&amp;rsquo;s more than one consumer, then the head pointer is contended, because this is not just a read operation but a write, as the pointer is updated when the item is consumed from the queue.&lt;br /&gt;&lt;br /&gt;But wait, I hear you cry foul! &amp;nbsp;Because we already knew this, so queues are usually single producer and single consumer (or at least they are in all the queue comparisons in our performance tests).&lt;br /&gt;&lt;br /&gt;There&amp;rsquo;s another thing to bear in mind with queues/buffers. &amp;nbsp;The whole point is to provide a place for things to hang out between producers and consumers, to help buffer bursts of messages from one to the other. &amp;nbsp;This means the buffer is usually full (the producer is out-pacing the consumer) or empty (the consumer is out-pacing the producer). &amp;nbsp;It&amp;rsquo;s rare that the producer and consumer will be so evenly-matched that the buffer has items in it but the producers and consumers are keeping pace with each other.&lt;br /&gt;&lt;br /&gt;So this is how things really look. &amp;nbsp;An empty queue:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-_-lU_Ey7mi4/TiGmx5Ja2jI/AAAAAAAAIIg/gQOZ8f76mLM/s1600/QueueEmpty.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;173&#34; src=&#34;http://1.bp.blogspot.com/-_-lU_Ey7mi4/TiGmx5Ja2jI/AAAAAAAAIIg/gQOZ8f76mLM/s400/QueueEmpty.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;br /&gt;&amp;hellip;and a full queue:&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-ARPMAbYKnoE/TiGm4hgxeDI/AAAAAAAAIIk/xMl4ItVob2U/s1600/QueueFull.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;178&#34; src=&#34;http://3.bp.blogspot.com/-ARPMAbYKnoE/TiGm4hgxeDI/AAAAAAAAIIk/xMl4ItVob2U/s400/QueueFull.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;The queue needs a size so that it can tell the difference between empty and full. &amp;nbsp;Or, if it doesn&amp;rsquo;t, it might determine that based on the contents of that entry, in which case reading an entry will require a write to erase it or mark it as consumed. &lt;br /&gt;&lt;br /&gt;Whichever implementation is chosen, there&amp;rsquo;s quite a bit of contention around the tail, head and size variables, or the entry itself if a consume operation also includes a write to remove it.&lt;br /&gt;&lt;br /&gt;On top of this, these three variables are often in the same &lt;a href=&#34;http://en.wikipedia.org/wiki/CPU_cache&#34;&gt;cache line&lt;/a&gt;, leading to &lt;a href=&#34;http://en.wikipedia.org/wiki/False_sharing&#34;&gt;false sharing&lt;/a&gt;. &amp;nbsp;So, not only do you have to worry about the producer and the consumer both causing a write to the size variable (or the entry), updating the tail pointer could lead to a cache-miss when the head pointer is updated because they&amp;rsquo;re sat in the same place. &amp;nbsp;I&amp;rsquo;m going to duck out of going into that in detail because this post is quite long enough as it is.&lt;br /&gt;&lt;br /&gt;So this is what we mean when we talk about &amp;ldquo;Teasing Apart the Concerns&amp;rdquo; or a queue&amp;rsquo;s &amp;ldquo;conflated concerns&amp;rdquo;. &amp;nbsp;By giving everything its own sequence number and by allowing only one consumer to write to each variable in the &lt;code&gt;Entry&lt;/code&gt;, the only case the Disruptor needs to manage contention is where more than one producer is writing to the ring buffer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;In summary&lt;/b&gt;&lt;br /&gt;The Disruptor a number of advantages over traditional approaches:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;No contention = no locks = it&amp;rsquo;s very fast.&lt;/li&gt;&lt;li&gt;Having everything track its own sequence number allows multiple producers and multiple consumers to use the same data structure.&lt;/li&gt;&lt;li&gt;Tracking sequence numbers at each individual place (ring buffer, claim strategy, producers and consumers), plus the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;magic cache line padding&lt;/a&gt;, means no false sharing and no unexpected contention.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;EDIT: Note that version 2.0 of the Disruptor uses different names to the ones in this article. &amp;nbsp;Please see &lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;my summary of the changes&lt;/a&gt; if you are confused about class names.&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Wiring up the dependencies</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_wiring_up_the_dependencies</link>
      <pubDate>Sun, 10 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_wiring_up_the_dependencies</guid>
      <description>&lt;p&gt;So now I&amp;rsquo;ve covered the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-whats-so-special.html&#34;&gt;ring buffer&lt;/a&gt; itself, &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-how-do-i-read-from.html&#34;&gt;reading&lt;/a&gt; from it and &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;writing&lt;/a&gt; to it.&lt;br /&gt;&lt;br /&gt;Logically the next thing to do is to wire everything up together.&lt;br /&gt;&lt;br /&gt;I talked about multiple producers - they have the producer barrier to keep them in order and under control. &amp;nbsp;I&amp;rsquo;ve talked about consumers in a simple situation. &amp;nbsp;Multiple consumers can get a little more involved. &amp;nbsp;&lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;We&amp;rsquo;ve&lt;/a&gt; done some clever stuff to allow the consumers to be dependent on each other and the ring buffer. &amp;nbsp;Like a lot of applications, we have a pipeline of things that need to happen before we can actually get on with the business logic - for example, we need to make sure the messages have been journalled to disk before we can do anything.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&#34;http://disruptor.googlecode.com/files/Disruptor-1.0.pdf&#34;&gt;Disruptor paper&lt;/a&gt; and the performance tests cover some basic configurations that you might want. I&amp;rsquo;m going to go over the most interesting one, mostly because I needed the practice with the graphics tablet.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Diamond configuration&lt;/b&gt;&lt;br /&gt;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/perf/com/lmax/disruptor/DiamondPath1P3CPerfTest.java&#34;&gt;DiamondPath1P3CPerfTest&lt;/a&gt; illustrates a configuration which is not too uncommon - a single producer with three consumers. &amp;nbsp;The tricky point being that the third consumer is dependent upon the previous two consumers to finish before it can do anything.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-34LTXhqK1wA/ThSvXbNTAjI/AAAAAAAAIFY/qpFZNXWgbPE/s1600/1P3C-Diamond.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;264&#34; src=&#34;http://4.bp.blogspot.com/-34LTXhqK1wA/ThSvXbNTAjI/AAAAAAAAIFY/qpFZNXWgbPE/s400/1P3C-Diamond.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Consumer three might be your business logic, consumer one could be backing up the data received, and consumer two may be preparing the data or something.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Diamond configuration using queues&lt;/b&gt;&lt;br /&gt;In a &lt;a href=&#34;http://www.theserverside.com/news/1363672/Building-a-Scalable-Enterprise-Applications-Using-Asynchronous-IO-and-SEDA-Model&#34;&gt;SEDA-style architecture&lt;/a&gt;, each stage will be separated by a queue:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-4Di1CzgcZR0/ThSzSdp1sTI/AAAAAAAAIFc/9mhK_7hLBdk/s1600/1P3C-Diamond-Queue.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;263&#34; src=&#34;http://1.bp.blogspot.com/-4Di1CzgcZR0/ThSzSdp1sTI/AAAAAAAAIFc/9mhK_7hLBdk/s400/1P3C-Diamond-Queue.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(Why does queue have to have so many &amp;ldquo;e&amp;rdquo;s? &amp;nbsp;It&amp;rsquo;s the letter I have the most trouble with in these drawings).&lt;br /&gt;&lt;br /&gt;You might get an inkling of the problem here: for a message to get from P1 to C3 it has to travel through four whole queues, each queue taking its cost in terms of putting the message on the queue and taking it off again.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Diamond configuration using the Disruptor&lt;/b&gt;&lt;br /&gt;In the &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;Disruptor&lt;/a&gt; world, it&amp;rsquo;s all managed on a single ring buffer:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-fGp-zkgVWs0/ThnC8m1O8bI/AAAAAAAAIHI/jUZJ6Xos608/s1600/1P3C-Diamond-RingBuffer.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;359&#34; src=&#34;http://1.bp.blogspot.com/-fGp-zkgVWs0/ThnC8m1O8bI/AAAAAAAAIHI/jUZJ6Xos608/s640/1P3C-Diamond-RingBuffer.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;It does look more complicated. &amp;nbsp;But the ring buffer remains the single point of contact between all the players, and the interactions are all based on the barriers checking the sequence numbers of the things it&amp;rsquo;s dependent upon.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;The producer side is fairly simple, it&amp;rsquo;s the single producer model described in my &lt;a href=&#34;http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html&#34;&gt;last post&lt;/a&gt;. Interestingly, the producer barrier doesn&amp;rsquo;t have to care about all the consumers. &amp;nbsp;It only cares about consumer three, because if consumer three has finished with an item in the ring buffer the other two will already have processed it. &amp;nbsp;So if C3 has moved on, that slot in the ring buffer is available.&lt;br /&gt;&lt;br /&gt;To manage the dependencies between the consumers you need two consumer barriers. &amp;nbsp;The first just talks to the ring buffer and consumers one and two ask it for the next available item. &amp;nbsp;The second consumer barrier knows about consumers one and two, and it will return the lowest sequence number processed by both consumers.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How consumer dependencies work in the Disruptor&lt;/b&gt;&lt;br /&gt;Hmm. &amp;nbsp;I can see I&amp;rsquo;m going to need an example.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-CDUq8tbkg5U/ThTBcrHD_wI/AAAAAAAAIFo/edukW6dAG5Q/s1600/1P3C-Diamond-RingBuffer-Example.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;294&#34; src=&#34;http://3.bp.blogspot.com/-CDUq8tbkg5U/ThTBcrHD_wI/AAAAAAAAIFo/edukW6dAG5Q/s640/1P3C-Diamond-RingBuffer-Example.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;We&amp;rsquo;re joining the party halfway through the story: the producer has filled the ring buffer up to sequence number 22; consumer one has read and processed everything up to 21; consumer two has processed everything up to sequence 18; consumer three, which is dependent upon the other consumers, has only made it as far as 15.&lt;br /&gt;&lt;br /&gt;The producer can&amp;rsquo;t write anything more to the ring buffer because sequence 15 is taking up the slot where we&amp;rsquo;d want to put sequence 23.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-PKLturGyJac/ThnEt30SVLI/AAAAAAAAIHM/8w-q90sErcY/s1600/1P3C-Diamond-RingBuffer-Example2.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;314&#34; src=&#34;http://3.bp.blogspot.com/-PKLturGyJac/ThnEt30SVLI/AAAAAAAAIHM/8w-q90sErcY/s640/1P3C-Diamond-RingBuffer-Example2.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;(I&amp;rsquo;m sorry, I really did try to find an alternative to red and green, but everything else was just as ambiguous).&lt;br /&gt;&lt;br /&gt;The first consumer barrier lets consumers one and two know they can grab anything up to sequence 22, the highest sequence number in the ring buffer. &amp;nbsp;The second consumer barrier checks the ring buffer sequence, but it also checks the sequences on the other two consumers and returns the lowest value. &amp;nbsp;So consumer three is told it can get anything up to sequence 18 from the ring buffer.&lt;br /&gt;&lt;br /&gt;Note that the consumers are still reading the entries directly from the ring buffer - consumers one and two are not taking the entries off the ring buffer and then passing them on to consumer three. &amp;nbsp;Instead, the second consumer barrier is letting consumer three know which entry in the ring buffer it&amp;rsquo;s safe to process.&lt;br /&gt;&lt;br /&gt;This raises a question - if everything comes directly off the ring buffer, how is consumer three going to find out about anything the first two consumers have done? &amp;nbsp;If all consumer three cares about is that the earlier consumers have done their job (e.g. replicating the data to somewhere else) then everything&amp;rsquo;s fine - when consumer three is told the job is done, it&amp;rsquo;s happy. &amp;nbsp;If, however, consumer three needs the results of an earlier consumer&amp;rsquo;s processing, where does it get that from?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Modifying entries&lt;/b&gt;&lt;br /&gt;The secret is to write them to the ring buffer&amp;nbsp;&lt;code&gt;Entry&lt;/code&gt; itself. &amp;nbsp;This way, when consumer three grabs the entry off the ring buffer, it will have been populated with all the information consumer three needs to do the job. &amp;nbsp;The really important part of this is that for each field on the &lt;code&gt;Entry&lt;/code&gt;&amp;nbsp;only one consumer is allowed to write to it. &amp;nbsp;This prevents any write-contention which will slow the whole thing down.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-C26vt5NZaFo/ThnI4LpUzdI/AAAAAAAAIHU/I_9vAzu8EQY/s1600/FizzBuzzEntry.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;215&#34; src=&#34;http://3.bp.blogspot.com/-C26vt5NZaFo/ThnI4LpUzdI/AAAAAAAAIHU/I_9vAzu8EQY/s400/FizzBuzzEntry.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;You can see this in &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/perf/com/lmax/disruptor/DiamondPath1P3CPerfTest.java&#34;&gt;DiamondPath1P3CPerfTest&lt;/a&gt; - &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/perf/com/lmax/disruptor/support/FizzBuzzEntry.java&#34;&gt;FizzBuzzEntry&lt;/a&gt; has two fields as well as the value: &lt;code&gt;fizz&lt;/code&gt; and &lt;code&gt;buzz&lt;/code&gt;. &amp;nbsp;If the consumer is a Fizz consumer, it writes to &lt;code&gt;fizz&lt;/code&gt;. &amp;nbsp;If it&amp;rsquo;s a Buzz consumer, it writes to &lt;code&gt;buzz&lt;/code&gt;. &amp;nbsp;The third consumer, FizzBuzz, will read both of these fields but not write to either, since reading is fine and won&amp;rsquo;t cause contention.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Some actual Java code&lt;/b&gt;&lt;br /&gt;All this looks more complicated than the queue implementation. &amp;nbsp;And yes, it does involve a bit more coordination. &amp;nbsp;But this is hidden from the consumers and producers, they just talk to the barriers. &amp;nbsp;The trick is in the configuration. &amp;nbsp;The diamond graph in the example above would be created using something like the following:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;ConsumerBarrier consumerBarrier1 = ringBuffer.createConsumerBarrier();&lt;br /&gt;&lt;br /&gt;BatchConsumer consumer1 = new BatchConsumer(consumerBarrier1, handler1);&lt;br /&gt;BatchConsumer consumer2 = new BatchConsumer(consumerBarrier1, handler2);&lt;br /&gt;&lt;br /&gt;ConsumerBarrier consumerBarrier2 = &lt;br /&gt;    ringBuffer.createConsumerBarrier(consumer1, consumer2);&lt;br /&gt;&lt;br /&gt;BatchConsumer consumer3 = new BatchConsumer(consumerBarrier2, handler3);&lt;br /&gt;&lt;br /&gt;ProducerBarrier producerBarrier = &lt;br /&gt;    ringBuffer.createProducerBarrier(consumer3);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;In summary&lt;/b&gt;&lt;br /&gt;So there you have it - how to wire up the Disruptor with multiple consumers that are dependent on each other. &amp;nbsp;The key points:&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Use multiple consumer barriers to manage dependencies between consumers.&lt;/li&gt;&lt;li&gt;Have the producer barrier watch the last consumer in the graph.&lt;/li&gt;&lt;li&gt;Allow only one consumer to write to an individual field in an &lt;code&gt;Entry&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;EDIT: Adrian has &lt;a href=&#34;http://www.symphonious.net/2011/07/11/lmax-disruptor-high-performance-low-latency-and-simple-too/&#34;&gt;written a nice DSL&lt;/a&gt; to make wiring up the Disruptor much easier.&lt;br /&gt;&lt;br /&gt;EDIT 2: Note that version 2.0 of the Disruptor uses different names to the ones in this article. &amp;nbsp;Please see&amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;my summary of the changes&lt;/a&gt;&amp;nbsp;if you are confused about class names. &amp;nbsp;Also Adrian&amp;rsquo;s DSL is now part of the main Disruptor code base.&lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Writing to the ring buffer</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_writing_to_the_ring_buffer</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_writing_to_the_ring_buffer</guid>
      <description>&lt;div style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&#34;&gt;This is the missing piece in the end-to-end view of the Disruptor. &amp;nbsp;Brace yourselves, it&#39;s quite long. &amp;nbsp;But I decided to keep it in a single blog so you could have the context in one place.&lt;br /&gt;&lt;br /&gt;The important areas are: not wrapping the ring; informing the consumers; batching for producers; and how multiple producers work.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;ProducerBarriers&lt;/b&gt;&lt;br /&gt;The &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;Disruptor code&lt;/a&gt; has interfaces and helper classes for the &lt;code&gt;Consumer&lt;/code&gt;s, but there&#39;s no interface for your producer, the thing that writes to the ring buffer. &amp;nbsp;That&#39;s because nothing else needs to access your producer, only you need to know about it. &amp;nbsp;However, like the consuming side, a &lt;code&gt;ProducerBarrier&lt;/code&gt; is created by the ring buffer and your producer will use this to write to it.&lt;br /&gt;&lt;br /&gt;Writing to the ring buffer involves a two-phase commit. &amp;nbsp;First, your producer has to claim the next slot on the buffer. &amp;nbsp;Then, when the producer has finished writing to the slot, it will call &lt;code&gt;commit&lt;/code&gt; on the &lt;code&gt;ProducerBarrier&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;So let&#39;s look at the first bit. &amp;nbsp;It sounds easy - &#34;get me the next slot on the ring buffer&#34;. &amp;nbsp;Well, from your producer&#39;s point of view it is easy. &amp;nbsp;You simply call &lt;code&gt;nextEntry()&lt;/code&gt; on the &lt;code&gt;ProducerBarrier&lt;/code&gt;. &amp;nbsp;This will return you an &lt;code&gt;Entry&lt;/code&gt; object which is basically the next slot in the ring buffer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The ProducerBarrier makes sure the ring buffer doesn&#39;t wrap&lt;/b&gt;&lt;br /&gt;Under the covers, the &lt;code&gt;ProducerBarrier&lt;/code&gt; is doing all the negotiation to figure out what the next slot is, and if you&#39;re allowed to write to it yet.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-YOp3ahmnRLw/ThCPQmuS2gI/AAAAAAAAIE0/oI-w-1l2RJc/s1600/PreventRingFromWrapping.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;231&#34; src=&#34;http://3.bp.blogspot.com/-YOp3ahmnRLw/ThCPQmuS2gI/AAAAAAAAIE0/oI-w-1l2RJc/s640/PreventRingFromWrapping.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(I&#39;m not convinced the &lt;a href=&#34;http://www.amazon.com/Wacom-CTL460-Bamboo-Pen-Tablet/dp/B002OOWC3I?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;link_code=btl&amp;amp;camp=213689&amp;amp;creative=392969&#34; target=&#34;_blank&#34;&gt;shiny new graphics tablet&lt;/a&gt;&lt;img alt=&#34;&#34; border=&#34;0&#34; height=&#34;1&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=trissramb-20&amp;amp;l=btl&amp;amp;camp=213689&amp;amp;creative=392969&amp;amp;o=1&amp;amp;a=B002OOWC3I&#34; style=&#34;border: none !important; margin: 0px !important; padding: 0px !important;&#34; width=&#34;1&#34; /&gt; is helping the clarity of my pictures, but it&#39;s  fun to use).&lt;br /&gt;&lt;br /&gt;For this illustration, we&#39;re going to assume there&#39;s only one producer writing to the ring buffer. &amp;nbsp;We will deal with the intricacies of multiple producers later.&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;ConsumerTrackingProducerBarrier&lt;/code&gt; has a list of all the &lt;code&gt;Consumers&lt;/code&gt; that are accessing the ring buffer. &amp;nbsp;Now to me this seemed a bit odd - I wouldn&#39;t expect the &lt;code&gt;ProducerBarrier&lt;/code&gt; to know anything about the consuming side.  But wait, there is a reason. &amp;nbsp;Because we don&#39;t want the &#34;conflation of concerns&#34; a queue has (it has to track the head and tail which are sometimes the same point), our consumers are responsible for knowing which sequence number they&#39;re up to, not the ring buffer. &amp;nbsp;So, if we want to make sure we don&#39;t wrap the buffer, we need to check where the consumers have got to.&lt;br /&gt;&lt;br /&gt;In the diagram above, one &lt;code&gt;Consumer&lt;/code&gt; is happily at the same point as the highest sequence number (12, highlighted in red/pink). The second &lt;code&gt;Consumer&lt;/code&gt; is a bit behind - maybe it&#39;s doing I/O operations or something - and it&#39;s at sequence number 3. &amp;nbsp;Therefore consumer 2 has the whole length of the buffer to go before it catches up with consumer 1.&lt;br /&gt;&lt;br /&gt;The producer wants to write to the slot on the ring buffer currently occupied by sequence 3, because this slot is the one after the current ring buffer cursor. &amp;nbsp;But the &lt;code&gt;ProducerBarrier&lt;/code&gt; knows it can&#39;t write here because a &lt;code&gt;Consumer&lt;/code&gt; is using it. &amp;nbsp;So the &lt;code&gt;ProducerBarrier&lt;/code&gt; sits and spins, waiting, until the consumers move on.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Claiming the next slot&lt;/b&gt;&lt;br /&gt;Now imagine consumer 2 has finished that batch of entries, and moves its sequence number on. Maybe it got as far as sequence 9 (in real life I expect it will make it as far as 12 because of the way consumer batching works, but that doesn&#39;t make the example as interesting).&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-IxEJ_Dy6_RU/ThCVQIwgLoI/AAAAAAAAIE4/-z4AsZD5nVg/s1600/ProducerNextEntry.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;236&#34; src=&#34;http://4.bp.blogspot.com/-IxEJ_Dy6_RU/ThCVQIwgLoI/AAAAAAAAIE4/-z4AsZD5nVg/s640/ProducerNextEntry.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The diagram above shows what happens when consumer 2 updates to sequence number 9. &amp;nbsp;I&#39;ve slimmed down the &lt;code&gt;ConsumerBarrier&lt;/code&gt; in this picture because it takes no active part in this scene.&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;ProducerBarrier&lt;/code&gt; sees that the next slot, the one that had sequence number 3, is now available. &amp;nbsp;It grabs the &lt;code&gt;Entry&lt;/code&gt; that sits in this slot (I&#39;ve not talked specifically about the &lt;code&gt;Entry&lt;/code&gt; class, but it&#39;s basically a bucket for stuff you want to put into the ring buffer slot which has a sequence number), sets the sequence number on the &lt;code&gt;Entry&lt;/code&gt; to the next sequence number (13) and returns this entry to your producer. &amp;nbsp;The producer can then write whatever value it wants into this &lt;code&gt;Entry&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Committing the new value&lt;/b&gt;&lt;br /&gt;The second phase of the two-stage commit is, well, the commit.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-vBm6k86SO4k/ThCm5GgkhEI/AAAAAAAAIFA/dB-9NNz47qw/s1600/ProducerCommit.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;224&#34; src=&#34;http://2.bp.blogspot.com/-vBm6k86SO4k/ThCm5GgkhEI/AAAAAAAAIFA/dB-9NNz47qw/s640/ProducerCommit.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The green represents our newly updated &lt;code&gt;Entry&lt;/code&gt; with sequence 13 - yeah, I&#39;m sorry, I&#39;m red-green colour-blind too. &amp;nbsp;But other colours were even more rubbish.&lt;br /&gt;&lt;br /&gt;When the producer has finished writing stuff into the entry it tells the &lt;code&gt;ProducerBarrier&lt;/code&gt; to commit it.&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;ProducerBarrier&lt;/code&gt; waits for the ring buffer cursor to catch up to where we are (for a single producer this will always be a bit pointless - e.g. we know the cursor is already at 12, nothing else is writing to the ring buffer). &amp;nbsp;Then the &lt;code&gt;ProducerBarrier&lt;/code&gt; updates the ring buffer cursor to the sequence number on the updated &lt;code&gt;Entry&lt;/code&gt; - 13 in our case. &amp;nbsp;Next, the &lt;code&gt;ProducerBarrier&lt;/code&gt; lets the consumers know there&#39;s something new in the buffer. &amp;nbsp;It does this by poking the &lt;code&gt;WaitStrategy&lt;/code&gt; on the &lt;code&gt;ConsumerBarrier&lt;/code&gt; - &#34;Oi, wake up! Something happened!&#34; (note - different &lt;code&gt;WaitStrategy&lt;/code&gt; implementations deal with this in different ways, depending upon whether it&#39;s blocking or not).&lt;br /&gt;&lt;br /&gt;Now consumer 1 can get entry 13, consumer 2 can get everything up to and including 13, and they all live happily ever after.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;ProducerBarrier batching&lt;/b&gt;&lt;br /&gt;Interestingly the disruptor can batch on the producer side as well as &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-how-do-i-read-from.html&#34;&gt;on the Consumer side&lt;/a&gt;. &amp;nbsp;Remember when consumer 2 finally got with the programme and found itself at sequence 9? &amp;nbsp;There is a very cunning thing the &lt;code&gt;ProducerBarrier&lt;/code&gt; can do here - it knows the size of the buffer, and it knows where the slowest &lt;code&gt;Consumer&lt;/code&gt; is. &amp;nbsp;So it can figure out which slots are now available.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-781DHcbmG2g/ThCXT2xo0xI/AAAAAAAAIE8/5Gls4znj3zw/s1600/ProducerBatching.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;236&#34; src=&#34;http://4.bp.blogspot.com/-781DHcbmG2g/ThCXT2xo0xI/AAAAAAAAIE8/5Gls4znj3zw/s640/ProducerBatching.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;If the &lt;code&gt;ProducerBarrier&lt;/code&gt; knows the ring buffer cursor is at 12, and the slowest &lt;code&gt;Consumer&lt;/code&gt; is at 9, it can let producers write to slots 3, 4, 5, 6, 7 and 8 before it needs to check where the consumers are.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Multiple producers&lt;/b&gt;&lt;br /&gt;You thought I was done, but there&#39;s more.&lt;br /&gt;&lt;br /&gt;I slightly lied in some of the above drawings. &amp;nbsp;I implied that the sequence number the &lt;code&gt;ProducerBarrier&lt;/code&gt; deals with comes directly from the ring buffer&#39;s cursor. &amp;nbsp;However, if you look at the code you&#39;ll see that it uses the &lt;code&gt;ClaimStrategy&lt;/code&gt; to get this. &amp;nbsp;I skipped this to simplify the diagrams, it&#39;s not so important in the single-producer case.&lt;br /&gt;&lt;br /&gt;With multiple producers, you need yet another thing tracking a sequence number. &amp;nbsp;This is the sequence that is available for writing to. &amp;nbsp;Note that this is not the same as ring-buffer-cursor-plus-one - if you have more than one producer writing to the buffer, it&#39;s possible there are entries in the process of being written that haven&#39;t been committed yet.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-xPQJAkN7lgg/ThC8FGgosdI/AAAAAAAAIFE/qZO9xuiKFPY/s1600/ProducersNextEntry.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;274&#34; src=&#34;http://4.bp.blogspot.com/-xPQJAkN7lgg/ThC8FGgosdI/AAAAAAAAIFE/qZO9xuiKFPY/s640/ProducersNextEntry.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Let&#39;s revisit claiming a slot. &amp;nbsp;Each producer asks the &lt;code&gt;ClaimStrategy&lt;/code&gt; for the next available slot. &amp;nbsp;Producer 1 gets sequence 13, like in the single producer case above. &amp;nbsp;Producer 2 gets sequence 14, even though the ring buffer cursor is still only pointing to 12, because the &lt;code&gt;ClaimSequence&lt;/code&gt; is dishing out the numbers and has been keeping track of what&#39;s been allocated.&lt;br /&gt;&lt;br /&gt;So each producer has its own slot with a shiny new sequence number.&lt;br /&gt;&lt;br /&gt;I&#39;m going colour producer 1 and its slot in green, and producer 2 and its slot in a suspiciously pink-looking purple.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-4bSeLcewe-Q/ThDCM1rWOyI/AAAAAAAAIFQ/cF_dPHKNm-I/s1600/ProducersCommit.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-4bSeLcewe-Q/ThDCM1rWOyI/AAAAAAAAIFQ/cF_dPHKNm-I/s1600/ProducersCommit.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: -webkit-auto;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&#34;&gt;Now imaging producer 1 is away with the fairies, and hasn&#39;t got around to committing for whatever reason. &amp;nbsp;Producer 2 is ready to commit, and asks the &lt;code&gt;ProducerBarrier&lt;/code&gt; to do so.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As we saw in the earlier commit diagram, the &lt;code&gt;ProducerBarrier&lt;/code&gt; is only going to commit when the ring buffer cursor reaches the slot behind the one it wants to commit into. &amp;nbsp;In this case, the cursor needs to reach 13 so that we can commit 14. &amp;nbsp;But we can&#39;t, because producer 1 is staring at something shiny and hasn&#39;t committed yet. &amp;nbsp;So the &lt;code&gt;ClaimStrategy&lt;/code&gt; sits there spinning until the ring buffer cursor gets to where it should be.&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-2kzqD61cJNU/ThDEYBSFOkI/AAAAAAAAIFU/WY0m9sn5y-w/s1600/ProducersCommit2.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;204&#34; src=&#34;http://4.bp.blogspot.com/-2kzqD61cJNU/ThDEYBSFOkI/AAAAAAAAIFU/WY0m9sn5y-w/s640/ProducersCommit2.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Now producer 1 wakes up from its coma and asks to commit entry 13 (green arrows are sparked by the request from producer 1). &amp;nbsp;The &lt;code&gt;ProducerBarrier&lt;/code&gt; tells the &lt;code&gt;ClaimStrategy&lt;/code&gt; to wait for the ring buffer cursor to get to 12, which it already had of course. &amp;nbsp;So the ring buffer cursor is incremented to 13, and the &lt;code&gt;ProducerBarrier&lt;/code&gt; pokes the &lt;code&gt;WaitStrategy&lt;/code&gt; to let everything know the ring buffer was updated. &amp;nbsp;Now the &lt;code&gt;ProducerBarrier&lt;/code&gt; can finish the request from producer 2, increment the ring buffer cursor to 14, and let everyone know that we&#39;re done.&lt;br /&gt;&lt;br /&gt;You&#39;ll see that the ring buffer retains the ordering implied by the order of the initial &lt;code&gt;nextEntry()&lt;/code&gt; calls, even if the producers finish writing at different times. &amp;nbsp;It also means that if a producer is causing a pause in writing to the ring buffer, when it unblocks any other pending commits can happen immediately.&lt;br /&gt;&lt;br /&gt;Phew. &amp;nbsp;And I managed to describe all that without mentioning a memory barrier once.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&#34;&gt;EDIT: The most recent version of the&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java?r=239&#34;&gt;RingBuffer&lt;/a&gt;&amp;nbsp;hides away the Producer Barrier. &amp;nbsp;If you can&#39;t see a&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/ProducerBarrier.java?r=239&#34;&gt;ProducerBarrier&lt;/a&gt;&amp;nbsp;in the code you&#39;re looking at, then assume where I say &#34;producer barrier&#34; I mean &#34;ring buffer&#34;&lt;br /&gt;&lt;br /&gt;EDIT 2: Note that version 2.0 of the Disruptor uses different names to the ones in this article. &amp;nbsp;Please see&amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;my summary of the changes&lt;/a&gt;&amp;nbsp;if you are confused about class names.&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: How do I read from the ring buffer?</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer</guid>
      <description>&lt;p&gt;The next in the series of understanding &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;the Disruptor pattern&lt;/a&gt; developed at &lt;a href=&#34;http://www.lmaxtrader.com/&#34;&gt;LMAX&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;After the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-whats-so-special.html&#34;&gt;last post&lt;/a&gt; we all understand ring buffers and how awesome they are. &amp;nbsp;Unfortunately for you, I have not said anything about how to actually populate them or read from them when you&amp;rsquo;re using the Disruptor.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;ConsumerBarriers and Consumers&lt;/b&gt;&lt;br /&gt;I&amp;rsquo;m going to approach this slightly backwards, because it&amp;rsquo;s probably easier to understand in the long run. &amp;nbsp;Assuming that some magic has populated it: how do you read something from the ring buffer? &lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-XfVLYjAqNeY/TgjrImkZ-BI/AAAAAAAAIEg/_SM2EqIgATs/s1600/ConsumerWaitFor.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em; text-align: center;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;214&#34; src=&#34;http://1.bp.blogspot.com/-XfVLYjAqNeY/TgjrImkZ-BI/AAAAAAAAIEg/_SM2EqIgATs/s640/ConsumerWaitFor.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(OK, I&amp;rsquo;m starting to regret using Paint/&lt;a href=&#34;http://www.gimp.org/&#34;&gt;Gimp&lt;/a&gt;. &amp;nbsp;Although it&amp;rsquo;s an excellent excuse to purchase a graphics tablet if I do continue down this road. &amp;nbsp;Also UML gurus are probably cursing my name right now.)&lt;br /&gt;&lt;br /&gt;Your &lt;code&gt;Consumer&lt;/code&gt; is the thread that wants to get something off the buffer. &amp;nbsp;It has access to a &lt;code&gt;ConsumerBarrier&lt;/code&gt;, which is created by the &lt;code&gt;RingBuffer&lt;/code&gt; and interacts with it on behalf of the &lt;code&gt;Consumer&lt;/code&gt;. &amp;nbsp;While the ring buffer obviously needs a sequence number to figure out what the next available slot is, the consumer also needs to know which sequence number it&amp;rsquo;s up to - each consumer needs to be able to figure out which sequence number it&amp;rsquo;s expecting to see next. &amp;nbsp;So in the case above, the consumer has dealt with everything in the ring buffer up to and including 8, so it&amp;rsquo;s expecting to see 9 next.&lt;br /&gt;&lt;br /&gt;The consumer calls &lt;code&gt;waitFor&lt;/code&gt; on the &lt;code&gt;ConsumerBarrier&lt;/code&gt; with the sequence number it wants next&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code style=&#34;font-size: 12px;&#34;&gt;    final long availableSeq = consumerBarrier.waitFor(nextSequence);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;and the &lt;code&gt;ConsumerBarrier&lt;/code&gt; returns the highest sequence number available in the ring buffer - in the example above, 12. &amp;nbsp;The &lt;code&gt;ConsumerBarrier&lt;/code&gt; has a &lt;code&gt;WaitStrategy&lt;/code&gt; which it uses to decide how to wait for this sequence number - I won&amp;rsquo;t go into details of that right now, the code has comments in outlining the advantages and disadvantages of each.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Now what?&lt;/b&gt;&lt;br /&gt;So the consumer has been hanging around waiting for more stuff to get written to the ring buffer, and it&amp;rsquo;s been told what has been written - entries 9, 10, 11 and 12. &amp;nbsp;Now they&amp;rsquo;re there, the consumer can ask the &lt;code&gt;ConsumerBarrier&lt;/code&gt; to fetch them.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-NKI4nQgA_Co/TgjsGRyaTWI/AAAAAAAAIEk/S7fAyNrjlXQ/s1600/ConsumerRequest.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;222&#34; src=&#34;http://2.bp.blogspot.com/-NKI4nQgA_Co/TgjsGRyaTWI/AAAAAAAAIEk/S7fAyNrjlXQ/s640/ConsumerRequest.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As it&amp;rsquo;s fetching them, the &lt;code&gt;Consumer&lt;/code&gt; is updating its own cursor. &lt;br /&gt;&lt;br /&gt;You should start to get a feel for how this helps to smooth latency spikes - instead of asking &amp;ldquo;Can I have the next one yet? &amp;nbsp;How about now? &amp;nbsp;Now?&amp;rdquo; for every individual item, the &lt;code&gt;Consumer&lt;/code&gt; simply says &amp;ldquo;Let me know when you&amp;rsquo;ve got more than this number&amp;rdquo;, and is told in return how many more entries it can grab. &amp;nbsp;Because these new entries have definitely been written (the ring buffer&amp;rsquo;s sequence has been updated), and because the only things trying to get to these entries can only read them and not write to them, this can be done without locks. &amp;nbsp;Which is nice. &amp;nbsp;Not only is it safer and easier to code against, it&amp;rsquo;s much faster not to use a lock.&lt;br /&gt;&lt;br /&gt;And the added bonus - you can have multiple &lt;code&gt;Consumers&lt;/code&gt; reading off the same &lt;code&gt;RingBuffer&lt;/code&gt;, with no need for locks and no need for additional queues to coordinate between the different threads. &amp;nbsp;So you can really run your processing in parallel with the Disruptor coordinating the effort.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/BatchConsumer.java&#34;&gt;BatchConsumer&lt;/a&gt; is an example of consumer code, and if you implement the &lt;a href=&#34;http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/BatchHandler.java&#34;&gt;BatchHandler &lt;/a&gt;you can get the &lt;code&gt;BatchConsumer&lt;/code&gt; to do the heavy lifting I&amp;rsquo;ve outlined above. &amp;nbsp;Then it&amp;rsquo;s easy to deal with the whole batch of entries processed (e.g. from 9-12 above) without having to fetch each one individually.&lt;br /&gt;&lt;br /&gt;EDIT: Note that version 2.0 of the Disruptor uses different names to the ones in this article. &amp;nbsp;Please see&amp;nbsp;&lt;a href=&#34;http://mechanitis.blogspot.com/2011/08/disruptor-20-all-change-please.html&#34;&gt;my summary of the changes&lt;/a&gt;&amp;nbsp;if you are confused about class names.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: What&#39;s so special about a ring buffer?</title>
      <link>http://trishagee.github.io/post/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer</guid>
      <description>&lt;p&gt;Recently we open sourced the &lt;a href=&#34;http://code.google.com/p/disruptor/&#34;&gt;LMAX Disruptor&lt;/a&gt;, the key to what makes our exchange so fast. &amp;nbsp;Why did we open source it? &amp;nbsp;Well, we&amp;rsquo;ve realised that conventional wisdom around high performance programming is&amp;hellip; a bit wrong. We&amp;rsquo;ve come up with a better, faster way to share data between threads, and it&amp;nbsp;would be selfish not to share it with the world. &amp;nbsp;Plus it makes us look dead clever.&lt;br /&gt;&lt;br /&gt;On the site you can &lt;a href=&#34;https://code.google.com/p/disruptor/&#34;&gt;download a technical article&lt;/a&gt; explaining what the Disruptor is and why it&amp;rsquo;s so clever and fast. &amp;nbsp;I even get a writing credit on it, which is gratifying when all I really did is insert commas and re-phrase sentences I didn&amp;rsquo;t understand.&lt;br /&gt;&lt;br /&gt;However I find the whole thing a bit much to digest all at once, so I&amp;rsquo;m going to explain it in smaller pieces, as suits my&amp;nbsp;&lt;a href=&#34;http://www.randsinrepose.com/archives/2003/07/10/nadd.html&#34;&gt;NADD&lt;/a&gt; audience.&lt;br /&gt;&lt;br /&gt;First up - the ring buffer. &amp;nbsp;Initially I was under the impression the Disruptor was just the ring buffer. &amp;nbsp;But I&amp;rsquo;ve come to realise that while this data structure is at the heart of the pattern, the clever bit about the Disruptor is controlling access to it. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;What on earth is a ring buffer?&lt;/b&gt;&lt;br /&gt;Well, it does what it says on the tin - it&amp;rsquo;s a ring (it&amp;rsquo;s circular and wraps), and you use it as a buffer to pass stuff from one context (one thread) to another:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-3gtuTbWgI-Y/TgD92AhOVxI/AAAAAAAAIDE/cWsAT81B0AI/s1600/RingBuffer.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-3gtuTbWgI-Y/TgD92AhOVxI/AAAAAAAAIDE/cWsAT81B0AI/s1600/RingBuffer.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(OK, I drew it in Paint. &amp;nbsp;I&amp;rsquo;m experimenting with sketch styles and hoping my OCD doesn&amp;rsquo;t kick in and demand perfect circles and straight lines at precise angles).&lt;br /&gt;&lt;br /&gt;So basically it&amp;rsquo;s an array with a pointer to the next available slot.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-WCm0iWYOrfc/TgD_cVBQExI/AAAAAAAAIDI/cEohveH8LP8/s1600/RingBufferInitial.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-WCm0iWYOrfc/TgD_cVBQExI/AAAAAAAAIDI/cEohveH8LP8/s1600/RingBufferInitial.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As you keep filling up the buffer (and presumable reading from it too), the sequence keeps incrementing, wrapping around the ring:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-cwPlKupFfks/TgEBetHtvmI/AAAAAAAAIDM/prOjrOPDo_E/s1600/RingBufferWrapped.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-cwPlKupFfks/TgEBetHtvmI/AAAAAAAAIDM/prOjrOPDo_E/s1600/RingBufferWrapped.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;To find the slot in the array that the current sequence points to you use a mod operation:&lt;br /&gt;&lt;blockquote style=&#34;padding: 5px;&#34;&gt;sequence mod array length = array index&lt;/blockquote&gt;So for the above ring buffer (using Java mod syntax): &lt;code&gt;12 % 10 = 2&lt;/code&gt;.  Easy.&lt;br /&gt;&lt;br /&gt;Actually it was a total accident that the picture had ten slots. &amp;nbsp;Powers of two work better because computers think in binary.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;So what?&lt;/b&gt;&lt;br /&gt;If you look at Wikipedia&amp;rsquo;s entry on &lt;a href=&#34;http://en.wikipedia.org/wiki/Circular_buffer&#34;&gt;Circular Buffers&lt;/a&gt;, you&amp;rsquo;ll see one major difference to the way we&amp;rsquo;ve implemented ours - we don&amp;rsquo;t have a pointer to the end. &amp;nbsp;We only have the next available sequence number. &amp;nbsp;This is deliberate - the original reason we chose a ring buffer was so we could support reliable messaging. &amp;nbsp;We needed a store of the messages the service had sent, so when another service sent a &lt;a href=&#34;http://en.wikipedia.org/wiki/Nak&#34;&gt;nak&lt;/a&gt; to say they hadn&amp;rsquo;t received some messages, it would be able to resend them.&lt;br /&gt;&lt;br /&gt;The ring buffer seems ideal for this. &amp;nbsp;It stores the sequence to show where the end of the buffer is, and if it gets a nak it can replay everything from that point to the current sequence:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-r054oYKWMAM/TgHWQjn-zTI/AAAAAAAAIEM/jH73U5AChvA/s1600/RingBufferReplay.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;149&#34; src=&#34;http://4.bp.blogspot.com/-r054oYKWMAM/TgHWQjn-zTI/AAAAAAAAIEM/jH73U5AChvA/s320/RingBufferReplay.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The difference between the ring buffer as we&amp;rsquo;ve implemented it, and the queues we had traditionally been using, is that we don&amp;rsquo;t consume the items in the buffer - they stay there until they get over-written. &amp;nbsp;Which is why we don&amp;rsquo;t need the &amp;ldquo;end&amp;rdquo; pointer you see in the Wikipedia version. &amp;nbsp;Deciding whether it&amp;rsquo;s OK to wrap or not is managed outside of the data structure itself (this is part of the producer and consumer behaviour - if you can&amp;rsquo;t wait for me to get round to blogging about it, check out the &lt;a href=&#34;https://code.google.com/p/disruptor/&#34;&gt;Disruptor site&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;And it&amp;rsquo;s so great because&amp;hellip;?&lt;/b&gt;&lt;br /&gt;So we use this data structure because it gives us some nice behaviour for reliable messaging. &amp;nbsp;It turns out though that it has some other nice characteristics. &lt;br /&gt;&lt;br /&gt;Firstly, it&amp;rsquo;s faster than something like a linked list because it&amp;rsquo;s an array, and has a&amp;nbsp;predictable&amp;nbsp;pattern of access. &amp;nbsp;This is nice and CPU-cache-friendly - at the hardware level the entries can be pre-loaded, so the machine is not constantly going back to main memory to load the next item in the ring.&lt;br /&gt;&lt;br /&gt;Secondly, it&amp;rsquo;s an array and you can pre-allocate it up front, making the objects effectively immortal. &amp;nbsp;This means the garbage collector has pretty much nothing to do here. &amp;nbsp;Again, unlike a linked list which creates objects for every item added to the list - these then all need to be cleaned up when the item is no longer in the list.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The missing pieces&lt;/b&gt;&lt;br /&gt;I haven&amp;rsquo;t talked about how to prevent the ring wrapping, or specifics around how to write stuff to and read things from the ring buffer. &amp;nbsp;You&amp;rsquo;ll also notice I&amp;rsquo;ve been comparing it to a data structure like a linked list, which I don&amp;rsquo;t think anyone believes is the answer to the world&amp;rsquo;s problems.&lt;br /&gt;&lt;br /&gt;The interesting part comes when you compare the Disruptor with an implementation like a queue. &amp;nbsp;Queues usually take care of all the stuff like the start and end of the queue, adding and consuming items, and so forth. &amp;nbsp;All the stuff I haven&amp;rsquo;t really touched on with the ring buffer. &amp;nbsp;That&amp;rsquo;s because the ring buffer itself isn&amp;rsquo;t responsible for these things, we&amp;rsquo;ve moved these concerns outside of the data structure.&lt;br /&gt;&lt;br /&gt;For more details you&amp;rsquo;re just going to have to &lt;a href=&#34;https://code.google.com/p/disruptor/&#34;&gt;read the paper or check out the code&lt;/a&gt;. &amp;nbsp;Or &lt;a href=&#34;http://www.infoq.com/presentations/LMAX&#34;&gt;watch Mike and Martin&lt;/a&gt; at QCon San Francisco last year. &amp;nbsp;Or wait for me to have a spare five minutes to get my head around the rest of it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
